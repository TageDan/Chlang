<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="934" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="917.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="917.00"> </text><svg id="frames" x="10" width="1180" total_samples="753259759"><g><title>core::slice::sort::recurse (1,003,009 samples, 0.13%)</title><rect x="0.0000%" y="469" width="0.1332%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="479.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1,003,009 samples, 0.13%)</title><rect x="0.0000%" y="453" width="0.1332%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="463.50"></text></g><g><title>core::slice::sort::insert_tail (1,003,009 samples, 0.13%)</title><rect x="0.0000%" y="437" width="0.1332%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="0.0000%" y="421" width="0.1332%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="431.50"></text></g><g><title>chlang::tree_evaluator::eval::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="0.0000%" y="405" width="0.1332%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="415.50"></text></g><g><title>chlang::board::Board::piece_type (1,003,009 samples, 0.13%)</title><rect x="0.0000%" y="389" width="0.1332%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="399.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.13%)</title><rect x="0.0000%" y="373" width="0.1332%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.13%)</title><rect x="0.0000%" y="357" width="0.1332%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (2,006,018 samples, 0.27%)</title><rect x="0.0000%" y="517" width="0.2663%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="2006018"/><text x="0.2500%" y="527.50"></text></g><g><title>core::slice::sort::quicksort (2,006,018 samples, 0.27%)</title><rect x="0.0000%" y="501" width="0.2663%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="2006018"/><text x="0.2500%" y="511.50"></text></g><g><title>core::slice::sort::recurse (2,006,018 samples, 0.27%)</title><rect x="0.0000%" y="485" width="0.2663%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="2006018"/><text x="0.2500%" y="495.50"></text></g><g><title>core::slice::sort::partition_equal (1,003,009 samples, 0.13%)</title><rect x="0.1332%" y="469" width="0.1332%" height="15" fill="rgb(240,193,28)" fg:x="1003009" fg:w="1003009"/><text x="0.3832%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="0.1332%" y="453" width="0.1332%" height="15" fill="rgb(216,20,37)" fg:x="1003009" fg:w="1003009"/><text x="0.3832%" y="463.50"></text></g><g><title>chlang::tree_evaluator::Bot::find_best_move::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="0.1332%" y="437" width="0.1332%" height="15" fill="rgb(206,188,39)" fg:x="1003009" fg:w="1003009"/><text x="0.3832%" y="447.50"></text></g><g><title>chlang::board::Board::piece_type (1,003,009 samples, 0.13%)</title><rect x="0.1332%" y="421" width="0.1332%" height="15" fill="rgb(217,207,13)" fg:x="1003009" fg:w="1003009"/><text x="0.3832%" y="431.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.13%)</title><rect x="0.1332%" y="405" width="0.1332%" height="15" fill="rgb(231,73,38)" fg:x="1003009" fg:w="1003009"/><text x="0.3832%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.13%)</title><rect x="0.1332%" y="389" width="0.1332%" height="15" fill="rgb(225,20,46)" fg:x="1003009" fg:w="1003009"/><text x="0.3832%" y="399.50"></text></g><g><title>core::slice::sort::recurse (1,003,009 samples, 0.13%)</title><rect x="0.2663%" y="453" width="0.1332%" height="15" fill="rgb(210,31,41)" fg:x="2006018" fg:w="1003009"/><text x="0.5163%" y="463.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1,003,009 samples, 0.13%)</title><rect x="0.2663%" y="437" width="0.1332%" height="15" fill="rgb(221,200,47)" fg:x="2006018" fg:w="1003009"/><text x="0.5163%" y="447.50"></text></g><g><title>core::slice::sort::insert_tail (1,003,009 samples, 0.13%)</title><rect x="0.2663%" y="421" width="0.1332%" height="15" fill="rgb(226,26,5)" fg:x="2006018" fg:w="1003009"/><text x="0.5163%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="0.2663%" y="405" width="0.1332%" height="15" fill="rgb(249,33,26)" fg:x="2006018" fg:w="1003009"/><text x="0.5163%" y="415.50"></text></g><g><title>chlang::tree_evaluator::eval::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="0.2663%" y="389" width="0.1332%" height="15" fill="rgb(235,183,28)" fg:x="2006018" fg:w="1003009"/><text x="0.5163%" y="399.50"></text></g><g><title>chlang::board::Board::piece_type (1,003,009 samples, 0.13%)</title><rect x="0.2663%" y="373" width="0.1332%" height="15" fill="rgb(221,5,38)" fg:x="2006018" fg:w="1003009"/><text x="0.5163%" y="383.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.13%)</title><rect x="0.2663%" y="357" width="0.1332%" height="15" fill="rgb(247,18,42)" fg:x="2006018" fg:w="1003009"/><text x="0.5163%" y="367.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.13%)</title><rect x="0.3995%" y="373" width="0.1332%" height="15" fill="rgb(241,131,45)" fg:x="3009027" fg:w="1003009"/><text x="0.6495%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.13%)</title><rect x="0.3995%" y="357" width="0.1332%" height="15" fill="rgb(249,31,29)" fg:x="3009027" fg:w="1003009"/><text x="0.6495%" y="367.50"></text></g><g><title>core::slice::sort::partition (2,006,018 samples, 0.27%)</title><rect x="0.3995%" y="453" width="0.2663%" height="15" fill="rgb(225,111,53)" fg:x="3009027" fg:w="2006018"/><text x="0.6495%" y="463.50"></text></g><g><title>core::slice::sort::partition_in_blocks (2,006,018 samples, 0.27%)</title><rect x="0.3995%" y="437" width="0.2663%" height="15" fill="rgb(238,160,17)" fg:x="3009027" fg:w="2006018"/><text x="0.6495%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key::{{closure}} (2,006,018 samples, 0.27%)</title><rect x="0.3995%" y="421" width="0.2663%" height="15" fill="rgb(214,148,48)" fg:x="3009027" fg:w="2006018"/><text x="0.6495%" y="431.50"></text></g><g><title>chlang::tree_evaluator::Bot::find_best_move::{{closure}} (2,006,018 samples, 0.27%)</title><rect x="0.3995%" y="405" width="0.2663%" height="15" fill="rgb(232,36,49)" fg:x="3009027" fg:w="2006018"/><text x="0.6495%" y="415.50"></text></g><g><title>chlang::board::Board::piece_type (2,006,018 samples, 0.27%)</title><rect x="0.3995%" y="389" width="0.2663%" height="15" fill="rgb(209,103,24)" fg:x="3009027" fg:w="2006018"/><text x="0.6495%" y="399.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1,003,009 samples, 0.13%)</title><rect x="0.6658%" y="453" width="0.1332%" height="15" fill="rgb(229,88,8)" fg:x="5015045" fg:w="1003009"/><text x="0.9158%" y="463.50"></text></g><g><title>core::slice::sort::insert_tail (1,003,009 samples, 0.13%)</title><rect x="0.6658%" y="437" width="0.1332%" height="15" fill="rgb(213,181,19)" fg:x="5015045" fg:w="1003009"/><text x="0.9158%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="0.6658%" y="421" width="0.1332%" height="15" fill="rgb(254,191,54)" fg:x="5015045" fg:w="1003009"/><text x="0.9158%" y="431.50"></text></g><g><title>chlang::tree_evaluator::eval::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="0.6658%" y="405" width="0.1332%" height="15" fill="rgb(241,83,37)" fg:x="5015045" fg:w="1003009"/><text x="0.9158%" y="415.50"></text></g><g><title>chlang::board::Board::piece_type (1,003,009 samples, 0.13%)</title><rect x="0.6658%" y="389" width="0.1332%" height="15" fill="rgb(233,36,39)" fg:x="5015045" fg:w="1003009"/><text x="0.9158%" y="399.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.13%)</title><rect x="0.6658%" y="373" width="0.1332%" height="15" fill="rgb(226,3,54)" fg:x="5015045" fg:w="1003009"/><text x="0.9158%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (5,015,045 samples, 0.67%)</title><rect x="0.2663%" y="501" width="0.6658%" height="15" fill="rgb(245,192,40)" fg:x="2006018" fg:w="5015045"/><text x="0.5163%" y="511.50"></text></g><g><title>core::slice::sort::quicksort (5,015,045 samples, 0.67%)</title><rect x="0.2663%" y="485" width="0.6658%" height="15" fill="rgb(238,167,29)" fg:x="2006018" fg:w="5015045"/><text x="0.5163%" y="495.50"></text></g><g><title>core::slice::sort::recurse (5,015,045 samples, 0.67%)</title><rect x="0.2663%" y="469" width="0.6658%" height="15" fill="rgb(232,182,51)" fg:x="2006018" fg:w="5015045"/><text x="0.5163%" y="479.50"></text></g><g><title>core::slice::sort::choose_pivot (1,003,009 samples, 0.13%)</title><rect x="0.7989%" y="453" width="0.1332%" height="15" fill="rgb(231,60,39)" fg:x="6018054" fg:w="1003009"/><text x="1.0489%" y="463.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="0.7989%" y="437" width="0.1332%" height="15" fill="rgb(208,69,12)" fg:x="6018054" fg:w="1003009"/><text x="1.0489%" y="447.50"></text></g><g><title>core::slice::sort::choose_pivot::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="0.7989%" y="421" width="0.1332%" height="15" fill="rgb(235,93,37)" fg:x="6018054" fg:w="1003009"/><text x="1.0489%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="0.7989%" y="405" width="0.1332%" height="15" fill="rgb(213,116,39)" fg:x="6018054" fg:w="1003009"/><text x="1.0489%" y="415.50"></text></g><g><title>chlang::tree_evaluator::Bot::find_best_move::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="0.7989%" y="389" width="0.1332%" height="15" fill="rgb(222,207,29)" fg:x="6018054" fg:w="1003009"/><text x="1.0489%" y="399.50"></text></g><g><title>chlang::board::Board::piece_type (1,003,009 samples, 0.13%)</title><rect x="0.7989%" y="373" width="0.1332%" height="15" fill="rgb(206,96,30)" fg:x="6018054" fg:w="1003009"/><text x="1.0489%" y="383.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.13%)</title><rect x="0.7989%" y="357" width="0.1332%" height="15" fill="rgb(218,138,4)" fg:x="6018054" fg:w="1003009"/><text x="1.0489%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.13%)</title><rect x="0.7989%" y="341" width="0.1332%" height="15" fill="rgb(250,191,14)" fg:x="6018054" fg:w="1003009"/><text x="1.0489%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (6,018,054 samples, 0.80%)</title><rect x="0.9321%" y="389" width="0.7989%" height="15" fill="rgb(239,60,40)" fg:x="7021063" fg:w="6018054"/><text x="1.1821%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6,018,054 samples, 0.80%)</title><rect x="0.9321%" y="373" width="0.7989%" height="15" fill="rgb(206,27,48)" fg:x="7021063" fg:w="6018054"/><text x="1.1821%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (5,015,045 samples, 0.67%)</title><rect x="1.7310%" y="389" width="0.6658%" height="15" fill="rgb(225,35,8)" fg:x="13039117" fg:w="5015045"/><text x="1.9810%" y="399.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (1,003,009 samples, 0.13%)</title><rect x="2.3968%" y="325" width="0.1332%" height="15" fill="rgb(250,213,24)" fg:x="18054162" fg:w="1003009"/><text x="2.6468%" y="335.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (1,003,009 samples, 0.13%)</title><rect x="2.3968%" y="309" width="0.1332%" height="15" fill="rgb(247,123,22)" fg:x="18054162" fg:w="1003009"/><text x="2.6468%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2,006,018 samples, 0.27%)</title><rect x="2.3968%" y="389" width="0.2663%" height="15" fill="rgb(231,138,38)" fg:x="18054162" fg:w="2006018"/><text x="2.6468%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (2,006,018 samples, 0.27%)</title><rect x="2.3968%" y="373" width="0.2663%" height="15" fill="rgb(231,145,46)" fg:x="18054162" fg:w="2006018"/><text x="2.6468%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,006,018 samples, 0.27%)</title><rect x="2.3968%" y="357" width="0.2663%" height="15" fill="rgb(251,118,11)" fg:x="18054162" fg:w="2006018"/><text x="2.6468%" y="367.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::cmp::PartialEq&gt;::eq (2,006,018 samples, 0.27%)</title><rect x="2.3968%" y="341" width="0.2663%" height="15" fill="rgb(217,147,25)" fg:x="18054162" fg:w="2006018"/><text x="2.6468%" y="351.50"></text></g><g><title>&lt;chlang::board::Player as core::cmp::PartialEq&gt;::eq (1,003,009 samples, 0.13%)</title><rect x="2.5300%" y="325" width="0.1332%" height="15" fill="rgb(247,81,37)" fg:x="19057171" fg:w="1003009"/><text x="2.7800%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (14,042,126 samples, 1.86%)</title><rect x="0.9321%" y="421" width="1.8642%" height="15" fill="rgb(209,12,38)" fg:x="7021063" fg:w="14042126"/><text x="1.1821%" y="431.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (14,042,126 samples, 1.86%)</title><rect x="0.9321%" y="405" width="1.8642%" height="15" fill="rgb(227,1,9)" fg:x="7021063" fg:w="14042126"/><text x="1.1821%" y="415.50">h..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.13%)</title><rect x="2.6631%" y="389" width="0.1332%" height="15" fill="rgb(248,47,43)" fg:x="20060180" fg:w="1003009"/><text x="2.9131%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1,003,009 samples, 0.13%)</title><rect x="2.6631%" y="373" width="0.1332%" height="15" fill="rgb(221,10,30)" fg:x="20060180" fg:w="1003009"/><text x="2.9131%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_ne_bytes (1,003,009 samples, 0.13%)</title><rect x="2.7963%" y="309" width="0.1332%" height="15" fill="rgb(210,229,1)" fg:x="21063189" fg:w="1003009"/><text x="3.0463%" y="319.50"></text></g><g><title>core::hash::sip::u8to64_le (4,012,036 samples, 0.53%)</title><rect x="2.9294%" y="261" width="0.5326%" height="15" fill="rgb(222,148,37)" fg:x="22066198" fg:w="4012036"/><text x="3.1794%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,009,027 samples, 0.40%)</title><rect x="3.4621%" y="245" width="0.3995%" height="15" fill="rgb(234,67,33)" fg:x="26078234" fg:w="3009027"/><text x="3.7121%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4,012,036 samples, 0.53%)</title><rect x="3.4621%" y="261" width="0.5326%" height="15" fill="rgb(247,98,35)" fg:x="26078234" fg:w="4012036"/><text x="3.7121%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (14,042,126 samples, 1.86%)</title><rect x="2.9294%" y="309" width="1.8642%" height="15" fill="rgb(247,138,52)" fg:x="22066198" fg:w="14042126"/><text x="3.1794%" y="319.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14,042,126 samples, 1.86%)</title><rect x="2.9294%" y="293" width="1.8642%" height="15" fill="rgb(213,79,30)" fg:x="22066198" fg:w="14042126"/><text x="3.1794%" y="303.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14,042,126 samples, 1.86%)</title><rect x="2.9294%" y="277" width="1.8642%" height="15" fill="rgb(246,177,23)" fg:x="22066198" fg:w="14042126"/><text x="3.1794%" y="287.50">&lt;..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (16,048,144 samples, 2.13%)</title><rect x="2.7963%" y="341" width="2.1305%" height="15" fill="rgb(230,62,27)" fg:x="21063189" fg:w="16048144"/><text x="3.0463%" y="351.50">c..</text></g><g><title>core::hash::Hasher::write_u64 (16,048,144 samples, 2.13%)</title><rect x="2.7963%" y="325" width="2.1305%" height="15" fill="rgb(216,154,8)" fg:x="21063189" fg:w="16048144"/><text x="3.0463%" y="335.50">c..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,009,027 samples, 0.40%)</title><rect x="4.9268%" y="229" width="0.3995%" height="15" fill="rgb(244,35,45)" fg:x="37111333" fg:w="3009027"/><text x="5.1768%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (11,033,099 samples, 1.46%)</title><rect x="5.3262%" y="229" width="1.4647%" height="15" fill="rgb(251,115,12)" fg:x="40120360" fg:w="11033099"/><text x="5.5762%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (17,051,153 samples, 2.26%)</title><rect x="4.9268%" y="245" width="2.2636%" height="15" fill="rgb(240,54,50)" fg:x="37111333" fg:w="17051153"/><text x="5.1768%" y="255.50">&lt;..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (26,078,234 samples, 3.46%)</title><rect x="4.9268%" y="309" width="3.4621%" height="15" fill="rgb(233,84,52)" fg:x="37111333" fg:w="26078234"/><text x="5.1768%" y="319.50">cor..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (26,078,234 samples, 3.46%)</title><rect x="4.9268%" y="293" width="3.4621%" height="15" fill="rgb(207,117,47)" fg:x="37111333" fg:w="26078234"/><text x="5.1768%" y="303.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (26,078,234 samples, 3.46%)</title><rect x="4.9268%" y="277" width="3.4621%" height="15" fill="rgb(249,43,39)" fg:x="37111333" fg:w="26078234"/><text x="5.1768%" y="287.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (26,078,234 samples, 3.46%)</title><rect x="4.9268%" y="261" width="3.4621%" height="15" fill="rgb(209,38,44)" fg:x="37111333" fg:w="26078234"/><text x="5.1768%" y="271.50">&lt;co..</text></g><g><title>core::hash::sip::u8to64_le (2,006,018 samples, 0.27%)</title><rect x="8.3888%" y="229" width="0.2663%" height="15" fill="rgb(236,212,23)" fg:x="63189567" fg:w="2006018"/><text x="8.6388%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,009,027 samples, 0.40%)</title><rect x="8.6551%" y="213" width="0.3995%" height="15" fill="rgb(242,79,21)" fg:x="65195585" fg:w="3009027"/><text x="8.9051%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4,012,036 samples, 0.53%)</title><rect x="9.0546%" y="213" width="0.5326%" height="15" fill="rgb(211,96,35)" fg:x="68204612" fg:w="4012036"/><text x="9.3046%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9,027,081 samples, 1.20%)</title><rect x="8.6551%" y="229" width="1.1984%" height="15" fill="rgb(253,215,40)" fg:x="65195585" fg:w="9027081"/><text x="8.9051%" y="239.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (19,057,171 samples, 2.53%)</title><rect x="8.3888%" y="309" width="2.5300%" height="15" fill="rgb(211,81,21)" fg:x="63189567" fg:w="19057171"/><text x="8.6388%" y="319.50">co..</text></g><g><title>core::hash::Hasher::write_usize (19,057,171 samples, 2.53%)</title><rect x="8.3888%" y="293" width="2.5300%" height="15" fill="rgb(208,190,38)" fg:x="63189567" fg:w="19057171"/><text x="8.6388%" y="303.50">co..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (19,057,171 samples, 2.53%)</title><rect x="8.3888%" y="277" width="2.5300%" height="15" fill="rgb(235,213,38)" fg:x="63189567" fg:w="19057171"/><text x="8.6388%" y="287.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (19,057,171 samples, 2.53%)</title><rect x="8.3888%" y="261" width="2.5300%" height="15" fill="rgb(237,122,38)" fg:x="63189567" fg:w="19057171"/><text x="8.6388%" y="271.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (19,057,171 samples, 2.53%)</title><rect x="8.3888%" y="245" width="2.5300%" height="15" fill="rgb(244,218,35)" fg:x="63189567" fg:w="19057171"/><text x="8.6388%" y="255.50">&lt;c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for bool&gt;::hash (3,009,027 samples, 0.40%)</title><rect x="10.9188%" y="293" width="0.3995%" height="15" fill="rgb(240,68,47)" fg:x="82246738" fg:w="3009027"/><text x="11.1688%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u8 (3,009,027 samples, 0.40%)</title><rect x="10.9188%" y="277" width="0.3995%" height="15" fill="rgb(210,16,53)" fg:x="82246738" fg:w="3009027"/><text x="11.1688%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3,009,027 samples, 0.40%)</title><rect x="10.9188%" y="261" width="0.3995%" height="15" fill="rgb(235,124,12)" fg:x="82246738" fg:w="3009027"/><text x="11.1688%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3,009,027 samples, 0.40%)</title><rect x="10.9188%" y="245" width="0.3995%" height="15" fill="rgb(224,169,11)" fg:x="82246738" fg:w="3009027"/><text x="11.1688%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,009,027 samples, 0.40%)</title><rect x="10.9188%" y="229" width="0.3995%" height="15" fill="rgb(250,166,2)" fg:x="82246738" fg:w="3009027"/><text x="11.1688%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,006,018 samples, 0.27%)</title><rect x="11.3182%" y="293" width="0.2663%" height="15" fill="rgb(242,216,29)" fg:x="85255765" fg:w="2006018"/><text x="11.5682%" y="303.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2,006,018 samples, 0.27%)</title><rect x="11.3182%" y="277" width="0.2663%" height="15" fill="rgb(230,116,27)" fg:x="85255765" fg:w="2006018"/><text x="11.5682%" y="287.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (54,162,486 samples, 7.19%)</title><rect x="4.9268%" y="341" width="7.1904%" height="15" fill="rgb(228,99,48)" fg:x="37111333" fg:w="54162486"/><text x="5.1768%" y="351.50">core::arra..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (54,162,486 samples, 7.19%)</title><rect x="4.9268%" y="325" width="7.1904%" height="15" fill="rgb(253,11,6)" fg:x="37111333" fg:w="54162486"/><text x="5.1768%" y="335.50">core::hash..</text></g><g><title>core::hash::Hash::hash_slice (9,027,081 samples, 1.20%)</title><rect x="10.9188%" y="309" width="1.1984%" height="15" fill="rgb(247,143,39)" fg:x="82246738" fg:w="9027081"/><text x="11.1688%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,006,018 samples, 0.27%)</title><rect x="12.1172%" y="213" width="0.2663%" height="15" fill="rgb(236,97,10)" fg:x="91273819" fg:w="2006018"/><text x="12.3672%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (3,009,027 samples, 0.40%)</title><rect x="12.1172%" y="229" width="0.3995%" height="15" fill="rgb(233,208,19)" fg:x="91273819" fg:w="3009027"/><text x="12.3672%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,003,009 samples, 0.13%)</title><rect x="12.5166%" y="229" width="0.1332%" height="15" fill="rgb(216,164,2)" fg:x="94282846" fg:w="1003009"/><text x="12.7666%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (5,015,045 samples, 0.67%)</title><rect x="12.1172%" y="325" width="0.6658%" height="15" fill="rgb(220,129,5)" fg:x="91273819" fg:w="5015045"/><text x="12.3672%" y="335.50"></text></g><g><title>core::hash::Hasher::write_isize (5,015,045 samples, 0.67%)</title><rect x="12.1172%" y="309" width="0.6658%" height="15" fill="rgb(242,17,10)" fg:x="91273819" fg:w="5015045"/><text x="12.3672%" y="319.50"></text></g><g><title>core::hash::Hasher::write_usize (5,015,045 samples, 0.67%)</title><rect x="12.1172%" y="293" width="0.6658%" height="15" fill="rgb(242,107,0)" fg:x="91273819" fg:w="5015045"/><text x="12.3672%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5,015,045 samples, 0.67%)</title><rect x="12.1172%" y="277" width="0.6658%" height="15" fill="rgb(251,28,31)" fg:x="91273819" fg:w="5015045"/><text x="12.3672%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5,015,045 samples, 0.67%)</title><rect x="12.1172%" y="261" width="0.6658%" height="15" fill="rgb(233,223,10)" fg:x="91273819" fg:w="5015045"/><text x="12.3672%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,015,045 samples, 0.67%)</title><rect x="12.1172%" y="245" width="0.6658%" height="15" fill="rgb(215,21,27)" fg:x="91273819" fg:w="5015045"/><text x="12.3672%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,003,009 samples, 0.13%)</title><rect x="12.7830%" y="213" width="0.1332%" height="15" fill="rgb(232,23,21)" fg:x="96288864" fg:w="1003009"/><text x="13.0330%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.13%)</title><rect x="12.7830%" y="197" width="0.1332%" height="15" fill="rgb(244,5,23)" fg:x="96288864" fg:w="1003009"/><text x="13.0330%" y="207.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (7,021,063 samples, 0.93%)</title><rect x="12.1172%" y="341" width="0.9321%" height="15" fill="rgb(226,81,46)" fg:x="91273819" fg:w="7021063"/><text x="12.3672%" y="351.50"></text></g><g><title>&lt;chlang::board::Position as core::hash::Hash&gt;::hash (2,006,018 samples, 0.27%)</title><rect x="12.7830%" y="325" width="0.2663%" height="15" fill="rgb(247,70,30)" fg:x="96288864" fg:w="2006018"/><text x="13.0330%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (2,006,018 samples, 0.27%)</title><rect x="12.7830%" y="309" width="0.2663%" height="15" fill="rgb(212,68,19)" fg:x="96288864" fg:w="2006018"/><text x="13.0330%" y="319.50"></text></g><g><title>core::hash::Hasher::write_i64 (2,006,018 samples, 0.27%)</title><rect x="12.7830%" y="293" width="0.2663%" height="15" fill="rgb(240,187,13)" fg:x="96288864" fg:w="2006018"/><text x="13.0330%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u64 (2,006,018 samples, 0.27%)</title><rect x="12.7830%" y="277" width="0.2663%" height="15" fill="rgb(223,113,26)" fg:x="96288864" fg:w="2006018"/><text x="13.0330%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2,006,018 samples, 0.27%)</title><rect x="12.7830%" y="261" width="0.2663%" height="15" fill="rgb(206,192,2)" fg:x="96288864" fg:w="2006018"/><text x="13.0330%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2,006,018 samples, 0.27%)</title><rect x="12.7830%" y="245" width="0.2663%" height="15" fill="rgb(241,108,4)" fg:x="96288864" fg:w="2006018"/><text x="13.0330%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,006,018 samples, 0.27%)</title><rect x="12.7830%" y="229" width="0.2663%" height="15" fill="rgb(247,173,49)" fg:x="96288864" fg:w="2006018"/><text x="13.0330%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (2,006,018 samples, 0.27%)</title><rect x="13.0493%" y="229" width="0.2663%" height="15" fill="rgb(224,114,35)" fg:x="98294882" fg:w="2006018"/><text x="13.2993%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3,009,027 samples, 0.40%)</title><rect x="13.3156%" y="229" width="0.3995%" height="15" fill="rgb(245,159,27)" fg:x="100300900" fg:w="3009027"/><text x="13.5656%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,009,027 samples, 0.40%)</title><rect x="13.3156%" y="213" width="0.3995%" height="15" fill="rgb(245,172,44)" fg:x="100300900" fg:w="3009027"/><text x="13.5656%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (84,252,756 samples, 11.19%)</title><rect x="2.7963%" y="389" width="11.1851%" height="15" fill="rgb(236,23,11)" fg:x="21063189" fg:w="84252756"/><text x="3.0463%" y="399.50">core::hash::impl..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (84,252,756 samples, 11.19%)</title><rect x="2.7963%" y="373" width="11.1851%" height="15" fill="rgb(205,117,38)" fg:x="21063189" fg:w="84252756"/><text x="3.0463%" y="383.50">core::hash::impl..</text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (84,252,756 samples, 11.19%)</title><rect x="2.7963%" y="357" width="11.1851%" height="15" fill="rgb(237,72,25)" fg:x="21063189" fg:w="84252756"/><text x="3.0463%" y="367.50">&lt;chlang::board::..</text></g><g><title>&lt;chlang::board::Player as core::hash::Hash&gt;::hash (7,021,063 samples, 0.93%)</title><rect x="13.0493%" y="341" width="0.9321%" height="15" fill="rgb(244,70,9)" fg:x="98294882" fg:w="7021063"/><text x="13.2993%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (7,021,063 samples, 0.93%)</title><rect x="13.0493%" y="325" width="0.9321%" height="15" fill="rgb(217,125,39)" fg:x="98294882" fg:w="7021063"/><text x="13.2993%" y="335.50"></text></g><g><title>core::hash::Hasher::write_isize (7,021,063 samples, 0.93%)</title><rect x="13.0493%" y="309" width="0.9321%" height="15" fill="rgb(235,36,10)" fg:x="98294882" fg:w="7021063"/><text x="13.2993%" y="319.50"></text></g><g><title>core::hash::Hasher::write_usize (7,021,063 samples, 0.93%)</title><rect x="13.0493%" y="293" width="0.9321%" height="15" fill="rgb(251,123,47)" fg:x="98294882" fg:w="7021063"/><text x="13.2993%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (7,021,063 samples, 0.93%)</title><rect x="13.0493%" y="277" width="0.9321%" height="15" fill="rgb(221,13,13)" fg:x="98294882" fg:w="7021063"/><text x="13.2993%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7,021,063 samples, 0.93%)</title><rect x="13.0493%" y="261" width="0.9321%" height="15" fill="rgb(238,131,9)" fg:x="98294882" fg:w="7021063"/><text x="13.2993%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7,021,063 samples, 0.93%)</title><rect x="13.0493%" y="245" width="0.9321%" height="15" fill="rgb(211,50,8)" fg:x="98294882" fg:w="7021063"/><text x="13.2993%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,009,027 samples, 0.40%)</title><rect x="13.9814%" y="325" width="0.3995%" height="15" fill="rgb(245,182,24)" fg:x="105315945" fg:w="3009027"/><text x="14.2314%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6,018,054 samples, 0.80%)</title><rect x="14.3808%" y="325" width="0.7989%" height="15" fill="rgb(242,14,37)" fg:x="108324972" fg:w="6018054"/><text x="14.6308%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (13,039,117 samples, 1.73%)</title><rect x="13.9814%" y="341" width="1.7310%" height="15" fill="rgb(246,228,12)" fg:x="105315945" fg:w="13039117"/><text x="14.2314%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,003,009 samples, 0.13%)</title><rect x="15.7124%" y="325" width="0.1332%" height="15" fill="rgb(213,55,15)" fg:x="118355062" fg:w="1003009"/><text x="15.9624%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2,006,018 samples, 0.27%)</title><rect x="15.7124%" y="341" width="0.2663%" height="15" fill="rgb(209,9,3)" fg:x="118355062" fg:w="2006018"/><text x="15.9624%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.13%)</title><rect x="15.8455%" y="325" width="0.1332%" height="15" fill="rgb(230,59,30)" fg:x="119358071" fg:w="1003009"/><text x="16.0955%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (25,075,225 samples, 3.33%)</title><rect x="13.9814%" y="389" width="3.3289%" height="15" fill="rgb(209,121,21)" fg:x="105315945" fg:w="25075225"/><text x="14.2314%" y="399.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (25,075,225 samples, 3.33%)</title><rect x="13.9814%" y="373" width="3.3289%" height="15" fill="rgb(220,109,13)" fg:x="105315945" fg:w="25075225"/><text x="14.2314%" y="383.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (25,075,225 samples, 3.33%)</title><rect x="13.9814%" y="357" width="3.3289%" height="15" fill="rgb(232,18,1)" fg:x="105315945" fg:w="25075225"/><text x="14.2314%" y="367.50">&lt;co..</text></g><g><title>hashbrown::map::make_hash (110,330,990 samples, 14.65%)</title><rect x="2.7963%" y="421" width="14.6471%" height="15" fill="rgb(215,41,42)" fg:x="21063189" fg:w="110330990"/><text x="3.0463%" y="431.50">hashbrown::map::make_h..</text></g><g><title>core::hash::BuildHasher::hash_one (110,330,990 samples, 14.65%)</title><rect x="2.7963%" y="405" width="14.6471%" height="15" fill="rgb(224,123,36)" fg:x="21063189" fg:w="110330990"/><text x="3.0463%" y="415.50">core::hash::BuildHashe..</text></g><g><title>hashbrown::raw::capacity_to_buckets (2,006,018 samples, 0.27%)</title><rect x="17.4434%" y="309" width="0.2663%" height="15" fill="rgb(240,125,3)" fg:x="131394179" fg:w="2006018"/><text x="17.6934%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (2,006,018 samples, 0.27%)</title><rect x="17.4434%" y="293" width="0.2663%" height="15" fill="rgb(205,98,50)" fg:x="131394179" fg:w="2006018"/><text x="17.6934%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (2,006,018 samples, 0.27%)</title><rect x="17.4434%" y="277" width="0.2663%" height="15" fill="rgb(205,185,37)" fg:x="131394179" fg:w="2006018"/><text x="17.6934%" y="287.50"></text></g><g><title>checked_request2size (1,003,009 samples, 0.13%)</title><rect x="17.7097%" y="213" width="0.1332%" height="15" fill="rgb(238,207,15)" fg:x="133400197" fg:w="1003009"/><text x="17.9597%" y="223.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (2,006,018 samples, 0.27%)</title><rect x="17.7097%" y="293" width="0.2663%" height="15" fill="rgb(213,199,42)" fg:x="133400197" fg:w="2006018"/><text x="17.9597%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,006,018 samples, 0.27%)</title><rect x="17.7097%" y="277" width="0.2663%" height="15" fill="rgb(235,201,11)" fg:x="133400197" fg:w="2006018"/><text x="17.9597%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,006,018 samples, 0.27%)</title><rect x="17.7097%" y="261" width="0.2663%" height="15" fill="rgb(207,46,11)" fg:x="133400197" fg:w="2006018"/><text x="17.9597%" y="271.50"></text></g><g><title>alloc::alloc::alloc (2,006,018 samples, 0.27%)</title><rect x="17.7097%" y="245" width="0.2663%" height="15" fill="rgb(241,35,35)" fg:x="133400197" fg:w="2006018"/><text x="17.9597%" y="255.50"></text></g><g><title>__GI___libc_malloc (2,006,018 samples, 0.27%)</title><rect x="17.7097%" y="229" width="0.2663%" height="15" fill="rgb(243,32,47)" fg:x="133400197" fg:w="2006018"/><text x="17.9597%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (3,009,027 samples, 0.40%)</title><rect x="17.7097%" y="309" width="0.3995%" height="15" fill="rgb(247,202,23)" fg:x="133400197" fg:w="3009027"/><text x="17.9597%" y="319.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1,003,009 samples, 0.13%)</title><rect x="17.9760%" y="293" width="0.1332%" height="15" fill="rgb(219,102,11)" fg:x="135406215" fg:w="1003009"/><text x="18.2260%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1,003,009 samples, 0.13%)</title><rect x="17.9760%" y="277" width="0.1332%" height="15" fill="rgb(243,110,44)" fg:x="135406215" fg:w="1003009"/><text x="18.2260%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (6,018,054 samples, 0.80%)</title><rect x="17.4434%" y="341" width="0.7989%" height="15" fill="rgb(222,74,54)" fg:x="131394179" fg:w="6018054"/><text x="17.6934%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (6,018,054 samples, 0.80%)</title><rect x="17.4434%" y="325" width="0.7989%" height="15" fill="rgb(216,99,12)" fg:x="131394179" fg:w="6018054"/><text x="17.6934%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1,003,009 samples, 0.13%)</title><rect x="18.1092%" y="309" width="0.1332%" height="15" fill="rgb(226,22,26)" fg:x="136409224" fg:w="1003009"/><text x="18.3592%" y="319.50"></text></g><g><title>core::intrinsics::write_bytes (1,003,009 samples, 0.13%)</title><rect x="18.1092%" y="293" width="0.1332%" height="15" fill="rgb(217,163,10)" fg:x="136409224" fg:w="1003009"/><text x="18.3592%" y="303.50"></text></g><g><title>__memset_avx2_unaligned (1,003,009 samples, 0.13%)</title><rect x="18.1092%" y="277" width="0.1332%" height="15" fill="rgb(213,25,53)" fg:x="136409224" fg:w="1003009"/><text x="18.3592%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1,003,009 samples, 0.13%)</title><rect x="18.2423%" y="293" width="0.1332%" height="15" fill="rgb(252,105,26)" fg:x="137412233" fg:w="1003009"/><text x="18.4923%" y="303.50"></text></g><g><title>hashbrown::raw::is_full (1,003,009 samples, 0.13%)</title><rect x="18.2423%" y="277" width="0.1332%" height="15" fill="rgb(220,39,43)" fg:x="137412233" fg:w="1003009"/><text x="18.4923%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (4,012,036 samples, 0.53%)</title><rect x="18.2423%" y="309" width="0.5326%" height="15" fill="rgb(229,68,48)" fg:x="137412233" fg:w="4012036"/><text x="18.4923%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (6,018,054 samples, 0.80%)</title><rect x="18.7750%" y="293" width="0.7989%" height="15" fill="rgb(252,8,32)" fg:x="141424269" fg:w="6018054"/><text x="19.0250%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6,018,054 samples, 0.80%)</title><rect x="18.7750%" y="277" width="0.7989%" height="15" fill="rgb(223,20,43)" fg:x="141424269" fg:w="6018054"/><text x="19.0250%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (13,039,117 samples, 1.73%)</title><rect x="18.2423%" y="341" width="1.7310%" height="15" fill="rgb(229,81,49)" fg:x="137412233" fg:w="13039117"/><text x="18.4923%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (13,039,117 samples, 1.73%)</title><rect x="18.2423%" y="325" width="1.7310%" height="15" fill="rgb(236,28,36)" fg:x="137412233" fg:w="13039117"/><text x="18.4923%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (9,027,081 samples, 1.20%)</title><rect x="18.7750%" y="309" width="1.1984%" height="15" fill="rgb(249,185,26)" fg:x="141424269" fg:w="9027081"/><text x="19.0250%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3,009,027 samples, 0.40%)</title><rect x="19.5739%" y="293" width="0.3995%" height="15" fill="rgb(249,174,33)" fg:x="147442323" fg:w="3009027"/><text x="19.8239%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::full_buckets_indices (1,003,009 samples, 0.13%)</title><rect x="19.9734%" y="341" width="0.1332%" height="15" fill="rgb(233,201,37)" fg:x="150451350" fg:w="1003009"/><text x="20.2234%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (1,003,009 samples, 0.13%)</title><rect x="19.9734%" y="325" width="0.1332%" height="15" fill="rgb(221,78,26)" fg:x="150451350" fg:w="1003009"/><text x="20.2234%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (1,003,009 samples, 0.13%)</title><rect x="19.9734%" y="309" width="0.1332%" height="15" fill="rgb(250,127,30)" fg:x="150451350" fg:w="1003009"/><text x="20.2234%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket (1,003,009 samples, 0.13%)</title><rect x="20.1065%" y="325" width="0.1332%" height="15" fill="rgb(230,49,44)" fg:x="151454359" fg:w="1003009"/><text x="20.3565%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::data_end (1,003,009 samples, 0.13%)</title><rect x="20.1065%" y="309" width="0.1332%" height="15" fill="rgb(229,67,23)" fg:x="151454359" fg:w="1003009"/><text x="20.3565%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (3,009,027 samples, 0.40%)</title><rect x="20.2397%" y="325" width="0.3995%" height="15" fill="rgb(249,83,47)" fg:x="152457368" fg:w="3009027"/><text x="20.4897%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3,009,027 samples, 0.40%)</title><rect x="20.2397%" y="309" width="0.3995%" height="15" fill="rgb(215,43,3)" fg:x="152457368" fg:w="3009027"/><text x="20.4897%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3,009,027 samples, 0.40%)</title><rect x="20.2397%" y="293" width="0.3995%" height="15" fill="rgb(238,154,13)" fg:x="152457368" fg:w="3009027"/><text x="20.4897%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3,009,027 samples, 0.40%)</title><rect x="20.2397%" y="277" width="0.3995%" height="15" fill="rgb(219,56,2)" fg:x="152457368" fg:w="3009027"/><text x="20.4897%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,003,009 samples, 0.13%)</title><rect x="20.6391%" y="133" width="0.1332%" height="15" fill="rgb(233,0,4)" fg:x="155466395" fg:w="1003009"/><text x="20.8891%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3,009,027 samples, 0.40%)</title><rect x="20.6391%" y="149" width="0.3995%" height="15" fill="rgb(235,30,7)" fg:x="155466395" fg:w="3009027"/><text x="20.8891%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,006,018 samples, 0.27%)</title><rect x="20.7723%" y="133" width="0.2663%" height="15" fill="rgb(250,79,13)" fg:x="156469404" fg:w="2006018"/><text x="21.0223%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (10,030,090 samples, 1.33%)</title><rect x="20.6391%" y="229" width="1.3316%" height="15" fill="rgb(211,146,34)" fg:x="155466395" fg:w="10030090"/><text x="20.8891%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u64 (10,030,090 samples, 1.33%)</title><rect x="20.6391%" y="213" width="1.3316%" height="15" fill="rgb(228,22,38)" fg:x="155466395" fg:w="10030090"/><text x="20.8891%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (10,030,090 samples, 1.33%)</title><rect x="20.6391%" y="197" width="1.3316%" height="15" fill="rgb(235,168,5)" fg:x="155466395" fg:w="10030090"/><text x="20.8891%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (10,030,090 samples, 1.33%)</title><rect x="20.6391%" y="181" width="1.3316%" height="15" fill="rgb(221,155,16)" fg:x="155466395" fg:w="10030090"/><text x="20.8891%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10,030,090 samples, 1.33%)</title><rect x="20.6391%" y="165" width="1.3316%" height="15" fill="rgb(215,215,53)" fg:x="155466395" fg:w="10030090"/><text x="20.8891%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.13%)</title><rect x="21.9707%" y="133" width="0.1332%" height="15" fill="rgb(223,4,10)" fg:x="165496485" fg:w="1003009"/><text x="22.2207%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (1,003,009 samples, 0.13%)</title><rect x="22.1039%" y="133" width="0.1332%" height="15" fill="rgb(234,103,6)" fg:x="166499494" fg:w="1003009"/><text x="22.3539%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4,012,036 samples, 0.53%)</title><rect x="22.2370%" y="117" width="0.5326%" height="15" fill="rgb(227,97,0)" fg:x="167502503" fg:w="4012036"/><text x="22.4870%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (14,042,126 samples, 1.86%)</title><rect x="22.7696%" y="117" width="1.8642%" height="15" fill="rgb(234,150,53)" fg:x="171514539" fg:w="14042126"/><text x="23.0196%" y="127.50">c..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (20,060,180 samples, 2.66%)</title><rect x="22.2370%" y="133" width="2.6631%" height="15" fill="rgb(228,201,54)" fg:x="167502503" fg:w="20060180"/><text x="22.4870%" y="143.50">&lt;c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (30,090,270 samples, 3.99%)</title><rect x="21.9707%" y="197" width="3.9947%" height="15" fill="rgb(222,22,37)" fg:x="165496485" fg:w="30090270"/><text x="22.2207%" y="207.50">core..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (30,090,270 samples, 3.99%)</title><rect x="21.9707%" y="181" width="3.9947%" height="15" fill="rgb(237,53,32)" fg:x="165496485" fg:w="30090270"/><text x="22.2207%" y="191.50">&lt;std..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (30,090,270 samples, 3.99%)</title><rect x="21.9707%" y="165" width="3.9947%" height="15" fill="rgb(233,25,53)" fg:x="165496485" fg:w="30090270"/><text x="22.2207%" y="175.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (30,090,270 samples, 3.99%)</title><rect x="21.9707%" y="149" width="3.9947%" height="15" fill="rgb(210,40,34)" fg:x="165496485" fg:w="30090270"/><text x="22.2207%" y="159.50">&lt;cor..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (2,006,018 samples, 0.27%)</title><rect x="25.9654%" y="165" width="0.2663%" height="15" fill="rgb(241,220,44)" fg:x="195586755" fg:w="2006018"/><text x="26.2154%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.13%)</title><rect x="26.2317%" y="101" width="0.1332%" height="15" fill="rgb(235,28,35)" fg:x="197592773" fg:w="1003009"/><text x="26.4817%" y="111.50"></text></g><g><title>core::hash::sip::u8to64_le (4,012,036 samples, 0.53%)</title><rect x="26.2317%" y="117" width="0.5326%" height="15" fill="rgb(210,56,17)" fg:x="197592773" fg:w="4012036"/><text x="26.4817%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2,006,018 samples, 0.27%)</title><rect x="26.7643%" y="117" width="0.2663%" height="15" fill="rgb(224,130,29)" fg:x="201604809" fg:w="2006018"/><text x="27.0143%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (13,039,117 samples, 1.73%)</title><rect x="26.2317%" y="149" width="1.7310%" height="15" fill="rgb(235,212,8)" fg:x="197592773" fg:w="13039117"/><text x="26.4817%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13,039,117 samples, 1.73%)</title><rect x="26.2317%" y="133" width="1.7310%" height="15" fill="rgb(223,33,50)" fg:x="197592773" fg:w="13039117"/><text x="26.4817%" y="143.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (14,042,126 samples, 1.86%)</title><rect x="26.2317%" y="165" width="1.8642%" height="15" fill="rgb(219,149,13)" fg:x="197592773" fg:w="14042126"/><text x="26.4817%" y="175.50">&lt;..</text></g><g><title>core::hash::Hasher::write_length_prefix (19,057,171 samples, 2.53%)</title><rect x="25.9654%" y="197" width="2.5300%" height="15" fill="rgb(250,156,29)" fg:x="195586755" fg:w="19057171"/><text x="26.2154%" y="207.50">co..</text></g><g><title>core::hash::Hasher::write_usize (19,057,171 samples, 2.53%)</title><rect x="25.9654%" y="181" width="2.5300%" height="15" fill="rgb(216,193,19)" fg:x="195586755" fg:w="19057171"/><text x="26.2154%" y="191.50">co..</text></g><g><title>core::hash::sip::u8to64_le (1,003,009 samples, 0.13%)</title><rect x="28.4953%" y="101" width="0.1332%" height="15" fill="rgb(216,135,14)" fg:x="214643926" fg:w="1003009"/><text x="28.7453%" y="111.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for bool&gt;::hash (4,012,036 samples, 0.53%)</title><rect x="28.4953%" y="181" width="0.5326%" height="15" fill="rgb(241,47,5)" fg:x="214643926" fg:w="4012036"/><text x="28.7453%" y="191.50"></text></g><g><title>core::hash::Hasher::write_u8 (4,012,036 samples, 0.53%)</title><rect x="28.4953%" y="165" width="0.5326%" height="15" fill="rgb(233,42,35)" fg:x="214643926" fg:w="4012036"/><text x="28.7453%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4,012,036 samples, 0.53%)</title><rect x="28.4953%" y="149" width="0.5326%" height="15" fill="rgb(231,13,6)" fg:x="214643926" fg:w="4012036"/><text x="28.7453%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4,012,036 samples, 0.53%)</title><rect x="28.4953%" y="133" width="0.5326%" height="15" fill="rgb(207,181,40)" fg:x="214643926" fg:w="4012036"/><text x="28.7453%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,012,036 samples, 0.53%)</title><rect x="28.4953%" y="117" width="0.5326%" height="15" fill="rgb(254,173,49)" fg:x="214643926" fg:w="4012036"/><text x="28.7453%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.13%)</title><rect x="29.0280%" y="181" width="0.1332%" height="15" fill="rgb(221,1,38)" fg:x="218655962" fg:w="1003009"/><text x="29.2780%" y="191.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,003,009 samples, 0.13%)</title><rect x="29.0280%" y="165" width="0.1332%" height="15" fill="rgb(206,124,46)" fg:x="218655962" fg:w="1003009"/><text x="29.2780%" y="175.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (64,192,576 samples, 8.52%)</title><rect x="21.9707%" y="229" width="8.5220%" height="15" fill="rgb(249,21,11)" fg:x="165496485" fg:w="64192576"/><text x="22.2207%" y="239.50">core::array:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (64,192,576 samples, 8.52%)</title><rect x="21.9707%" y="213" width="8.5220%" height="15" fill="rgb(222,201,40)" fg:x="165496485" fg:w="64192576"/><text x="22.2207%" y="223.50">core::hash::..</text></g><g><title>core::hash::Hash::hash_slice (15,045,135 samples, 2.00%)</title><rect x="28.4953%" y="197" width="1.9973%" height="15" fill="rgb(235,61,29)" fg:x="214643926" fg:w="15045135"/><text x="28.7453%" y="207.50">c..</text></g><g><title>core::hash::sip::u8to64_le (1,003,009 samples, 0.13%)</title><rect x="30.4927%" y="117" width="0.1332%" height="15" fill="rgb(219,207,3)" fg:x="229689061" fg:w="1003009"/><text x="30.7427%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.13%)</title><rect x="30.4927%" y="101" width="0.1332%" height="15" fill="rgb(222,56,46)" fg:x="229689061" fg:w="1003009"/><text x="30.7427%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,003,009 samples, 0.13%)</title><rect x="30.6258%" y="101" width="0.1332%" height="15" fill="rgb(239,76,54)" fg:x="230692070" fg:w="1003009"/><text x="30.8758%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4,012,036 samples, 0.53%)</title><rect x="30.6258%" y="117" width="0.5326%" height="15" fill="rgb(231,124,27)" fg:x="230692070" fg:w="4012036"/><text x="30.8758%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,009,027 samples, 0.40%)</title><rect x="30.7590%" y="101" width="0.3995%" height="15" fill="rgb(249,195,6)" fg:x="231695079" fg:w="3009027"/><text x="31.0090%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8,024,072 samples, 1.07%)</title><rect x="30.4927%" y="149" width="1.0652%" height="15" fill="rgb(237,174,47)" fg:x="229689061" fg:w="8024072"/><text x="30.7427%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8,024,072 samples, 1.07%)</title><rect x="30.4927%" y="133" width="1.0652%" height="15" fill="rgb(206,201,31)" fg:x="229689061" fg:w="8024072"/><text x="30.7427%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (9,027,081 samples, 1.20%)</title><rect x="30.4927%" y="213" width="1.1984%" height="15" fill="rgb(231,57,52)" fg:x="229689061" fg:w="9027081"/><text x="30.7427%" y="223.50"></text></g><g><title>core::hash::Hasher::write_isize (9,027,081 samples, 1.20%)</title><rect x="30.4927%" y="197" width="1.1984%" height="15" fill="rgb(248,177,22)" fg:x="229689061" fg:w="9027081"/><text x="30.7427%" y="207.50"></text></g><g><title>core::hash::Hasher::write_usize (9,027,081 samples, 1.20%)</title><rect x="30.4927%" y="181" width="1.1984%" height="15" fill="rgb(215,211,37)" fg:x="229689061" fg:w="9027081"/><text x="30.7427%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (9,027,081 samples, 1.20%)</title><rect x="30.4927%" y="165" width="1.1984%" height="15" fill="rgb(241,128,51)" fg:x="229689061" fg:w="9027081"/><text x="30.7427%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_ne_bytes (1,003,009 samples, 0.13%)</title><rect x="31.6911%" y="149" width="0.1332%" height="15" fill="rgb(227,165,31)" fg:x="238716142" fg:w="1003009"/><text x="31.9411%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,003,009 samples, 0.13%)</title><rect x="31.8242%" y="101" width="0.1332%" height="15" fill="rgb(228,167,24)" fg:x="239719151" fg:w="1003009"/><text x="32.0742%" y="111.50"></text></g><g><title>&lt;chlang::board::Position as core::hash::Hash&gt;::hash (3,009,027 samples, 0.40%)</title><rect x="31.6911%" y="213" width="0.3995%" height="15" fill="rgb(228,143,12)" fg:x="238716142" fg:w="3009027"/><text x="31.9411%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (3,009,027 samples, 0.40%)</title><rect x="31.6911%" y="197" width="0.3995%" height="15" fill="rgb(249,149,8)" fg:x="238716142" fg:w="3009027"/><text x="31.9411%" y="207.50"></text></g><g><title>core::hash::Hasher::write_i64 (3,009,027 samples, 0.40%)</title><rect x="31.6911%" y="181" width="0.3995%" height="15" fill="rgb(243,35,44)" fg:x="238716142" fg:w="3009027"/><text x="31.9411%" y="191.50"></text></g><g><title>core::hash::Hasher::write_u64 (3,009,027 samples, 0.40%)</title><rect x="31.6911%" y="165" width="0.3995%" height="15" fill="rgb(246,89,9)" fg:x="238716142" fg:w="3009027"/><text x="31.9411%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2,006,018 samples, 0.27%)</title><rect x="31.8242%" y="149" width="0.2663%" height="15" fill="rgb(233,213,13)" fg:x="239719151" fg:w="2006018"/><text x="32.0742%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2,006,018 samples, 0.27%)</title><rect x="31.8242%" y="133" width="0.2663%" height="15" fill="rgb(233,141,41)" fg:x="239719151" fg:w="2006018"/><text x="32.0742%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,006,018 samples, 0.27%)</title><rect x="31.8242%" y="117" width="0.2663%" height="15" fill="rgb(239,167,4)" fg:x="239719151" fg:w="2006018"/><text x="32.0742%" y="127.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (13,039,117 samples, 1.73%)</title><rect x="30.4927%" y="229" width="1.7310%" height="15" fill="rgb(209,217,16)" fg:x="229689061" fg:w="13039117"/><text x="30.7427%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (1,003,009 samples, 0.13%)</title><rect x="32.2237%" y="117" width="0.1332%" height="15" fill="rgb(219,88,35)" fg:x="242728178" fg:w="1003009"/><text x="32.4737%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,003,009 samples, 0.13%)</title><rect x="32.3569%" y="117" width="0.1332%" height="15" fill="rgb(220,193,23)" fg:x="243731187" fg:w="1003009"/><text x="32.6069%" y="127.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (90,270,810 samples, 11.98%)</title><rect x="20.6391%" y="277" width="11.9840%" height="15" fill="rgb(230,90,52)" fg:x="155466395" fg:w="90270810"/><text x="20.8891%" y="287.50">core::hash::impls:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (90,270,810 samples, 11.98%)</title><rect x="20.6391%" y="261" width="11.9840%" height="15" fill="rgb(252,106,19)" fg:x="155466395" fg:w="90270810"/><text x="20.8891%" y="271.50">core::hash::impls:..</text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (90,270,810 samples, 11.98%)</title><rect x="20.6391%" y="245" width="11.9840%" height="15" fill="rgb(206,74,20)" fg:x="155466395" fg:w="90270810"/><text x="20.8891%" y="255.50">&lt;chlang::board::Ke..</text></g><g><title>&lt;chlang::board::Player as core::hash::Hash&gt;::hash (3,009,027 samples, 0.40%)</title><rect x="32.2237%" y="229" width="0.3995%" height="15" fill="rgb(230,138,44)" fg:x="242728178" fg:w="3009027"/><text x="32.4737%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (3,009,027 samples, 0.40%)</title><rect x="32.2237%" y="213" width="0.3995%" height="15" fill="rgb(235,182,43)" fg:x="242728178" fg:w="3009027"/><text x="32.4737%" y="223.50"></text></g><g><title>core::hash::Hasher::write_isize (3,009,027 samples, 0.40%)</title><rect x="32.2237%" y="197" width="0.3995%" height="15" fill="rgb(242,16,51)" fg:x="242728178" fg:w="3009027"/><text x="32.4737%" y="207.50"></text></g><g><title>core::hash::Hasher::write_usize (3,009,027 samples, 0.40%)</title><rect x="32.2237%" y="181" width="0.3995%" height="15" fill="rgb(248,9,4)" fg:x="242728178" fg:w="3009027"/><text x="32.4737%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3,009,027 samples, 0.40%)</title><rect x="32.2237%" y="165" width="0.3995%" height="15" fill="rgb(210,31,22)" fg:x="242728178" fg:w="3009027"/><text x="32.4737%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3,009,027 samples, 0.40%)</title><rect x="32.2237%" y="149" width="0.3995%" height="15" fill="rgb(239,54,39)" fg:x="242728178" fg:w="3009027"/><text x="32.4737%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,009,027 samples, 0.40%)</title><rect x="32.2237%" y="133" width="0.3995%" height="15" fill="rgb(230,99,41)" fg:x="242728178" fg:w="3009027"/><text x="32.4737%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7,021,063 samples, 0.93%)</title><rect x="32.6232%" y="229" width="0.9321%" height="15" fill="rgb(253,106,12)" fg:x="245737205" fg:w="7021063"/><text x="32.8732%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7,021,063 samples, 0.93%)</title><rect x="32.6232%" y="213" width="0.9321%" height="15" fill="rgb(213,46,41)" fg:x="245737205" fg:w="7021063"/><text x="32.8732%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,003,009 samples, 0.13%)</title><rect x="33.5553%" y="213" width="0.1332%" height="15" fill="rgb(215,133,35)" fg:x="252758268" fg:w="1003009"/><text x="33.8053%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2,006,018 samples, 0.27%)</title><rect x="33.5553%" y="229" width="0.2663%" height="15" fill="rgb(213,28,5)" fg:x="252758268" fg:w="2006018"/><text x="33.8053%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.13%)</title><rect x="33.6884%" y="213" width="0.1332%" height="15" fill="rgb(215,77,49)" fg:x="253761277" fg:w="1003009"/><text x="33.9384%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (107,321,963 samples, 14.25%)</title><rect x="20.1065%" y="341" width="14.2477%" height="15" fill="rgb(248,100,22)" fg:x="151454359" fg:w="107321963"/><text x="20.3565%" y="351.50">hashbrown::raw::RawTab..</text></g><g><title>hashbrown::map::make_hasher::{{closure}} (103,309,927 samples, 13.72%)</title><rect x="20.6391%" y="325" width="13.7150%" height="15" fill="rgb(208,67,9)" fg:x="155466395" fg:w="103309927"/><text x="20.8891%" y="335.50">hashbrown::map::make_..</text></g><g><title>hashbrown::map::make_hash (103,309,927 samples, 13.72%)</title><rect x="20.6391%" y="309" width="13.7150%" height="15" fill="rgb(219,133,21)" fg:x="155466395" fg:w="103309927"/><text x="20.8891%" y="319.50">hashbrown::map::make_..</text></g><g><title>core::hash::BuildHasher::hash_one (103,309,927 samples, 13.72%)</title><rect x="20.6391%" y="293" width="13.7150%" height="15" fill="rgb(246,46,29)" fg:x="155466395" fg:w="103309927"/><text x="20.8891%" y="303.50">core::hash::BuildHash..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (13,039,117 samples, 1.73%)</title><rect x="32.6232%" y="277" width="1.7310%" height="15" fill="rgb(246,185,52)" fg:x="245737205" fg:w="13039117"/><text x="32.8732%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (13,039,117 samples, 1.73%)</title><rect x="32.6232%" y="261" width="1.7310%" height="15" fill="rgb(252,136,11)" fg:x="245737205" fg:w="13039117"/><text x="32.8732%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (13,039,117 samples, 1.73%)</title><rect x="32.6232%" y="245" width="1.7310%" height="15" fill="rgb(219,138,53)" fg:x="245737205" fg:w="13039117"/><text x="32.8732%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (2,006,018 samples, 0.27%)</title><rect x="34.3542%" y="341" width="0.2663%" height="15" fill="rgb(211,51,23)" fg:x="258776322" fg:w="2006018"/><text x="34.6042%" y="351.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (2,006,018 samples, 0.27%)</title><rect x="34.3542%" y="325" width="0.2663%" height="15" fill="rgb(247,221,28)" fg:x="258776322" fg:w="2006018"/><text x="34.6042%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::{{closure}} (2,006,018 samples, 0.27%)</title><rect x="34.3542%" y="309" width="0.2663%" height="15" fill="rgb(251,222,45)" fg:x="258776322" fg:w="2006018"/><text x="34.6042%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (2,006,018 samples, 0.27%)</title><rect x="34.3542%" y="293" width="0.2663%" height="15" fill="rgb(217,162,53)" fg:x="258776322" fg:w="2006018"/><text x="34.6042%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,006,018 samples, 0.27%)</title><rect x="34.3542%" y="277" width="0.2663%" height="15" fill="rgb(229,93,14)" fg:x="258776322" fg:w="2006018"/><text x="34.6042%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (2,006,018 samples, 0.27%)</title><rect x="34.3542%" y="261" width="0.2663%" height="15" fill="rgb(209,67,49)" fg:x="258776322" fg:w="2006018"/><text x="34.6042%" y="271.50"></text></g><g><title>__GI___libc_free (2,006,018 samples, 0.27%)</title><rect x="34.3542%" y="245" width="0.2663%" height="15" fill="rgb(213,87,29)" fg:x="258776322" fg:w="2006018"/><text x="34.6042%" y="255.50"></text></g><g><title>_int_free (2,006,018 samples, 0.27%)</title><rect x="34.3542%" y="229" width="0.2663%" height="15" fill="rgb(205,151,52)" fg:x="258776322" fg:w="2006018"/><text x="34.6042%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.13%)</title><rect x="34.6205%" y="341" width="0.1332%" height="15" fill="rgb(253,215,39)" fg:x="260782340" fg:w="1003009"/><text x="34.8705%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (131,394,179 samples, 17.44%)</title><rect x="17.4434%" y="373" width="17.4434%" height="15" fill="rgb(221,220,41)" fg:x="131394179" fg:w="131394179"/><text x="17.6934%" y="383.50">hashbrown::raw::RawTableInn..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (131,394,179 samples, 17.44%)</title><rect x="17.4434%" y="357" width="17.4434%" height="15" fill="rgb(218,133,21)" fg:x="131394179" fg:w="131394179"/><text x="17.6934%" y="367.50">hashbrown::raw::RawTableInn..</text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.13%)</title><rect x="34.7537%" y="341" width="0.1332%" height="15" fill="rgb(221,193,43)" fg:x="261785349" fg:w="1003009"/><text x="35.0037%" y="351.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (1,003,009 samples, 0.13%)</title><rect x="34.7537%" y="325" width="0.1332%" height="15" fill="rgb(240,128,52)" fg:x="261785349" fg:w="1003009"/><text x="35.0037%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (132,397,188 samples, 17.58%)</title><rect x="17.4434%" y="421" width="17.5766%" height="15" fill="rgb(253,114,12)" fg:x="131394179" fg:w="132397188"/><text x="17.6934%" y="431.50">hashbrown::map::HashMap&lt;K,V..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (132,397,188 samples, 17.58%)</title><rect x="17.4434%" y="405" width="17.5766%" height="15" fill="rgb(215,223,47)" fg:x="131394179" fg:w="132397188"/><text x="17.6934%" y="415.50">hashbrown::raw::RawTable&lt;T,..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (132,397,188 samples, 17.58%)</title><rect x="17.4434%" y="389" width="17.5766%" height="15" fill="rgb(248,225,23)" fg:x="131394179" fg:w="132397188"/><text x="17.6934%" y="399.50">hashbrown::raw::RawTable&lt;T,..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (257,773,313 samples, 34.22%)</title><rect x="0.9321%" y="453" width="34.2210%" height="15" fill="rgb(250,108,0)" fg:x="7021063" fg:w="257773313"/><text x="1.1821%" y="463.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (257,773,313 samples, 34.22%)</title><rect x="0.9321%" y="437" width="34.2210%" height="15" fill="rgb(228,208,7)" fg:x="7021063" fg:w="257773313"/><text x="1.1821%" y="447.50">hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1,003,009 samples, 0.13%)</title><rect x="35.1531%" y="357" width="0.1332%" height="15" fill="rgb(244,45,10)" fg:x="264794376" fg:w="1003009"/><text x="35.4031%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1,003,009 samples, 0.13%)</title><rect x="35.1531%" y="341" width="0.1332%" height="15" fill="rgb(207,125,25)" fg:x="264794376" fg:w="1003009"/><text x="35.4031%" y="351.50"></text></g><g><title>hashbrown::raw::is_full (1,003,009 samples, 0.13%)</title><rect x="35.1531%" y="325" width="0.1332%" height="15" fill="rgb(210,195,18)" fg:x="264794376" fg:w="1003009"/><text x="35.4031%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (2,006,018 samples, 0.27%)</title><rect x="35.2863%" y="341" width="0.2663%" height="15" fill="rgb(249,80,12)" fg:x="265797385" fg:w="2006018"/><text x="35.5363%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2,006,018 samples, 0.27%)</title><rect x="35.2863%" y="325" width="0.2663%" height="15" fill="rgb(221,65,9)" fg:x="265797385" fg:w="2006018"/><text x="35.5363%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (4,012,036 samples, 0.53%)</title><rect x="35.2863%" y="357" width="0.5326%" height="15" fill="rgb(235,49,36)" fg:x="265797385" fg:w="4012036"/><text x="35.5363%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2,006,018 samples, 0.27%)</title><rect x="35.5526%" y="341" width="0.2663%" height="15" fill="rgb(225,32,20)" fg:x="267803403" fg:w="2006018"/><text x="35.8026%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (6,018,054 samples, 0.80%)</title><rect x="35.1531%" y="389" width="0.7989%" height="15" fill="rgb(215,141,46)" fg:x="264794376" fg:w="6018054"/><text x="35.4031%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (6,018,054 samples, 0.80%)</title><rect x="35.1531%" y="373" width="0.7989%" height="15" fill="rgb(250,160,47)" fg:x="264794376" fg:w="6018054"/><text x="35.4031%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1,003,009 samples, 0.13%)</title><rect x="35.8189%" y="357" width="0.1332%" height="15" fill="rgb(216,222,40)" fg:x="269809421" fg:w="1003009"/><text x="36.0689%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket (1,003,009 samples, 0.13%)</title><rect x="35.9521%" y="389" width="0.1332%" height="15" fill="rgb(234,217,39)" fg:x="270812430" fg:w="1003009"/><text x="36.2021%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1,003,009 samples, 0.13%)</title><rect x="35.9521%" y="373" width="0.1332%" height="15" fill="rgb(207,178,40)" fg:x="270812430" fg:w="1003009"/><text x="36.2021%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1,003,009 samples, 0.13%)</title><rect x="35.9521%" y="357" width="0.1332%" height="15" fill="rgb(221,136,13)" fg:x="270812430" fg:w="1003009"/><text x="36.2021%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1,003,009 samples, 0.13%)</title><rect x="35.9521%" y="341" width="0.1332%" height="15" fill="rgb(249,199,10)" fg:x="270812430" fg:w="1003009"/><text x="36.2021%" y="351.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (8,024,072 samples, 1.07%)</title><rect x="35.1531%" y="453" width="1.0652%" height="15" fill="rgb(249,222,13)" fg:x="264794376" fg:w="8024072"/><text x="35.4031%" y="463.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (8,024,072 samples, 1.07%)</title><rect x="35.1531%" y="437" width="1.0652%" height="15" fill="rgb(244,185,38)" fg:x="264794376" fg:w="8024072"/><text x="35.4031%" y="447.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (8,024,072 samples, 1.07%)</title><rect x="35.1531%" y="421" width="1.0652%" height="15" fill="rgb(236,202,9)" fg:x="264794376" fg:w="8024072"/><text x="35.4031%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (8,024,072 samples, 1.07%)</title><rect x="35.1531%" y="405" width="1.0652%" height="15" fill="rgb(250,229,37)" fg:x="264794376" fg:w="8024072"/><text x="35.4031%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;&amp;chlang::board::KeyStruct,i32&gt;&gt; (1,003,009 samples, 0.13%)</title><rect x="36.2184%" y="453" width="0.1332%" height="15" fill="rgb(206,174,23)" fg:x="272818448" fg:w="1003009"/><text x="36.4684%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;&amp;chlang::board::KeyStruct,i32,std::hash::random::RandomState&gt;&gt; (1,003,009 samples, 0.13%)</title><rect x="36.2184%" y="437" width="0.1332%" height="15" fill="rgb(211,33,43)" fg:x="272818448" fg:w="1003009"/><text x="36.4684%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(&amp;chlang::board::KeyStruct,i32)&gt;&gt; (1,003,009 samples, 0.13%)</title><rect x="36.2184%" y="421" width="0.1332%" height="15" fill="rgb(245,58,50)" fg:x="272818448" fg:w="1003009"/><text x="36.4684%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.13%)</title><rect x="36.2184%" y="405" width="0.1332%" height="15" fill="rgb(244,68,36)" fg:x="272818448" fg:w="1003009"/><text x="36.4684%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1,003,009 samples, 0.13%)</title><rect x="36.2184%" y="389" width="0.1332%" height="15" fill="rgb(232,229,15)" fg:x="272818448" fg:w="1003009"/><text x="36.4684%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (1,003,009 samples, 0.13%)</title><rect x="36.2184%" y="373" width="0.1332%" height="15" fill="rgb(254,30,23)" fg:x="272818448" fg:w="1003009"/><text x="36.4684%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.13%)</title><rect x="36.2184%" y="357" width="0.1332%" height="15" fill="rgb(235,160,14)" fg:x="272818448" fg:w="1003009"/><text x="36.4684%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.13%)</title><rect x="36.2184%" y="341" width="0.1332%" height="15" fill="rgb(212,155,44)" fg:x="272818448" fg:w="1003009"/><text x="36.4684%" y="351.50"></text></g><g><title>__GI___libc_free (1,003,009 samples, 0.13%)</title><rect x="36.2184%" y="325" width="0.1332%" height="15" fill="rgb(226,2,50)" fg:x="272818448" fg:w="1003009"/><text x="36.4684%" y="335.50"></text></g><g><title>_int_free (1,003,009 samples, 0.13%)</title><rect x="36.2184%" y="309" width="0.1332%" height="15" fill="rgb(234,177,6)" fg:x="272818448" fg:w="1003009"/><text x="36.4684%" y="319.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (1,003,009 samples, 0.13%)</title><rect x="36.3515%" y="277" width="0.1332%" height="15" fill="rgb(217,24,9)" fg:x="273821457" fg:w="1003009"/><text x="36.6015%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2,006,018 samples, 0.27%)</title><rect x="36.3515%" y="389" width="0.2663%" height="15" fill="rgb(220,13,46)" fg:x="273821457" fg:w="2006018"/><text x="36.6015%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2,006,018 samples, 0.27%)</title><rect x="36.3515%" y="373" width="0.2663%" height="15" fill="rgb(239,221,27)" fg:x="273821457" fg:w="2006018"/><text x="36.6015%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,006,018 samples, 0.27%)</title><rect x="36.3515%" y="357" width="0.2663%" height="15" fill="rgb(222,198,25)" fg:x="273821457" fg:w="2006018"/><text x="36.6015%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (2,006,018 samples, 0.27%)</title><rect x="36.3515%" y="341" width="0.2663%" height="15" fill="rgb(211,99,13)" fg:x="273821457" fg:w="2006018"/><text x="36.6015%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (2,006,018 samples, 0.27%)</title><rect x="36.3515%" y="325" width="0.2663%" height="15" fill="rgb(232,111,31)" fg:x="273821457" fg:w="2006018"/><text x="36.6015%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (2,006,018 samples, 0.27%)</title><rect x="36.3515%" y="309" width="0.2663%" height="15" fill="rgb(245,82,37)" fg:x="273821457" fg:w="2006018"/><text x="36.6015%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (2,006,018 samples, 0.27%)</title><rect x="36.3515%" y="293" width="0.2663%" height="15" fill="rgb(227,149,46)" fg:x="273821457" fg:w="2006018"/><text x="36.6015%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1,003,009 samples, 0.13%)</title><rect x="36.4847%" y="277" width="0.1332%" height="15" fill="rgb(218,36,50)" fg:x="274824466" fg:w="1003009"/><text x="36.7347%" y="287.50"></text></g><g><title>core::intrinsics::write_bytes (1,003,009 samples, 0.13%)</title><rect x="36.4847%" y="261" width="0.1332%" height="15" fill="rgb(226,80,48)" fg:x="274824466" fg:w="1003009"/><text x="36.7347%" y="271.50"></text></g><g><title>__memset_avx2_unaligned (1,003,009 samples, 0.13%)</title><rect x="36.4847%" y="245" width="0.1332%" height="15" fill="rgb(238,224,15)" fg:x="274824466" fg:w="1003009"/><text x="36.7347%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1,003,009 samples, 0.13%)</title><rect x="36.6178%" y="245" width="0.1332%" height="15" fill="rgb(241,136,10)" fg:x="275827475" fg:w="1003009"/><text x="36.8678%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1,003,009 samples, 0.13%)</title><rect x="36.6178%" y="229" width="0.1332%" height="15" fill="rgb(208,32,45)" fg:x="275827475" fg:w="1003009"/><text x="36.8678%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1,003,009 samples, 0.13%)</title><rect x="36.6178%" y="213" width="0.1332%" height="15" fill="rgb(207,135,9)" fg:x="275827475" fg:w="1003009"/><text x="36.8678%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1,003,009 samples, 0.13%)</title><rect x="36.6178%" y="197" width="0.1332%" height="15" fill="rgb(206,86,44)" fg:x="275827475" fg:w="1003009"/><text x="36.8678%" y="207.50"></text></g><g><title>hashbrown::raw::is_full (1,003,009 samples, 0.13%)</title><rect x="36.6178%" y="181" width="0.1332%" height="15" fill="rgb(245,177,15)" fg:x="275827475" fg:w="1003009"/><text x="36.8678%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2,006,018 samples, 0.27%)</title><rect x="36.7510%" y="53" width="0.2663%" height="15" fill="rgb(206,64,50)" fg:x="276830484" fg:w="2006018"/><text x="37.0010%" y="63.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (4,012,036 samples, 0.53%)</title><rect x="36.7510%" y="133" width="0.5326%" height="15" fill="rgb(234,36,40)" fg:x="276830484" fg:w="4012036"/><text x="37.0010%" y="143.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4,012,036 samples, 0.53%)</title><rect x="36.7510%" y="117" width="0.5326%" height="15" fill="rgb(213,64,8)" fg:x="276830484" fg:w="4012036"/><text x="37.0010%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4,012,036 samples, 0.53%)</title><rect x="36.7510%" y="101" width="0.5326%" height="15" fill="rgb(210,75,36)" fg:x="276830484" fg:w="4012036"/><text x="37.0010%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,012,036 samples, 0.53%)</title><rect x="36.7510%" y="85" width="0.5326%" height="15" fill="rgb(229,88,21)" fg:x="276830484" fg:w="4012036"/><text x="37.0010%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4,012,036 samples, 0.53%)</title><rect x="36.7510%" y="69" width="0.5326%" height="15" fill="rgb(252,204,47)" fg:x="276830484" fg:w="4012036"/><text x="37.0010%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,006,018 samples, 0.27%)</title><rect x="37.0173%" y="53" width="0.2663%" height="15" fill="rgb(208,77,27)" fg:x="278836502" fg:w="2006018"/><text x="37.2673%" y="63.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1,003,009 samples, 0.13%)</title><rect x="37.2836%" y="133" width="0.1332%" height="15" fill="rgb(221,76,26)" fg:x="280842520" fg:w="1003009"/><text x="37.5336%" y="143.50"></text></g><g><title>core::hash::Hasher::write_usize (1,003,009 samples, 0.13%)</title><rect x="37.2836%" y="117" width="0.1332%" height="15" fill="rgb(225,139,18)" fg:x="280842520" fg:w="1003009"/><text x="37.5336%" y="127.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="37.2836%" y="101" width="0.1332%" height="15" fill="rgb(230,137,11)" fg:x="280842520" fg:w="1003009"/><text x="37.5336%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="37.2836%" y="85" width="0.1332%" height="15" fill="rgb(212,28,1)" fg:x="280842520" fg:w="1003009"/><text x="37.5336%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="37.2836%" y="69" width="0.1332%" height="15" fill="rgb(248,164,17)" fg:x="280842520" fg:w="1003009"/><text x="37.5336%" y="79.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for bool&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="37.4168%" y="117" width="0.1332%" height="15" fill="rgb(222,171,42)" fg:x="281845529" fg:w="1003009"/><text x="37.6668%" y="127.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,003,009 samples, 0.13%)</title><rect x="37.4168%" y="101" width="0.1332%" height="15" fill="rgb(243,84,45)" fg:x="281845529" fg:w="1003009"/><text x="37.6668%" y="111.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="37.4168%" y="85" width="0.1332%" height="15" fill="rgb(252,49,23)" fg:x="281845529" fg:w="1003009"/><text x="37.6668%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="37.4168%" y="69" width="0.1332%" height="15" fill="rgb(215,19,7)" fg:x="281845529" fg:w="1003009"/><text x="37.6668%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="37.4168%" y="53" width="0.1332%" height="15" fill="rgb(238,81,41)" fg:x="281845529" fg:w="1003009"/><text x="37.6668%" y="63.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (7,021,063 samples, 0.93%)</title><rect x="36.7510%" y="165" width="0.9321%" height="15" fill="rgb(210,199,37)" fg:x="276830484" fg:w="7021063"/><text x="37.0010%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (7,021,063 samples, 0.93%)</title><rect x="36.7510%" y="149" width="0.9321%" height="15" fill="rgb(244,192,49)" fg:x="276830484" fg:w="7021063"/><text x="37.0010%" y="159.50"></text></g><g><title>core::hash::Hash::hash_slice (2,006,018 samples, 0.27%)</title><rect x="37.4168%" y="133" width="0.2663%" height="15" fill="rgb(226,211,11)" fg:x="281845529" fg:w="2006018"/><text x="37.6668%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (1,003,009 samples, 0.13%)</title><rect x="37.6831%" y="53" width="0.1332%" height="15" fill="rgb(236,162,54)" fg:x="283851547" fg:w="1003009"/><text x="37.9331%" y="63.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,003,009 samples, 0.13%)</title><rect x="37.6831%" y="37" width="0.1332%" height="15" fill="rgb(220,229,9)" fg:x="283851547" fg:w="1003009"/><text x="37.9331%" y="47.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (2,006,018 samples, 0.27%)</title><rect x="37.6831%" y="165" width="0.2663%" height="15" fill="rgb(250,87,22)" fg:x="283851547" fg:w="2006018"/><text x="37.9331%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (2,006,018 samples, 0.27%)</title><rect x="37.6831%" y="149" width="0.2663%" height="15" fill="rgb(239,43,17)" fg:x="283851547" fg:w="2006018"/><text x="37.9331%" y="159.50"></text></g><g><title>core::hash::Hasher::write_isize (2,006,018 samples, 0.27%)</title><rect x="37.6831%" y="133" width="0.2663%" height="15" fill="rgb(231,177,25)" fg:x="283851547" fg:w="2006018"/><text x="37.9331%" y="143.50"></text></g><g><title>core::hash::Hasher::write_usize (2,006,018 samples, 0.27%)</title><rect x="37.6831%" y="117" width="0.2663%" height="15" fill="rgb(219,179,1)" fg:x="283851547" fg:w="2006018"/><text x="37.9331%" y="127.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2,006,018 samples, 0.27%)</title><rect x="37.6831%" y="101" width="0.2663%" height="15" fill="rgb(238,219,53)" fg:x="283851547" fg:w="2006018"/><text x="37.9331%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2,006,018 samples, 0.27%)</title><rect x="37.6831%" y="85" width="0.2663%" height="15" fill="rgb(232,167,36)" fg:x="283851547" fg:w="2006018"/><text x="37.9331%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,006,018 samples, 0.27%)</title><rect x="37.6831%" y="69" width="0.2663%" height="15" fill="rgb(244,19,51)" fg:x="283851547" fg:w="2006018"/><text x="37.9331%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,003,009 samples, 0.13%)</title><rect x="37.8162%" y="53" width="0.1332%" height="15" fill="rgb(224,6,22)" fg:x="284854556" fg:w="1003009"/><text x="38.0662%" y="63.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10,030,090 samples, 1.33%)</title><rect x="36.7510%" y="213" width="1.3316%" height="15" fill="rgb(224,145,5)" fg:x="276830484" fg:w="10030090"/><text x="37.0010%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10,030,090 samples, 1.33%)</title><rect x="36.7510%" y="197" width="1.3316%" height="15" fill="rgb(234,130,49)" fg:x="276830484" fg:w="10030090"/><text x="37.0010%" y="207.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (10,030,090 samples, 1.33%)</title><rect x="36.7510%" y="181" width="1.3316%" height="15" fill="rgb(254,6,2)" fg:x="276830484" fg:w="10030090"/><text x="37.0010%" y="191.50"></text></g><g><title>&lt;chlang::board::Player as core::hash::Hash&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="37.9494%" y="165" width="0.1332%" height="15" fill="rgb(208,96,46)" fg:x="285857565" fg:w="1003009"/><text x="38.1994%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="37.9494%" y="149" width="0.1332%" height="15" fill="rgb(239,3,39)" fg:x="285857565" fg:w="1003009"/><text x="38.1994%" y="159.50"></text></g><g><title>core::hash::Hasher::write_isize (1,003,009 samples, 0.13%)</title><rect x="37.9494%" y="133" width="0.1332%" height="15" fill="rgb(233,210,1)" fg:x="285857565" fg:w="1003009"/><text x="38.1994%" y="143.50"></text></g><g><title>core::hash::Hasher::write_usize (1,003,009 samples, 0.13%)</title><rect x="37.9494%" y="117" width="0.1332%" height="15" fill="rgb(244,137,37)" fg:x="285857565" fg:w="1003009"/><text x="38.1994%" y="127.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="37.9494%" y="101" width="0.1332%" height="15" fill="rgb(240,136,2)" fg:x="285857565" fg:w="1003009"/><text x="38.1994%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="37.9494%" y="85" width="0.1332%" height="15" fill="rgb(239,18,37)" fg:x="285857565" fg:w="1003009"/><text x="38.1994%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="37.9494%" y="69" width="0.1332%" height="15" fill="rgb(218,185,22)" fg:x="285857565" fg:w="1003009"/><text x="38.1994%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,003,009 samples, 0.13%)</title><rect x="37.9494%" y="53" width="0.1332%" height="15" fill="rgb(225,218,4)" fg:x="285857565" fg:w="1003009"/><text x="38.1994%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.13%)</title><rect x="37.9494%" y="37" width="0.1332%" height="15" fill="rgb(230,182,32)" fg:x="285857565" fg:w="1003009"/><text x="38.1994%" y="47.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,003,009 samples, 0.13%)</title><rect x="38.0826%" y="213" width="0.1332%" height="15" fill="rgb(242,56,43)" fg:x="286860574" fg:w="1003009"/><text x="38.3326%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,003,009 samples, 0.13%)</title><rect x="38.2157%" y="165" width="0.1332%" height="15" fill="rgb(233,99,24)" fg:x="287863583" fg:w="1003009"/><text x="38.4657%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.13%)</title><rect x="38.2157%" y="149" width="0.1332%" height="15" fill="rgb(234,209,42)" fg:x="287863583" fg:w="1003009"/><text x="38.4657%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (16,048,144 samples, 2.13%)</title><rect x="36.3515%" y="421" width="2.1305%" height="15" fill="rgb(227,7,12)" fg:x="273821457" fg:w="16048144"/><text x="36.6015%" y="431.50">&lt;..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (16,048,144 samples, 2.13%)</title><rect x="36.3515%" y="405" width="2.1305%" height="15" fill="rgb(245,203,43)" fg:x="273821457" fg:w="16048144"/><text x="36.6015%" y="415.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (14,042,126 samples, 1.86%)</title><rect x="36.6178%" y="389" width="1.8642%" height="15" fill="rgb(238,205,33)" fg:x="275827475" fg:w="14042126"/><text x="36.8678%" y="399.50">c..</text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14,042,126 samples, 1.86%)</title><rect x="36.6178%" y="373" width="1.8642%" height="15" fill="rgb(231,56,7)" fg:x="275827475" fg:w="14042126"/><text x="36.8678%" y="383.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14,042,126 samples, 1.86%)</title><rect x="36.6178%" y="357" width="1.8642%" height="15" fill="rgb(244,186,29)" fg:x="275827475" fg:w="14042126"/><text x="36.8678%" y="367.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (14,042,126 samples, 1.86%)</title><rect x="36.6178%" y="341" width="1.8642%" height="15" fill="rgb(234,111,31)" fg:x="275827475" fg:w="14042126"/><text x="36.8678%" y="351.50">c..</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (14,042,126 samples, 1.86%)</title><rect x="36.6178%" y="325" width="1.8642%" height="15" fill="rgb(241,149,10)" fg:x="275827475" fg:w="14042126"/><text x="36.8678%" y="335.50">c..</text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (14,042,126 samples, 1.86%)</title><rect x="36.6178%" y="309" width="1.8642%" height="15" fill="rgb(249,206,44)" fg:x="275827475" fg:w="14042126"/><text x="36.8678%" y="319.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (14,042,126 samples, 1.86%)</title><rect x="36.6178%" y="293" width="1.8642%" height="15" fill="rgb(251,153,30)" fg:x="275827475" fg:w="14042126"/><text x="36.8678%" y="303.50">c..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (14,042,126 samples, 1.86%)</title><rect x="36.6178%" y="277" width="1.8642%" height="15" fill="rgb(239,152,38)" fg:x="275827475" fg:w="14042126"/><text x="36.8678%" y="287.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (14,042,126 samples, 1.86%)</title><rect x="36.6178%" y="261" width="1.8642%" height="15" fill="rgb(249,139,47)" fg:x="275827475" fg:w="14042126"/><text x="36.8678%" y="271.50">h..</text></g><g><title>hashbrown::map::make_hash (13,039,117 samples, 1.73%)</title><rect x="36.7510%" y="245" width="1.7310%" height="15" fill="rgb(244,64,35)" fg:x="276830484" fg:w="13039117"/><text x="37.0010%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13,039,117 samples, 1.73%)</title><rect x="36.7510%" y="229" width="1.7310%" height="15" fill="rgb(216,46,15)" fg:x="276830484" fg:w="13039117"/><text x="37.0010%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2,006,018 samples, 0.27%)</title><rect x="38.2157%" y="213" width="0.2663%" height="15" fill="rgb(250,74,19)" fg:x="287863583" fg:w="2006018"/><text x="38.4657%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,006,018 samples, 0.27%)</title><rect x="38.2157%" y="197" width="0.2663%" height="15" fill="rgb(249,42,33)" fg:x="287863583" fg:w="2006018"/><text x="38.4657%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,006,018 samples, 0.27%)</title><rect x="38.2157%" y="181" width="0.2663%" height="15" fill="rgb(242,149,17)" fg:x="287863583" fg:w="2006018"/><text x="38.4657%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V&gt; as core::convert::From&lt;[(K,V): N]&gt;&gt;::from (17,051,153 samples, 2.26%)</title><rect x="36.3515%" y="453" width="2.2636%" height="15" fill="rgb(244,29,21)" fg:x="273821457" fg:w="17051153"/><text x="36.6015%" y="463.50">&lt;..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (17,051,153 samples, 2.26%)</title><rect x="36.3515%" y="437" width="2.2636%" height="15" fill="rgb(220,130,37)" fg:x="273821457" fg:w="17051153"/><text x="36.6015%" y="447.50">&lt;..</text></g><g><title>chlang::board::Board::is_threefold_rep (293,881,637 samples, 39.01%)</title><rect x="0.9321%" y="469" width="39.0146%" height="15" fill="rgb(211,67,2)" fg:x="7021063" fg:w="293881637"/><text x="1.1821%" y="479.50">chlang::board::Board::is_threefold_rep</text></g><g><title>core::option::Option&lt;T&gt;::expect (2,006,018 samples, 0.27%)</title><rect x="39.9467%" y="437" width="0.2663%" height="15" fill="rgb(235,68,52)" fg:x="300902700" fg:w="2006018"/><text x="40.1967%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1,003,009 samples, 0.13%)</title><rect x="40.2130%" y="437" width="0.1332%" height="15" fill="rgb(246,142,3)" fg:x="302908718" fg:w="1003009"/><text x="40.4630%" y="447.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.13%)</title><rect x="40.2130%" y="421" width="0.1332%" height="15" fill="rgb(241,25,7)" fg:x="302908718" fg:w="1003009"/><text x="40.4630%" y="431.50"></text></g><g><title>chlang::board::Board::unmake_last (4,012,036 samples, 0.53%)</title><rect x="39.9467%" y="453" width="0.5326%" height="15" fill="rgb(242,119,39)" fg:x="300902700" fg:w="4012036"/><text x="40.1967%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.13%)</title><rect x="40.4794%" y="389" width="0.1332%" height="15" fill="rgb(241,98,45)" fg:x="304914736" fg:w="1003009"/><text x="40.7294%" y="399.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,003,009 samples, 0.13%)</title><rect x="40.4794%" y="373" width="0.1332%" height="15" fill="rgb(254,28,30)" fg:x="304914736" fg:w="1003009"/><text x="40.7294%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (4,012,036 samples, 0.53%)</title><rect x="40.4794%" y="437" width="0.5326%" height="15" fill="rgb(241,142,54)" fg:x="304914736" fg:w="4012036"/><text x="40.7294%" y="447.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (4,012,036 samples, 0.53%)</title><rect x="40.4794%" y="421" width="0.5326%" height="15" fill="rgb(222,85,15)" fg:x="304914736" fg:w="4012036"/><text x="40.7294%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (4,012,036 samples, 0.53%)</title><rect x="40.4794%" y="405" width="0.5326%" height="15" fill="rgb(210,85,47)" fg:x="304914736" fg:w="4012036"/><text x="40.7294%" y="415.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (3,009,027 samples, 0.40%)</title><rect x="40.6125%" y="389" width="0.3995%" height="15" fill="rgb(224,206,25)" fg:x="305917745" fg:w="3009027"/><text x="40.8625%" y="399.50"></text></g><g><title>&lt;chlang::cmove::Move as core::cmp::PartialEq&gt;::eq (3,009,027 samples, 0.40%)</title><rect x="40.6125%" y="373" width="0.3995%" height="15" fill="rgb(243,201,19)" fg:x="305917745" fg:w="3009027"/><text x="40.8625%" y="383.50"></text></g><g><title>__rust_dealloc (1,003,009 samples, 0.13%)</title><rect x="41.0120%" y="357" width="0.1332%" height="15" fill="rgb(236,59,4)" fg:x="308926772" fg:w="1003009"/><text x="41.2620%" y="367.50"></text></g><g><title>__rdl_dealloc (1,003,009 samples, 0.13%)</title><rect x="41.1451%" y="357" width="0.1332%" height="15" fill="rgb(254,179,45)" fg:x="309929781" fg:w="1003009"/><text x="41.3951%" y="367.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,003,009 samples, 0.13%)</title><rect x="41.1451%" y="341" width="0.1332%" height="15" fill="rgb(226,14,10)" fg:x="309929781" fg:w="1003009"/><text x="41.3951%" y="351.50"></text></g><g><title>tcache_put (2,006,018 samples, 0.27%)</title><rect x="41.2783%" y="325" width="0.2663%" height="15" fill="rgb(244,27,41)" fg:x="310932790" fg:w="2006018"/><text x="41.5283%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (6,018,054 samples, 0.80%)</title><rect x="41.0120%" y="437" width="0.7989%" height="15" fill="rgb(235,35,32)" fg:x="308926772" fg:w="6018054"/><text x="41.2620%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (6,018,054 samples, 0.80%)</title><rect x="41.0120%" y="421" width="0.7989%" height="15" fill="rgb(218,68,31)" fg:x="308926772" fg:w="6018054"/><text x="41.2620%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,018,054 samples, 0.80%)</title><rect x="41.0120%" y="405" width="0.7989%" height="15" fill="rgb(207,120,37)" fg:x="308926772" fg:w="6018054"/><text x="41.2620%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,018,054 samples, 0.80%)</title><rect x="41.0120%" y="389" width="0.7989%" height="15" fill="rgb(227,98,0)" fg:x="308926772" fg:w="6018054"/><text x="41.2620%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (6,018,054 samples, 0.80%)</title><rect x="41.0120%" y="373" width="0.7989%" height="15" fill="rgb(207,7,3)" fg:x="308926772" fg:w="6018054"/><text x="41.2620%" y="383.50"></text></g><g><title>__GI___libc_free (4,012,036 samples, 0.53%)</title><rect x="41.2783%" y="357" width="0.5326%" height="15" fill="rgb(206,98,19)" fg:x="310932790" fg:w="4012036"/><text x="41.5283%" y="367.50"></text></g><g><title>_int_free (4,012,036 samples, 0.53%)</title><rect x="41.2783%" y="341" width="0.5326%" height="15" fill="rgb(217,5,26)" fg:x="310932790" fg:w="4012036"/><text x="41.5283%" y="351.50"></text></g><g><title>chlang::cmove::Move::from (1,003,009 samples, 0.13%)</title><rect x="41.8109%" y="437" width="0.1332%" height="15" fill="rgb(235,190,38)" fg:x="314944826" fg:w="1003009"/><text x="42.0609%" y="447.50"></text></g><g><title>chlang::board::Position::bitboard (6,018,054 samples, 0.80%)</title><rect x="41.9441%" y="437" width="0.7989%" height="15" fill="rgb(247,86,24)" fg:x="315947835" fg:w="6018054"/><text x="42.1941%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (6,018,054 samples, 0.80%)</title><rect x="41.9441%" y="421" width="0.7989%" height="15" fill="rgb(205,101,16)" fg:x="315947835" fg:w="6018054"/><text x="42.1941%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (20,060,180 samples, 2.66%)</title><rect x="42.7430%" y="405" width="2.6631%" height="15" fill="rgb(246,168,33)" fg:x="321965889" fg:w="20060180"/><text x="42.9930%" y="415.50">co..</text></g><g><title>chlang::board::Position::bitboard (22,066,198 samples, 2.93%)</title><rect x="42.7430%" y="421" width="2.9294%" height="15" fill="rgb(231,114,1)" fg:x="321965889" fg:w="22066198"/><text x="42.9930%" y="431.50">ch..</text></g><g><title>chlang::board::Board::piece_type (30,090,270 samples, 3.99%)</title><rect x="42.7430%" y="437" width="3.9947%" height="15" fill="rgb(207,184,53)" fg:x="321965889" fg:w="30090270"/><text x="42.9930%" y="447.50">chla..</text></g><g><title>chlang::board::Board::key (1,003,009 samples, 0.13%)</title><rect x="46.7377%" y="437" width="0.1332%" height="15" fill="rgb(224,95,51)" fg:x="352056159" fg:w="1003009"/><text x="46.9877%" y="447.50"></text></g><g><title>__rdl_dealloc (1,003,009 samples, 0.13%)</title><rect x="46.8708%" y="277" width="0.1332%" height="15" fill="rgb(212,188,45)" fg:x="353059168" fg:w="1003009"/><text x="47.1208%" y="287.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,003,009 samples, 0.13%)</title><rect x="46.8708%" y="261" width="0.1332%" height="15" fill="rgb(223,154,38)" fg:x="353059168" fg:w="1003009"/><text x="47.1208%" y="271.50"></text></g><g><title>tcache_put (2,006,018 samples, 0.27%)</title><rect x="47.0040%" y="245" width="0.2663%" height="15" fill="rgb(251,22,52)" fg:x="354062177" fg:w="2006018"/><text x="47.2540%" y="255.50"></text></g><g><title>_int_free (10,030,090 samples, 1.33%)</title><rect x="47.0040%" y="261" width="1.3316%" height="15" fill="rgb(229,209,22)" fg:x="354062177" fg:w="10030090"/><text x="47.2540%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (14,042,126 samples, 1.86%)</title><rect x="46.8708%" y="405" width="1.8642%" height="15" fill="rgb(234,138,34)" fg:x="353059168" fg:w="14042126"/><text x="47.1208%" y="415.50">c..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14,042,126 samples, 1.86%)</title><rect x="46.8708%" y="389" width="1.8642%" height="15" fill="rgb(212,95,11)" fg:x="353059168" fg:w="14042126"/><text x="47.1208%" y="399.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (14,042,126 samples, 1.86%)</title><rect x="46.8708%" y="373" width="1.8642%" height="15" fill="rgb(240,179,47)" fg:x="353059168" fg:w="14042126"/><text x="47.1208%" y="383.50">c..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14,042,126 samples, 1.86%)</title><rect x="46.8708%" y="357" width="1.8642%" height="15" fill="rgb(240,163,11)" fg:x="353059168" fg:w="14042126"/><text x="47.1208%" y="367.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (14,042,126 samples, 1.86%)</title><rect x="46.8708%" y="341" width="1.8642%" height="15" fill="rgb(236,37,12)" fg:x="353059168" fg:w="14042126"/><text x="47.1208%" y="351.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14,042,126 samples, 1.86%)</title><rect x="46.8708%" y="325" width="1.8642%" height="15" fill="rgb(232,164,16)" fg:x="353059168" fg:w="14042126"/><text x="47.1208%" y="335.50">&lt;..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14,042,126 samples, 1.86%)</title><rect x="46.8708%" y="309" width="1.8642%" height="15" fill="rgb(244,205,15)" fg:x="353059168" fg:w="14042126"/><text x="47.1208%" y="319.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (14,042,126 samples, 1.86%)</title><rect x="46.8708%" y="293" width="1.8642%" height="15" fill="rgb(223,117,47)" fg:x="353059168" fg:w="14042126"/><text x="47.1208%" y="303.50">a..</text></g><g><title>__GI___libc_free (13,039,117 samples, 1.73%)</title><rect x="47.0040%" y="277" width="1.7310%" height="15" fill="rgb(244,107,35)" fg:x="354062177" fg:w="13039117"/><text x="47.2540%" y="287.50"></text></g><g><title>chlang::cmove::Move::to (2,006,018 samples, 0.27%)</title><rect x="48.7350%" y="405" width="0.2663%" height="15" fill="rgb(205,140,8)" fg:x="367101294" fg:w="2006018"/><text x="48.9850%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (55,165,495 samples, 7.32%)</title><rect x="49.0013%" y="373" width="7.3236%" height="15" fill="rgb(228,84,46)" fg:x="369107312" fg:w="55165495"/><text x="49.2513%" y="383.50">core::num:..</text></g><g><title>chlang::board::Position::bitboard (69,207,621 samples, 9.19%)</title><rect x="49.0013%" y="389" width="9.1877%" height="15" fill="rgb(254,188,9)" fg:x="369107312" fg:w="69207621"/><text x="49.2513%" y="399.50">chlang::board..</text></g><g><title>chlang::board::Board::piece_type (92,276,828 samples, 12.25%)</title><rect x="49.0013%" y="405" width="12.2503%" height="15" fill="rgb(206,112,54)" fg:x="369107312" fg:w="92276828"/><text x="49.2513%" y="415.50">chlang::board::Boa..</text></g><g><title>chlang::board::Position::valid (1,003,009 samples, 0.13%)</title><rect x="61.2517%" y="389" width="0.1332%" height="15" fill="rgb(216,84,49)" fg:x="461384140" fg:w="1003009"/><text x="61.5017%" y="399.50"></text></g><g><title>chlang::board::Position::bitboard (14,042,126 samples, 1.86%)</title><rect x="61.3848%" y="389" width="1.8642%" height="15" fill="rgb(214,194,35)" fg:x="462387149" fg:w="14042126"/><text x="61.6348%" y="399.50">c..</text></g><g><title>core::num::&lt;impl u64&gt;::pow (14,042,126 samples, 1.86%)</title><rect x="61.3848%" y="373" width="1.8642%" height="15" fill="rgb(249,28,3)" fg:x="462387149" fg:w="14042126"/><text x="61.6348%" y="383.50">c..</text></g><g><title>tcache_get (2,006,018 samples, 0.27%)</title><rect x="63.2490%" y="261" width="0.2663%" height="15" fill="rgb(222,56,52)" fg:x="476429275" fg:w="2006018"/><text x="63.4990%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5,015,045 samples, 0.67%)</title><rect x="63.2490%" y="389" width="0.6658%" height="15" fill="rgb(245,217,50)" fg:x="476429275" fg:w="5015045"/><text x="63.4990%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5,015,045 samples, 0.67%)</title><rect x="63.2490%" y="373" width="0.6658%" height="15" fill="rgb(213,201,24)" fg:x="476429275" fg:w="5015045"/><text x="63.4990%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5,015,045 samples, 0.67%)</title><rect x="63.2490%" y="357" width="0.6658%" height="15" fill="rgb(248,116,28)" fg:x="476429275" fg:w="5015045"/><text x="63.4990%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (5,015,045 samples, 0.67%)</title><rect x="63.2490%" y="341" width="0.6658%" height="15" fill="rgb(219,72,43)" fg:x="476429275" fg:w="5015045"/><text x="63.4990%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,015,045 samples, 0.67%)</title><rect x="63.2490%" y="325" width="0.6658%" height="15" fill="rgb(209,138,14)" fg:x="476429275" fg:w="5015045"/><text x="63.4990%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5,015,045 samples, 0.67%)</title><rect x="63.2490%" y="309" width="0.6658%" height="15" fill="rgb(222,18,33)" fg:x="476429275" fg:w="5015045"/><text x="63.4990%" y="319.50"></text></g><g><title>alloc::alloc::alloc (5,015,045 samples, 0.67%)</title><rect x="63.2490%" y="293" width="0.6658%" height="15" fill="rgb(213,199,7)" fg:x="476429275" fg:w="5015045"/><text x="63.4990%" y="303.50"></text></g><g><title>__GI___libc_malloc (5,015,045 samples, 0.67%)</title><rect x="63.2490%" y="277" width="0.6658%" height="15" fill="rgb(250,110,10)" fg:x="476429275" fg:w="5015045"/><text x="63.4990%" y="287.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (3,009,027 samples, 0.40%)</title><rect x="63.9148%" y="373" width="0.3995%" height="15" fill="rgb(248,123,6)" fg:x="481444320" fg:w="3009027"/><text x="64.1648%" y="383.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&lt;&amp;i64&gt;&gt;::add (4,012,036 samples, 0.53%)</title><rect x="63.9148%" y="389" width="0.5326%" height="15" fill="rgb(206,91,31)" fg:x="481444320" fg:w="4012036"/><text x="64.1648%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.13%)</title><rect x="64.4474%" y="389" width="0.1332%" height="15" fill="rgb(211,154,13)" fg:x="485456356" fg:w="1003009"/><text x="64.6974%" y="399.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,003,009 samples, 0.13%)</title><rect x="64.4474%" y="373" width="0.1332%" height="15" fill="rgb(225,148,7)" fg:x="485456356" fg:w="1003009"/><text x="64.6974%" y="383.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (35,105,315 samples, 4.66%)</title><rect x="61.2517%" y="405" width="4.6605%" height="15" fill="rgb(220,160,43)" fg:x="461384140" fg:w="35105315"/><text x="61.5017%" y="415.50">chlan..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1,003,009 samples, 0.13%)</title><rect x="65.9121%" y="325" width="0.1332%" height="15" fill="rgb(213,52,39)" fg:x="496489455" fg:w="1003009"/><text x="66.1621%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (1,003,009 samples, 0.13%)</title><rect x="65.9121%" y="309" width="0.1332%" height="15" fill="rgb(243,137,7)" fg:x="496489455" fg:w="1003009"/><text x="66.1621%" y="319.50"></text></g><g><title>__rust_dealloc (1,003,009 samples, 0.13%)</title><rect x="66.0453%" y="293" width="0.1332%" height="15" fill="rgb(230,79,13)" fg:x="497492464" fg:w="1003009"/><text x="66.2953%" y="303.50"></text></g><g><title>__rdl_dealloc (1,003,009 samples, 0.13%)</title><rect x="66.1784%" y="293" width="0.1332%" height="15" fill="rgb(247,105,23)" fg:x="498495473" fg:w="1003009"/><text x="66.4284%" y="303.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,003,009 samples, 0.13%)</title><rect x="66.1784%" y="277" width="0.1332%" height="15" fill="rgb(223,179,41)" fg:x="498495473" fg:w="1003009"/><text x="66.4284%" y="287.50"></text></g><g><title>_int_free (1,003,009 samples, 0.13%)</title><rect x="66.3116%" y="277" width="0.1332%" height="15" fill="rgb(218,9,34)" fg:x="499498482" fg:w="1003009"/><text x="66.5616%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,012,036 samples, 0.53%)</title><rect x="66.0453%" y="325" width="0.5326%" height="15" fill="rgb(222,106,8)" fg:x="497492464" fg:w="4012036"/><text x="66.2953%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (4,012,036 samples, 0.53%)</title><rect x="66.0453%" y="309" width="0.5326%" height="15" fill="rgb(211,220,0)" fg:x="497492464" fg:w="4012036"/><text x="66.2953%" y="319.50"></text></g><g><title>__GI___libc_free (2,006,018 samples, 0.27%)</title><rect x="66.3116%" y="293" width="0.2663%" height="15" fill="rgb(229,52,16)" fg:x="499498482" fg:w="2006018"/><text x="66.5616%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (6,018,054 samples, 0.80%)</title><rect x="65.9121%" y="389" width="0.7989%" height="15" fill="rgb(212,155,18)" fg:x="496489455" fg:w="6018054"/><text x="66.1621%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (6,018,054 samples, 0.80%)</title><rect x="65.9121%" y="373" width="0.7989%" height="15" fill="rgb(242,21,14)" fg:x="496489455" fg:w="6018054"/><text x="66.1621%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (6,018,054 samples, 0.80%)</title><rect x="65.9121%" y="357" width="0.7989%" height="15" fill="rgb(222,19,48)" fg:x="496489455" fg:w="6018054"/><text x="66.1621%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,018,054 samples, 0.80%)</title><rect x="65.9121%" y="341" width="0.7989%" height="15" fill="rgb(232,45,27)" fg:x="496489455" fg:w="6018054"/><text x="66.1621%" y="351.50"></text></g><g><title>chlang::board::Position::valid (1,003,009 samples, 0.13%)</title><rect x="66.7111%" y="389" width="0.1332%" height="15" fill="rgb(249,103,42)" fg:x="502507509" fg:w="1003009"/><text x="66.9611%" y="399.50"></text></g><g><title>chlang::board::Position::bitboard (3,009,027 samples, 0.40%)</title><rect x="66.8442%" y="389" width="0.3995%" height="15" fill="rgb(246,81,33)" fg:x="503510518" fg:w="3009027"/><text x="67.0942%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (3,009,027 samples, 0.40%)</title><rect x="66.8442%" y="373" width="0.3995%" height="15" fill="rgb(252,33,42)" fg:x="503510518" fg:w="3009027"/><text x="67.0942%" y="383.50"></text></g><g><title>__rust_alloc (2,006,018 samples, 0.27%)</title><rect x="67.2437%" y="277" width="0.2663%" height="15" fill="rgb(209,212,41)" fg:x="506519545" fg:w="2006018"/><text x="67.4937%" y="287.50"></text></g><g><title>tcache_get (1,003,009 samples, 0.13%)</title><rect x="67.5100%" y="261" width="0.1332%" height="15" fill="rgb(207,154,6)" fg:x="508525563" fg:w="1003009"/><text x="67.7600%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5,015,045 samples, 0.67%)</title><rect x="67.2437%" y="357" width="0.6658%" height="15" fill="rgb(223,64,47)" fg:x="506519545" fg:w="5015045"/><text x="67.4937%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (5,015,045 samples, 0.67%)</title><rect x="67.2437%" y="341" width="0.6658%" height="15" fill="rgb(211,161,38)" fg:x="506519545" fg:w="5015045"/><text x="67.4937%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,015,045 samples, 0.67%)</title><rect x="67.2437%" y="325" width="0.6658%" height="15" fill="rgb(219,138,40)" fg:x="506519545" fg:w="5015045"/><text x="67.4937%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5,015,045 samples, 0.67%)</title><rect x="67.2437%" y="309" width="0.6658%" height="15" fill="rgb(241,228,46)" fg:x="506519545" fg:w="5015045"/><text x="67.4937%" y="319.50"></text></g><g><title>alloc::alloc::alloc (5,015,045 samples, 0.67%)</title><rect x="67.2437%" y="293" width="0.6658%" height="15" fill="rgb(223,209,38)" fg:x="506519545" fg:w="5015045"/><text x="67.4937%" y="303.50"></text></g><g><title>__GI___libc_malloc (3,009,027 samples, 0.40%)</title><rect x="67.5100%" y="277" width="0.3995%" height="15" fill="rgb(236,164,45)" fg:x="508525563" fg:w="3009027"/><text x="67.7600%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6,018,054 samples, 0.80%)</title><rect x="67.2437%" y="389" width="0.7989%" height="15" fill="rgb(231,15,5)" fg:x="506519545" fg:w="6018054"/><text x="67.4937%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6,018,054 samples, 0.80%)</title><rect x="67.2437%" y="373" width="0.7989%" height="15" fill="rgb(252,35,15)" fg:x="506519545" fg:w="6018054"/><text x="67.4937%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.13%)</title><rect x="68.0426%" y="357" width="0.1332%" height="15" fill="rgb(248,181,18)" fg:x="512537599" fg:w="1003009"/><text x="68.2926%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.13%)</title><rect x="68.0426%" y="341" width="0.1332%" height="15" fill="rgb(233,39,42)" fg:x="512537599" fg:w="1003009"/><text x="68.2926%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.13%)</title><rect x="68.0426%" y="325" width="0.1332%" height="15" fill="rgb(238,110,33)" fg:x="512537599" fg:w="1003009"/><text x="68.2926%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.13%)</title><rect x="68.0426%" y="309" width="0.1332%" height="15" fill="rgb(233,195,10)" fg:x="512537599" fg:w="1003009"/><text x="68.2926%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.13%)</title><rect x="68.0426%" y="293" width="0.1332%" height="15" fill="rgb(254,105,3)" fg:x="512537599" fg:w="1003009"/><text x="68.2926%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.13%)</title><rect x="68.0426%" y="277" width="0.1332%" height="15" fill="rgb(221,225,9)" fg:x="512537599" fg:w="1003009"/><text x="68.2926%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.13%)</title><rect x="68.0426%" y="261" width="0.1332%" height="15" fill="rgb(224,227,45)" fg:x="512537599" fg:w="1003009"/><text x="68.2926%" y="271.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.13%)</title><rect x="68.0426%" y="245" width="0.1332%" height="15" fill="rgb(229,198,43)" fg:x="512537599" fg:w="1003009"/><text x="68.2926%" y="255.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (4,012,036 samples, 0.53%)</title><rect x="68.0426%" y="373" width="0.5326%" height="15" fill="rgb(206,209,35)" fg:x="512537599" fg:w="4012036"/><text x="68.2926%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (5,015,045 samples, 0.67%)</title><rect x="68.0426%" y="389" width="0.6658%" height="15" fill="rgb(245,195,53)" fg:x="512537599" fg:w="5015045"/><text x="68.2926%" y="399.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (28,084,252 samples, 3.73%)</title><rect x="65.9121%" y="405" width="3.7284%" height="15" fill="rgb(240,92,26)" fg:x="496489455" fg:w="28084252"/><text x="66.1621%" y="415.50">chla..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,006,018 samples, 0.27%)</title><rect x="69.6405%" y="389" width="0.2663%" height="15" fill="rgb(207,40,23)" fg:x="524573707" fg:w="2006018"/><text x="69.8905%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.27%)</title><rect x="69.6405%" y="373" width="0.2663%" height="15" fill="rgb(223,111,35)" fg:x="524573707" fg:w="2006018"/><text x="69.8905%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.27%)</title><rect x="69.6405%" y="357" width="0.2663%" height="15" fill="rgb(229,147,28)" fg:x="524573707" fg:w="2006018"/><text x="69.8905%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2,006,018 samples, 0.27%)</title><rect x="69.6405%" y="341" width="0.2663%" height="15" fill="rgb(211,29,28)" fg:x="524573707" fg:w="2006018"/><text x="69.8905%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,006,018 samples, 0.27%)</title><rect x="69.6405%" y="325" width="0.2663%" height="15" fill="rgb(228,72,33)" fg:x="524573707" fg:w="2006018"/><text x="69.8905%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,006,018 samples, 0.27%)</title><rect x="69.6405%" y="309" width="0.2663%" height="15" fill="rgb(205,214,31)" fg:x="524573707" fg:w="2006018"/><text x="69.8905%" y="319.50"></text></g><g><title>alloc::alloc::alloc (2,006,018 samples, 0.27%)</title><rect x="69.6405%" y="293" width="0.2663%" height="15" fill="rgb(224,111,15)" fg:x="524573707" fg:w="2006018"/><text x="69.8905%" y="303.50"></text></g><g><title>__GI___libc_malloc (2,006,018 samples, 0.27%)</title><rect x="69.6405%" y="277" width="0.2663%" height="15" fill="rgb(253,21,26)" fg:x="524573707" fg:w="2006018"/><text x="69.8905%" y="287.50"></text></g><g><title>tcache_get (2,006,018 samples, 0.27%)</title><rect x="69.6405%" y="261" width="0.2663%" height="15" fill="rgb(245,139,43)" fg:x="524573707" fg:w="2006018"/><text x="69.8905%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,006,018 samples, 0.27%)</title><rect x="69.9068%" y="389" width="0.2663%" height="15" fill="rgb(252,170,7)" fg:x="526579725" fg:w="2006018"/><text x="70.1568%" y="399.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (6,018,054 samples, 0.80%)</title><rect x="69.6405%" y="405" width="0.7989%" height="15" fill="rgb(231,118,14)" fg:x="524573707" fg:w="6018054"/><text x="69.8905%" y="415.50"></text></g><g><title>chlang::cmove::Move::new (2,006,018 samples, 0.27%)</title><rect x="70.4394%" y="389" width="0.2663%" height="15" fill="rgb(238,83,0)" fg:x="530591761" fg:w="2006018"/><text x="70.6894%" y="399.50"></text></g><g><title>chlang::board::Position::valid (1,003,009 samples, 0.13%)</title><rect x="70.7057%" y="389" width="0.1332%" height="15" fill="rgb(221,39,39)" fg:x="532597779" fg:w="1003009"/><text x="70.9557%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,006,018 samples, 0.27%)</title><rect x="70.8389%" y="389" width="0.2663%" height="15" fill="rgb(222,119,46)" fg:x="533600788" fg:w="2006018"/><text x="71.0889%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.27%)</title><rect x="70.8389%" y="373" width="0.2663%" height="15" fill="rgb(222,165,49)" fg:x="533600788" fg:w="2006018"/><text x="71.0889%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.27%)</title><rect x="70.8389%" y="357" width="0.2663%" height="15" fill="rgb(219,113,52)" fg:x="533600788" fg:w="2006018"/><text x="71.0889%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2,006,018 samples, 0.27%)</title><rect x="70.8389%" y="341" width="0.2663%" height="15" fill="rgb(214,7,15)" fg:x="533600788" fg:w="2006018"/><text x="71.0889%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,006,018 samples, 0.27%)</title><rect x="70.8389%" y="325" width="0.2663%" height="15" fill="rgb(235,32,4)" fg:x="533600788" fg:w="2006018"/><text x="71.0889%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,006,018 samples, 0.27%)</title><rect x="70.8389%" y="309" width="0.2663%" height="15" fill="rgb(238,90,54)" fg:x="533600788" fg:w="2006018"/><text x="71.0889%" y="319.50"></text></g><g><title>alloc::alloc::alloc (2,006,018 samples, 0.27%)</title><rect x="70.8389%" y="293" width="0.2663%" height="15" fill="rgb(213,208,19)" fg:x="533600788" fg:w="2006018"/><text x="71.0889%" y="303.50"></text></g><g><title>__GI___libc_malloc (2,006,018 samples, 0.27%)</title><rect x="70.8389%" y="277" width="0.2663%" height="15" fill="rgb(233,156,4)" fg:x="533600788" fg:w="2006018"/><text x="71.0889%" y="287.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.13%)</title><rect x="71.1052%" y="373" width="0.1332%" height="15" fill="rgb(207,194,5)" fg:x="535606806" fg:w="1003009"/><text x="71.3552%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5,015,045 samples, 0.67%)</title><rect x="71.1052%" y="389" width="0.6658%" height="15" fill="rgb(206,111,30)" fg:x="535606806" fg:w="5015045"/><text x="71.3552%" y="399.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (11,033,099 samples, 1.46%)</title><rect x="70.4394%" y="405" width="1.4647%" height="15" fill="rgb(243,70,54)" fg:x="530591761" fg:w="11033099"/><text x="70.6894%" y="415.50"></text></g><g><title>chlang::board::Position::bitboard (5,015,045 samples, 0.67%)</title><rect x="71.9041%" y="389" width="0.6658%" height="15" fill="rgb(242,28,8)" fg:x="541624860" fg:w="5015045"/><text x="72.1541%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (5,015,045 samples, 0.67%)</title><rect x="71.9041%" y="373" width="0.6658%" height="15" fill="rgb(219,106,18)" fg:x="541624860" fg:w="5015045"/><text x="72.1541%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.13%)</title><rect x="72.5699%" y="389" width="0.1332%" height="15" fill="rgb(244,222,10)" fg:x="546639905" fg:w="1003009"/><text x="72.8199%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.13%)</title><rect x="72.5699%" y="373" width="0.1332%" height="15" fill="rgb(236,179,52)" fg:x="546639905" fg:w="1003009"/><text x="72.8199%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.13%)</title><rect x="72.5699%" y="357" width="0.1332%" height="15" fill="rgb(213,23,39)" fg:x="546639905" fg:w="1003009"/><text x="72.8199%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.13%)</title><rect x="72.5699%" y="341" width="0.1332%" height="15" fill="rgb(238,48,10)" fg:x="546639905" fg:w="1003009"/><text x="72.8199%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.13%)</title><rect x="72.5699%" y="325" width="0.1332%" height="15" fill="rgb(251,196,23)" fg:x="546639905" fg:w="1003009"/><text x="72.8199%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.13%)</title><rect x="72.5699%" y="309" width="0.1332%" height="15" fill="rgb(250,152,24)" fg:x="546639905" fg:w="1003009"/><text x="72.8199%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.13%)</title><rect x="72.5699%" y="293" width="0.1332%" height="15" fill="rgb(209,150,17)" fg:x="546639905" fg:w="1003009"/><text x="72.8199%" y="303.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.13%)</title><rect x="72.5699%" y="277" width="0.1332%" height="15" fill="rgb(234,202,34)" fg:x="546639905" fg:w="1003009"/><text x="72.8199%" y="287.50"></text></g><g><title>tcache_get (1,003,009 samples, 0.13%)</title><rect x="72.5699%" y="261" width="0.1332%" height="15" fill="rgb(253,148,53)" fg:x="546639905" fg:w="1003009"/><text x="72.8199%" y="271.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.13%)</title><rect x="72.7031%" y="373" width="0.1332%" height="15" fill="rgb(218,129,16)" fg:x="547642914" fg:w="1003009"/><text x="72.9531%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,009,027 samples, 0.40%)</title><rect x="72.7031%" y="389" width="0.3995%" height="15" fill="rgb(216,85,19)" fg:x="547642914" fg:w="3009027"/><text x="72.9531%" y="399.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (17,051,153 samples, 2.26%)</title><rect x="71.9041%" y="405" width="2.2636%" height="15" fill="rgb(235,228,7)" fg:x="541624860" fg:w="17051153"/><text x="72.1541%" y="415.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (3,009,027 samples, 0.40%)</title><rect x="74.1678%" y="405" width="0.3995%" height="15" fill="rgb(245,175,0)" fg:x="558676013" fg:w="3009027"/><text x="74.4178%" y="415.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (3,009,027 samples, 0.40%)</title><rect x="74.1678%" y="389" width="0.3995%" height="15" fill="rgb(208,168,36)" fg:x="558676013" fg:w="3009027"/><text x="74.4178%" y="399.50"></text></g><g><title>chlang::board::Board::attacked_by_color (217,652,953 samples, 28.89%)</title><rect x="46.8708%" y="421" width="28.8948%" height="15" fill="rgb(246,171,24)" fg:x="353059168" fg:w="217652953"/><text x="47.1208%" y="431.50">chlang::board::Board::attacked_by_color</text></g><g><title>core::num::&lt;impl u64&gt;::ilog2 (1,003,009 samples, 0.13%)</title><rect x="75.7656%" y="405" width="0.1332%" height="15" fill="rgb(215,142,24)" fg:x="570712121" fg:w="1003009"/><text x="76.0156%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_ilog2 (1,003,009 samples, 0.13%)</title><rect x="75.7656%" y="389" width="0.1332%" height="15" fill="rgb(250,187,7)" fg:x="570712121" fg:w="1003009"/><text x="76.0156%" y="399.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::ilog2 (1,003,009 samples, 0.13%)</title><rect x="75.7656%" y="373" width="0.1332%" height="15" fill="rgb(228,66,33)" fg:x="570712121" fg:w="1003009"/><text x="76.0156%" y="383.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::leading_zeros (1,003,009 samples, 0.13%)</title><rect x="75.7656%" y="357" width="0.1332%" height="15" fill="rgb(234,215,21)" fg:x="570712121" fg:w="1003009"/><text x="76.0156%" y="367.50"></text></g><g><title>chlang::board::Board::is_valid (220,661,980 samples, 29.29%)</title><rect x="46.8708%" y="437" width="29.2943%" height="15" fill="rgb(222,191,20)" fg:x="353059168" fg:w="220661980"/><text x="47.1208%" y="447.50">chlang::board::Board::is_valid</text></g><g><title>&lt;chlang::board::Position as core::convert::From&lt;u64&gt;&gt;::from (3,009,027 samples, 0.40%)</title><rect x="75.7656%" y="421" width="0.3995%" height="15" fill="rgb(245,79,54)" fg:x="570712121" fg:w="3009027"/><text x="76.0156%" y="431.50"></text></g><g><title>tcache_put (1,003,009 samples, 0.13%)</title><rect x="76.1651%" y="293" width="0.1332%" height="15" fill="rgb(240,10,37)" fg:x="573721148" fg:w="1003009"/><text x="76.4151%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (2,006,018 samples, 0.27%)</title><rect x="76.1651%" y="421" width="0.2663%" height="15" fill="rgb(214,192,32)" fg:x="573721148" fg:w="2006018"/><text x="76.4151%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (2,006,018 samples, 0.27%)</title><rect x="76.1651%" y="405" width="0.2663%" height="15" fill="rgb(209,36,54)" fg:x="573721148" fg:w="2006018"/><text x="76.4151%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (2,006,018 samples, 0.27%)</title><rect x="76.1651%" y="389" width="0.2663%" height="15" fill="rgb(220,10,11)" fg:x="573721148" fg:w="2006018"/><text x="76.4151%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,006,018 samples, 0.27%)</title><rect x="76.1651%" y="373" width="0.2663%" height="15" fill="rgb(221,106,17)" fg:x="573721148" fg:w="2006018"/><text x="76.4151%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,006,018 samples, 0.27%)</title><rect x="76.1651%" y="357" width="0.2663%" height="15" fill="rgb(251,142,44)" fg:x="573721148" fg:w="2006018"/><text x="76.4151%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (2,006,018 samples, 0.27%)</title><rect x="76.1651%" y="341" width="0.2663%" height="15" fill="rgb(238,13,15)" fg:x="573721148" fg:w="2006018"/><text x="76.4151%" y="351.50"></text></g><g><title>__GI___libc_free (2,006,018 samples, 0.27%)</title><rect x="76.1651%" y="325" width="0.2663%" height="15" fill="rgb(208,107,27)" fg:x="573721148" fg:w="2006018"/><text x="76.4151%" y="335.50"></text></g><g><title>_int_free (2,006,018 samples, 0.27%)</title><rect x="76.1651%" y="309" width="0.2663%" height="15" fill="rgb(205,136,37)" fg:x="573721148" fg:w="2006018"/><text x="76.4151%" y="319.50"></text></g><g><title>chlang::board::Position::bitboard (7,021,063 samples, 0.93%)</title><rect x="76.4314%" y="405" width="0.9321%" height="15" fill="rgb(250,205,27)" fg:x="575727166" fg:w="7021063"/><text x="76.6814%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (7,021,063 samples, 0.93%)</title><rect x="76.4314%" y="389" width="0.9321%" height="15" fill="rgb(210,80,43)" fg:x="575727166" fg:w="7021063"/><text x="76.6814%" y="399.50"></text></g><g><title>chlang::board::Board::piece_type (11,033,099 samples, 1.46%)</title><rect x="76.4314%" y="421" width="1.4647%" height="15" fill="rgb(247,160,36)" fg:x="575727166" fg:w="11033099"/><text x="76.6814%" y="431.50"></text></g><g><title>chlang::board::Position::bitboard (4,012,036 samples, 0.53%)</title><rect x="77.8961%" y="405" width="0.5326%" height="15" fill="rgb(234,13,49)" fg:x="586760265" fg:w="4012036"/><text x="78.1461%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (4,012,036 samples, 0.53%)</title><rect x="77.8961%" y="389" width="0.5326%" height="15" fill="rgb(234,122,0)" fg:x="586760265" fg:w="4012036"/><text x="78.1461%" y="399.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.13%)</title><rect x="78.4288%" y="389" width="0.1332%" height="15" fill="rgb(207,146,38)" fg:x="590772301" fg:w="1003009"/><text x="78.6788%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,006,018 samples, 0.27%)</title><rect x="78.4288%" y="405" width="0.2663%" height="15" fill="rgb(207,177,25)" fg:x="590772301" fg:w="2006018"/><text x="78.6788%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1,003,009 samples, 0.13%)</title><rect x="78.5619%" y="389" width="0.1332%" height="15" fill="rgb(211,178,42)" fg:x="591775310" fg:w="1003009"/><text x="78.8119%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,003,009 samples, 0.13%)</title><rect x="78.5619%" y="373" width="0.1332%" height="15" fill="rgb(230,69,54)" fg:x="591775310" fg:w="1003009"/><text x="78.8119%" y="383.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (7,021,063 samples, 0.93%)</title><rect x="77.8961%" y="421" width="0.9321%" height="15" fill="rgb(214,135,41)" fg:x="586760265" fg:w="7021063"/><text x="78.1461%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (1,003,009 samples, 0.13%)</title><rect x="78.8282%" y="405" width="0.1332%" height="15" fill="rgb(237,67,25)" fg:x="593781328" fg:w="1003009"/><text x="79.0782%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.13%)</title><rect x="78.8282%" y="389" width="0.1332%" height="15" fill="rgb(222,189,50)" fg:x="593781328" fg:w="1003009"/><text x="79.0782%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.13%)</title><rect x="78.8282%" y="373" width="0.1332%" height="15" fill="rgb(245,148,34)" fg:x="593781328" fg:w="1003009"/><text x="79.0782%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.13%)</title><rect x="78.8282%" y="357" width="0.1332%" height="15" fill="rgb(222,29,6)" fg:x="593781328" fg:w="1003009"/><text x="79.0782%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.13%)</title><rect x="78.8282%" y="341" width="0.1332%" height="15" fill="rgb(221,189,43)" fg:x="593781328" fg:w="1003009"/><text x="79.0782%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.13%)</title><rect x="78.8282%" y="325" width="0.1332%" height="15" fill="rgb(207,36,27)" fg:x="593781328" fg:w="1003009"/><text x="79.0782%" y="335.50"></text></g><g><title>__GI___libc_free (1,003,009 samples, 0.13%)</title><rect x="78.8282%" y="309" width="0.1332%" height="15" fill="rgb(217,90,24)" fg:x="593781328" fg:w="1003009"/><text x="79.0782%" y="319.50"></text></g><g><title>_int_free (1,003,009 samples, 0.13%)</title><rect x="78.8282%" y="293" width="0.1332%" height="15" fill="rgb(224,66,35)" fg:x="593781328" fg:w="1003009"/><text x="79.0782%" y="303.50"></text></g><g><title>tcache_put (1,003,009 samples, 0.13%)</title><rect x="78.8282%" y="277" width="0.1332%" height="15" fill="rgb(221,13,50)" fg:x="593781328" fg:w="1003009"/><text x="79.0782%" y="287.50"></text></g><g><title>chlang::board::Position::bitboard (2,006,018 samples, 0.27%)</title><rect x="78.9614%" y="405" width="0.2663%" height="15" fill="rgb(236,68,49)" fg:x="594784337" fg:w="2006018"/><text x="79.2114%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (2,006,018 samples, 0.27%)</title><rect x="78.9614%" y="389" width="0.2663%" height="15" fill="rgb(229,146,28)" fg:x="594784337" fg:w="2006018"/><text x="79.2114%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.13%)</title><rect x="79.2277%" y="405" width="0.1332%" height="15" fill="rgb(225,31,38)" fg:x="596790355" fg:w="1003009"/><text x="79.4777%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.13%)</title><rect x="79.2277%" y="389" width="0.1332%" height="15" fill="rgb(250,208,3)" fg:x="596790355" fg:w="1003009"/><text x="79.4777%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.13%)</title><rect x="79.2277%" y="373" width="0.1332%" height="15" fill="rgb(246,54,23)" fg:x="596790355" fg:w="1003009"/><text x="79.4777%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.13%)</title><rect x="79.2277%" y="357" width="0.1332%" height="15" fill="rgb(243,76,11)" fg:x="596790355" fg:w="1003009"/><text x="79.4777%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.13%)</title><rect x="79.2277%" y="341" width="0.1332%" height="15" fill="rgb(245,21,50)" fg:x="596790355" fg:w="1003009"/><text x="79.4777%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.13%)</title><rect x="79.2277%" y="325" width="0.1332%" height="15" fill="rgb(228,9,43)" fg:x="596790355" fg:w="1003009"/><text x="79.4777%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.13%)</title><rect x="79.2277%" y="309" width="0.1332%" height="15" fill="rgb(208,100,47)" fg:x="596790355" fg:w="1003009"/><text x="79.4777%" y="319.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.13%)</title><rect x="79.2277%" y="293" width="0.1332%" height="15" fill="rgb(232,26,8)" fg:x="596790355" fg:w="1003009"/><text x="79.4777%" y="303.50"></text></g><g><title>__rust_alloc (1,003,009 samples, 0.13%)</title><rect x="79.3609%" y="261" width="0.1332%" height="15" fill="rgb(216,166,38)" fg:x="597793364" fg:w="1003009"/><text x="79.6109%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (2,006,018 samples, 0.27%)</title><rect x="79.3609%" y="405" width="0.2663%" height="15" fill="rgb(251,202,51)" fg:x="597793364" fg:w="2006018"/><text x="79.6109%" y="415.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (2,006,018 samples, 0.27%)</title><rect x="79.3609%" y="389" width="0.2663%" height="15" fill="rgb(254,216,34)" fg:x="597793364" fg:w="2006018"/><text x="79.6109%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,006,018 samples, 0.27%)</title><rect x="79.3609%" y="373" width="0.2663%" height="15" fill="rgb(251,32,27)" fg:x="597793364" fg:w="2006018"/><text x="79.6109%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.27%)</title><rect x="79.3609%" y="357" width="0.2663%" height="15" fill="rgb(208,127,28)" fg:x="597793364" fg:w="2006018"/><text x="79.6109%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.27%)</title><rect x="79.3609%" y="341" width="0.2663%" height="15" fill="rgb(224,137,22)" fg:x="597793364" fg:w="2006018"/><text x="79.6109%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2,006,018 samples, 0.27%)</title><rect x="79.3609%" y="325" width="0.2663%" height="15" fill="rgb(254,70,32)" fg:x="597793364" fg:w="2006018"/><text x="79.6109%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,006,018 samples, 0.27%)</title><rect x="79.3609%" y="309" width="0.2663%" height="15" fill="rgb(229,75,37)" fg:x="597793364" fg:w="2006018"/><text x="79.6109%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,006,018 samples, 0.27%)</title><rect x="79.3609%" y="293" width="0.2663%" height="15" fill="rgb(252,64,23)" fg:x="597793364" fg:w="2006018"/><text x="79.6109%" y="303.50"></text></g><g><title>alloc::alloc::alloc (2,006,018 samples, 0.27%)</title><rect x="79.3609%" y="277" width="0.2663%" height="15" fill="rgb(232,162,48)" fg:x="597793364" fg:w="2006018"/><text x="79.6109%" y="287.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.13%)</title><rect x="79.4940%" y="261" width="0.1332%" height="15" fill="rgb(246,160,12)" fg:x="598796373" fg:w="1003009"/><text x="79.7440%" y="271.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (7,021,063 samples, 0.93%)</title><rect x="78.8282%" y="421" width="0.9321%" height="15" fill="rgb(247,166,0)" fg:x="593781328" fg:w="7021063"/><text x="79.0782%" y="431.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (1,003,009 samples, 0.13%)</title><rect x="79.7603%" y="421" width="0.1332%" height="15" fill="rgb(249,219,21)" fg:x="600802391" fg:w="1003009"/><text x="80.0103%" y="431.50"></text></g><g><title>chlang::board::Board::piece_type (1,003,009 samples, 0.13%)</title><rect x="79.8935%" y="389" width="0.1332%" height="15" fill="rgb(205,209,3)" fg:x="601805400" fg:w="1003009"/><text x="80.1435%" y="399.50"></text></g><g><title>chlang::board::Board::attacked_by_color (2,006,018 samples, 0.27%)</title><rect x="79.8935%" y="405" width="0.2663%" height="15" fill="rgb(243,44,1)" fg:x="601805400" fg:w="2006018"/><text x="80.1435%" y="415.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (1,003,009 samples, 0.13%)</title><rect x="80.0266%" y="389" width="0.1332%" height="15" fill="rgb(206,159,16)" fg:x="602808409" fg:w="1003009"/><text x="80.2766%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (1,003,009 samples, 0.13%)</title><rect x="80.0266%" y="373" width="0.1332%" height="15" fill="rgb(244,77,30)" fg:x="602808409" fg:w="1003009"/><text x="80.2766%" y="383.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (1,003,009 samples, 0.13%)</title><rect x="80.0266%" y="357" width="0.1332%" height="15" fill="rgb(218,69,12)" fg:x="602808409" fg:w="1003009"/><text x="80.2766%" y="367.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (3,009,027 samples, 0.40%)</title><rect x="79.8935%" y="421" width="0.3995%" height="15" fill="rgb(212,87,7)" fg:x="601805400" fg:w="3009027"/><text x="80.1435%" y="431.50"></text></g><g><title>chlang::board::Position::bitboard (4,012,036 samples, 0.53%)</title><rect x="80.2929%" y="405" width="0.5326%" height="15" fill="rgb(245,114,25)" fg:x="604814427" fg:w="4012036"/><text x="80.5429%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (4,012,036 samples, 0.53%)</title><rect x="80.2929%" y="389" width="0.5326%" height="15" fill="rgb(210,61,42)" fg:x="604814427" fg:w="4012036"/><text x="80.5429%" y="399.50"></text></g><g><title>checked_request2size (1,003,009 samples, 0.13%)</title><rect x="80.8256%" y="277" width="0.1332%" height="15" fill="rgb(211,52,33)" fg:x="608826463" fg:w="1003009"/><text x="81.0756%" y="287.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (6,018,054 samples, 0.80%)</title><rect x="80.2929%" y="421" width="0.7989%" height="15" fill="rgb(234,58,33)" fg:x="604814427" fg:w="6018054"/><text x="80.5429%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,006,018 samples, 0.27%)</title><rect x="80.8256%" y="405" width="0.2663%" height="15" fill="rgb(220,115,36)" fg:x="608826463" fg:w="2006018"/><text x="81.0756%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.27%)</title><rect x="80.8256%" y="389" width="0.2663%" height="15" fill="rgb(243,153,54)" fg:x="608826463" fg:w="2006018"/><text x="81.0756%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.27%)</title><rect x="80.8256%" y="373" width="0.2663%" height="15" fill="rgb(251,47,18)" fg:x="608826463" fg:w="2006018"/><text x="81.0756%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2,006,018 samples, 0.27%)</title><rect x="80.8256%" y="357" width="0.2663%" height="15" fill="rgb(242,102,42)" fg:x="608826463" fg:w="2006018"/><text x="81.0756%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,006,018 samples, 0.27%)</title><rect x="80.8256%" y="341" width="0.2663%" height="15" fill="rgb(234,31,38)" fg:x="608826463" fg:w="2006018"/><text x="81.0756%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,006,018 samples, 0.27%)</title><rect x="80.8256%" y="325" width="0.2663%" height="15" fill="rgb(221,117,51)" fg:x="608826463" fg:w="2006018"/><text x="81.0756%" y="335.50"></text></g><g><title>alloc::alloc::alloc (2,006,018 samples, 0.27%)</title><rect x="80.8256%" y="309" width="0.2663%" height="15" fill="rgb(212,20,18)" fg:x="608826463" fg:w="2006018"/><text x="81.0756%" y="319.50"></text></g><g><title>__GI___libc_malloc (2,006,018 samples, 0.27%)</title><rect x="80.8256%" y="293" width="0.2663%" height="15" fill="rgb(245,133,36)" fg:x="608826463" fg:w="2006018"/><text x="81.0756%" y="303.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (39,117,351 samples, 5.19%)</title><rect x="76.1651%" y="437" width="5.1931%" height="15" fill="rgb(212,6,19)" fg:x="573721148" fg:w="39117351"/><text x="76.4151%" y="447.50">chlang..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1,003,009 samples, 0.13%)</title><rect x="81.3582%" y="437" width="0.1332%" height="15" fill="rgb(218,1,36)" fg:x="612838499" fg:w="1003009"/><text x="81.6082%" y="447.50"></text></g><g><title>chlang::board::Board::make_move (311,935,799 samples, 41.41%)</title><rect x="40.4794%" y="453" width="41.4115%" height="15" fill="rgb(246,84,54)" fg:x="304914736" fg:w="311935799"/><text x="40.7294%" y="463.50">chlang::board::Board::make_move</text></g><g><title>chlang::board::Board::piece_type (1,003,009 samples, 0.13%)</title><rect x="81.8908%" y="421" width="0.1332%" height="15" fill="rgb(242,110,6)" fg:x="616850535" fg:w="1003009"/><text x="82.1408%" y="431.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (1,003,009 samples, 0.13%)</title><rect x="82.0240%" y="421" width="0.1332%" height="15" fill="rgb(214,47,5)" fg:x="617853544" fg:w="1003009"/><text x="82.2740%" y="431.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.13%)</title><rect x="82.0240%" y="405" width="0.1332%" height="15" fill="rgb(218,159,25)" fg:x="617853544" fg:w="1003009"/><text x="82.2740%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.13%)</title><rect x="82.0240%" y="389" width="0.1332%" height="15" fill="rgb(215,211,28)" fg:x="617853544" fg:w="1003009"/><text x="82.2740%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1,003,009 samples, 0.13%)</title><rect x="82.1571%" y="341" width="0.1332%" height="15" fill="rgb(238,59,32)" fg:x="618856553" fg:w="1003009"/><text x="82.4071%" y="351.50"></text></g><g><title>__rdl_dealloc (1,003,009 samples, 0.13%)</title><rect x="82.2903%" y="309" width="0.1332%" height="15" fill="rgb(226,82,3)" fg:x="619859562" fg:w="1003009"/><text x="82.5403%" y="319.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,003,009 samples, 0.13%)</title><rect x="82.2903%" y="293" width="0.1332%" height="15" fill="rgb(240,164,32)" fg:x="619859562" fg:w="1003009"/><text x="82.5403%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (3,009,027 samples, 0.40%)</title><rect x="82.1571%" y="405" width="0.3995%" height="15" fill="rgb(232,46,7)" fg:x="618856553" fg:w="3009027"/><text x="82.4071%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 0.40%)</title><rect x="82.1571%" y="389" width="0.3995%" height="15" fill="rgb(229,129,53)" fg:x="618856553" fg:w="3009027"/><text x="82.4071%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 0.40%)</title><rect x="82.1571%" y="373" width="0.3995%" height="15" fill="rgb(234,188,29)" fg:x="618856553" fg:w="3009027"/><text x="82.4071%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 0.40%)</title><rect x="82.1571%" y="357" width="0.3995%" height="15" fill="rgb(246,141,4)" fg:x="618856553" fg:w="3009027"/><text x="82.4071%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,006,018 samples, 0.27%)</title><rect x="82.2903%" y="341" width="0.2663%" height="15" fill="rgb(229,23,39)" fg:x="619859562" fg:w="2006018"/><text x="82.5403%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (2,006,018 samples, 0.27%)</title><rect x="82.2903%" y="325" width="0.2663%" height="15" fill="rgb(206,12,3)" fg:x="619859562" fg:w="2006018"/><text x="82.5403%" y="335.50"></text></g><g><title>__GI___libc_free (1,003,009 samples, 0.13%)</title><rect x="82.4234%" y="309" width="0.1332%" height="15" fill="rgb(252,226,20)" fg:x="620862571" fg:w="1003009"/><text x="82.6734%" y="319.50"></text></g><g><title>_int_free (1,003,009 samples, 0.13%)</title><rect x="82.4234%" y="293" width="0.1332%" height="15" fill="rgb(216,123,35)" fg:x="620862571" fg:w="1003009"/><text x="82.6734%" y="303.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.13%)</title><rect x="82.5566%" y="405" width="0.1332%" height="15" fill="rgb(212,68,40)" fg:x="621865580" fg:w="1003009"/><text x="82.8066%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.13%)</title><rect x="82.5566%" y="389" width="0.1332%" height="15" fill="rgb(254,125,32)" fg:x="621865580" fg:w="1003009"/><text x="82.8066%" y="399.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (6,018,054 samples, 0.80%)</title><rect x="82.1571%" y="421" width="0.7989%" height="15" fill="rgb(253,97,22)" fg:x="618856553" fg:w="6018054"/><text x="82.4071%" y="431.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (1,003,009 samples, 0.13%)</title><rect x="82.9561%" y="421" width="0.1332%" height="15" fill="rgb(241,101,14)" fg:x="624874607" fg:w="1003009"/><text x="83.2061%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,003,009 samples, 0.13%)</title><rect x="82.9561%" y="405" width="0.1332%" height="15" fill="rgb(238,103,29)" fg:x="624874607" fg:w="1003009"/><text x="83.2061%" y="415.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.13%)</title><rect x="82.9561%" y="389" width="0.1332%" height="15" fill="rgb(233,195,47)" fg:x="624874607" fg:w="1003009"/><text x="83.2061%" y="399.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.13%)</title><rect x="83.0892%" y="405" width="0.1332%" height="15" fill="rgb(246,218,30)" fg:x="625877616" fg:w="1003009"/><text x="83.3392%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.13%)</title><rect x="83.0892%" y="389" width="0.1332%" height="15" fill="rgb(219,145,47)" fg:x="625877616" fg:w="1003009"/><text x="83.3392%" y="399.50"></text></g><g><title>chlang::tree_evaluator::eval (620,862,571 samples, 82.42%)</title><rect x="0.9321%" y="501" width="82.4234%" height="15" fill="rgb(243,12,26)" fg:x="7021063" fg:w="620862571"/><text x="1.1821%" y="511.50">chlang::tree_evaluator::eval</text></g><g><title>chlang::board::Board::get_game_state (620,862,571 samples, 82.42%)</title><rect x="0.9321%" y="485" width="82.4234%" height="15" fill="rgb(214,87,16)" fg:x="7021063" fg:w="620862571"/><text x="1.1821%" y="495.50">chlang::board::Board::get_game_state</text></g><g><title>chlang::board::Board::get_valid_moves (326,980,934 samples, 43.41%)</title><rect x="39.9467%" y="469" width="43.4088%" height="15" fill="rgb(208,99,42)" fg:x="300902700" fg:w="326980934"/><text x="40.1967%" y="479.50">chlang::board::Board::get_valid_moves</text></g><g><title>chlang::board::Board::get_pseudo_legal_moves (11,033,099 samples, 1.46%)</title><rect x="81.8908%" y="453" width="1.4647%" height="15" fill="rgb(253,99,2)" fg:x="616850535" fg:w="11033099"/><text x="82.1408%" y="463.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (11,033,099 samples, 1.46%)</title><rect x="81.8908%" y="437" width="1.4647%" height="15" fill="rgb(220,168,23)" fg:x="616850535" fg:w="11033099"/><text x="82.1408%" y="447.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (2,006,018 samples, 0.27%)</title><rect x="83.0892%" y="421" width="0.2663%" height="15" fill="rgb(242,38,24)" fg:x="625877616" fg:w="2006018"/><text x="83.3392%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.13%)</title><rect x="83.2224%" y="405" width="0.1332%" height="15" fill="rgb(225,182,9)" fg:x="626880625" fg:w="1003009"/><text x="83.4724%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.13%)</title><rect x="83.2224%" y="389" width="0.1332%" height="15" fill="rgb(243,178,37)" fg:x="626880625" fg:w="1003009"/><text x="83.4724%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.13%)</title><rect x="83.2224%" y="373" width="0.1332%" height="15" fill="rgb(232,139,19)" fg:x="626880625" fg:w="1003009"/><text x="83.4724%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.13%)</title><rect x="83.2224%" y="357" width="0.1332%" height="15" fill="rgb(225,201,24)" fg:x="626880625" fg:w="1003009"/><text x="83.4724%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.13%)</title><rect x="83.2224%" y="341" width="0.1332%" height="15" fill="rgb(221,47,46)" fg:x="626880625" fg:w="1003009"/><text x="83.4724%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.13%)</title><rect x="83.2224%" y="325" width="0.1332%" height="15" fill="rgb(249,23,13)" fg:x="626880625" fg:w="1003009"/><text x="83.4724%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.13%)</title><rect x="83.2224%" y="309" width="0.1332%" height="15" fill="rgb(219,9,5)" fg:x="626880625" fg:w="1003009"/><text x="83.4724%" y="319.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.13%)</title><rect x="83.2224%" y="293" width="0.1332%" height="15" fill="rgb(254,171,16)" fg:x="626880625" fg:w="1003009"/><text x="83.4724%" y="303.50"></text></g><g><title>tcache_get (1,003,009 samples, 0.13%)</title><rect x="83.2224%" y="277" width="0.1332%" height="15" fill="rgb(230,171,20)" fg:x="626880625" fg:w="1003009"/><text x="83.4724%" y="287.50"></text></g><g><title>chlang::board::Board::piece_type (1,003,009 samples, 0.13%)</title><rect x="83.3555%" y="485" width="0.1332%" height="15" fill="rgb(210,71,41)" fg:x="627883634" fg:w="1003009"/><text x="83.6055%" y="495.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.13%)</title><rect x="83.3555%" y="469" width="0.1332%" height="15" fill="rgb(206,173,20)" fg:x="627883634" fg:w="1003009"/><text x="83.6055%" y="479.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.13%)</title><rect x="83.3555%" y="453" width="0.1332%" height="15" fill="rgb(233,88,34)" fg:x="627883634" fg:w="1003009"/><text x="83.6055%" y="463.50"></text></g><g><title>chlang::board::Board::key (1,003,009 samples, 0.13%)</title><rect x="83.4887%" y="485" width="0.1332%" height="15" fill="rgb(223,209,46)" fg:x="628886643" fg:w="1003009"/><text x="83.7387%" y="495.50"></text></g><g><title>__rust_dealloc (1,003,009 samples, 0.13%)</title><rect x="83.6218%" y="325" width="0.1332%" height="15" fill="rgb(250,43,18)" fg:x="629889652" fg:w="1003009"/><text x="83.8718%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (2,006,018 samples, 0.27%)</title><rect x="83.6218%" y="453" width="0.2663%" height="15" fill="rgb(208,13,10)" fg:x="629889652" fg:w="2006018"/><text x="83.8718%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,006,018 samples, 0.27%)</title><rect x="83.6218%" y="437" width="0.2663%" height="15" fill="rgb(212,200,36)" fg:x="629889652" fg:w="2006018"/><text x="83.8718%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (2,006,018 samples, 0.27%)</title><rect x="83.6218%" y="421" width="0.2663%" height="15" fill="rgb(225,90,30)" fg:x="629889652" fg:w="2006018"/><text x="83.8718%" y="431.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,006,018 samples, 0.27%)</title><rect x="83.6218%" y="405" width="0.2663%" height="15" fill="rgb(236,182,39)" fg:x="629889652" fg:w="2006018"/><text x="83.8718%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (2,006,018 samples, 0.27%)</title><rect x="83.6218%" y="389" width="0.2663%" height="15" fill="rgb(212,144,35)" fg:x="629889652" fg:w="2006018"/><text x="83.8718%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,006,018 samples, 0.27%)</title><rect x="83.6218%" y="373" width="0.2663%" height="15" fill="rgb(228,63,44)" fg:x="629889652" fg:w="2006018"/><text x="83.8718%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,006,018 samples, 0.27%)</title><rect x="83.6218%" y="357" width="0.2663%" height="15" fill="rgb(228,109,6)" fg:x="629889652" fg:w="2006018"/><text x="83.8718%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (2,006,018 samples, 0.27%)</title><rect x="83.6218%" y="341" width="0.2663%" height="15" fill="rgb(238,117,24)" fg:x="629889652" fg:w="2006018"/><text x="83.8718%" y="351.50"></text></g><g><title>__GI___libc_free (1,003,009 samples, 0.13%)</title><rect x="83.7550%" y="325" width="0.1332%" height="15" fill="rgb(242,26,26)" fg:x="630892661" fg:w="1003009"/><text x="84.0050%" y="335.50"></text></g><g><title>_int_free (1,003,009 samples, 0.13%)</title><rect x="83.7550%" y="309" width="0.1332%" height="15" fill="rgb(221,92,48)" fg:x="630892661" fg:w="1003009"/><text x="84.0050%" y="319.50"></text></g><g><title>chlang::board::Position::bitboard (4,012,036 samples, 0.53%)</title><rect x="83.8881%" y="437" width="0.5326%" height="15" fill="rgb(209,209,32)" fg:x="631895670" fg:w="4012036"/><text x="84.1381%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (4,012,036 samples, 0.53%)</title><rect x="83.8881%" y="421" width="0.5326%" height="15" fill="rgb(221,70,22)" fg:x="631895670" fg:w="4012036"/><text x="84.1381%" y="431.50"></text></g><g><title>chlang::board::Board::piece_type (5,015,045 samples, 0.67%)</title><rect x="83.8881%" y="453" width="0.6658%" height="15" fill="rgb(248,145,5)" fg:x="631895670" fg:w="5015045"/><text x="84.1381%" y="463.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (1,003,009 samples, 0.13%)</title><rect x="84.5539%" y="453" width="0.1332%" height="15" fill="rgb(226,116,26)" fg:x="636910715" fg:w="1003009"/><text x="84.8039%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.13%)</title><rect x="84.5539%" y="437" width="0.1332%" height="15" fill="rgb(244,5,17)" fg:x="636910715" fg:w="1003009"/><text x="84.8039%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.13%)</title><rect x="84.5539%" y="421" width="0.1332%" height="15" fill="rgb(252,159,33)" fg:x="636910715" fg:w="1003009"/><text x="84.8039%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.13%)</title><rect x="84.5539%" y="405" width="0.1332%" height="15" fill="rgb(206,71,0)" fg:x="636910715" fg:w="1003009"/><text x="84.8039%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.13%)</title><rect x="84.5539%" y="389" width="0.1332%" height="15" fill="rgb(233,118,54)" fg:x="636910715" fg:w="1003009"/><text x="84.8039%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.13%)</title><rect x="84.5539%" y="373" width="0.1332%" height="15" fill="rgb(234,83,48)" fg:x="636910715" fg:w="1003009"/><text x="84.8039%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.13%)</title><rect x="84.5539%" y="357" width="0.1332%" height="15" fill="rgb(228,3,54)" fg:x="636910715" fg:w="1003009"/><text x="84.8039%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.13%)</title><rect x="84.5539%" y="341" width="0.1332%" height="15" fill="rgb(226,155,13)" fg:x="636910715" fg:w="1003009"/><text x="84.8039%" y="351.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.13%)</title><rect x="84.5539%" y="325" width="0.1332%" height="15" fill="rgb(241,28,37)" fg:x="636910715" fg:w="1003009"/><text x="84.8039%" y="335.50"></text></g><g><title>chlang::cmove::Move::new (1,003,009 samples, 0.13%)</title><rect x="84.6871%" y="437" width="0.1332%" height="15" fill="rgb(233,93,10)" fg:x="637913724" fg:w="1003009"/><text x="84.9371%" y="447.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (2,006,018 samples, 0.27%)</title><rect x="84.6871%" y="453" width="0.2663%" height="15" fill="rgb(225,113,19)" fg:x="637913724" fg:w="2006018"/><text x="84.9371%" y="463.50"></text></g><g><title>chlang::board::Board::is_valid (11,033,099 samples, 1.46%)</title><rect x="83.6218%" y="485" width="1.4647%" height="15" fill="rgb(241,2,18)" fg:x="629889652" fg:w="11033099"/><text x="83.8718%" y="495.50"></text></g><g><title>chlang::board::Board::attacked_by_color (11,033,099 samples, 1.46%)</title><rect x="83.6218%" y="469" width="1.4647%" height="15" fill="rgb(228,207,21)" fg:x="629889652" fg:w="11033099"/><text x="83.8718%" y="479.50"></text></g><g><title>__rust_dealloc (1,003,009 samples, 0.13%)</title><rect x="85.0866%" y="373" width="0.1332%" height="15" fill="rgb(213,211,35)" fg:x="640922751" fg:w="1003009"/><text x="85.3366%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (2,006,018 samples, 0.27%)</title><rect x="85.0866%" y="469" width="0.2663%" height="15" fill="rgb(209,83,10)" fg:x="640922751" fg:w="2006018"/><text x="85.3366%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (2,006,018 samples, 0.27%)</title><rect x="85.0866%" y="453" width="0.2663%" height="15" fill="rgb(209,164,1)" fg:x="640922751" fg:w="2006018"/><text x="85.3366%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (2,006,018 samples, 0.27%)</title><rect x="85.0866%" y="437" width="0.2663%" height="15" fill="rgb(213,184,43)" fg:x="640922751" fg:w="2006018"/><text x="85.3366%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,006,018 samples, 0.27%)</title><rect x="85.0866%" y="421" width="0.2663%" height="15" fill="rgb(231,61,34)" fg:x="640922751" fg:w="2006018"/><text x="85.3366%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,006,018 samples, 0.27%)</title><rect x="85.0866%" y="405" width="0.2663%" height="15" fill="rgb(235,75,3)" fg:x="640922751" fg:w="2006018"/><text x="85.3366%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (2,006,018 samples, 0.27%)</title><rect x="85.0866%" y="389" width="0.2663%" height="15" fill="rgb(220,106,47)" fg:x="640922751" fg:w="2006018"/><text x="85.3366%" y="399.50"></text></g><g><title>__GI___libc_free (1,003,009 samples, 0.13%)</title><rect x="85.2197%" y="373" width="0.1332%" height="15" fill="rgb(210,196,33)" fg:x="641925760" fg:w="1003009"/><text x="85.4697%" y="383.50"></text></g><g><title>_int_free (1,003,009 samples, 0.13%)</title><rect x="85.2197%" y="357" width="0.1332%" height="15" fill="rgb(229,154,42)" fg:x="641925760" fg:w="1003009"/><text x="85.4697%" y="367.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (1,003,009 samples, 0.13%)</title><rect x="85.3529%" y="469" width="0.1332%" height="15" fill="rgb(228,114,26)" fg:x="642928769" fg:w="1003009"/><text x="85.6029%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (1,003,009 samples, 0.13%)</title><rect x="85.3529%" y="453" width="0.1332%" height="15" fill="rgb(208,144,1)" fg:x="642928769" fg:w="1003009"/><text x="85.6029%" y="463.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (1,003,009 samples, 0.13%)</title><rect x="85.3529%" y="437" width="0.1332%" height="15" fill="rgb(239,112,37)" fg:x="642928769" fg:w="1003009"/><text x="85.6029%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1,003,009 samples, 0.13%)</title><rect x="85.3529%" y="421" width="0.1332%" height="15" fill="rgb(210,96,50)" fg:x="642928769" fg:w="1003009"/><text x="85.6029%" y="431.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1,003,009 samples, 0.13%)</title><rect x="85.3529%" y="405" width="0.1332%" height="15" fill="rgb(222,178,2)" fg:x="642928769" fg:w="1003009"/><text x="85.6029%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,003,009 samples, 0.13%)</title><rect x="85.3529%" y="389" width="0.1332%" height="15" fill="rgb(226,74,18)" fg:x="642928769" fg:w="1003009"/><text x="85.6029%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,003,009 samples, 0.13%)</title><rect x="85.3529%" y="373" width="0.1332%" height="15" fill="rgb(225,67,54)" fg:x="642928769" fg:w="1003009"/><text x="85.6029%" y="383.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (1,003,009 samples, 0.13%)</title><rect x="85.4860%" y="469" width="0.1332%" height="15" fill="rgb(251,92,32)" fg:x="643931778" fg:w="1003009"/><text x="85.7360%" y="479.50"></text></g><g><title>chlang::board::Board::attacked_by_color (1,003,009 samples, 0.13%)</title><rect x="85.4860%" y="453" width="0.1332%" height="15" fill="rgb(228,149,22)" fg:x="643931778" fg:w="1003009"/><text x="85.7360%" y="463.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (1,003,009 samples, 0.13%)</title><rect x="85.4860%" y="437" width="0.1332%" height="15" fill="rgb(243,54,13)" fg:x="643931778" fg:w="1003009"/><text x="85.7360%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.13%)</title><rect x="85.4860%" y="421" width="0.1332%" height="15" fill="rgb(243,180,28)" fg:x="643931778" fg:w="1003009"/><text x="85.7360%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.13%)</title><rect x="85.4860%" y="405" width="0.1332%" height="15" fill="rgb(208,167,24)" fg:x="643931778" fg:w="1003009"/><text x="85.7360%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.13%)</title><rect x="85.4860%" y="389" width="0.1332%" height="15" fill="rgb(245,73,45)" fg:x="643931778" fg:w="1003009"/><text x="85.7360%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.13%)</title><rect x="85.4860%" y="373" width="0.1332%" height="15" fill="rgb(237,203,48)" fg:x="643931778" fg:w="1003009"/><text x="85.7360%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.13%)</title><rect x="85.4860%" y="357" width="0.1332%" height="15" fill="rgb(211,197,16)" fg:x="643931778" fg:w="1003009"/><text x="85.7360%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.13%)</title><rect x="85.4860%" y="341" width="0.1332%" height="15" fill="rgb(243,99,51)" fg:x="643931778" fg:w="1003009"/><text x="85.7360%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.13%)</title><rect x="85.4860%" y="325" width="0.1332%" height="15" fill="rgb(215,123,29)" fg:x="643931778" fg:w="1003009"/><text x="85.7360%" y="335.50"></text></g><g><title>__rust_alloc (1,003,009 samples, 0.13%)</title><rect x="85.4860%" y="309" width="0.1332%" height="15" fill="rgb(239,186,37)" fg:x="643931778" fg:w="1003009"/><text x="85.7360%" y="319.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (5,015,045 samples, 0.67%)</title><rect x="85.0866%" y="485" width="0.6658%" height="15" fill="rgb(252,136,39)" fg:x="640922751" fg:w="5015045"/><text x="85.3366%" y="495.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (1,003,009 samples, 0.13%)</title><rect x="85.6192%" y="469" width="0.1332%" height="15" fill="rgb(223,213,32)" fg:x="644934787" fg:w="1003009"/><text x="85.8692%" y="479.50"></text></g><g><title>chlang::board::Board::make_move (20,060,180 samples, 2.66%)</title><rect x="83.3555%" y="501" width="2.6631%" height="15" fill="rgb(233,115,5)" fg:x="627883634" fg:w="20060180"/><text x="83.6055%" y="511.50">ch..</text></g><g><title>chlang::board::Board::get_pseudo_legal_moves (1,003,009 samples, 0.13%)</title><rect x="86.0186%" y="501" width="0.1332%" height="15" fill="rgb(207,226,44)" fg:x="647943814" fg:w="1003009"/><text x="86.2686%" y="511.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (1,003,009 samples, 0.13%)</title><rect x="86.0186%" y="485" width="0.1332%" height="15" fill="rgb(208,126,0)" fg:x="647943814" fg:w="1003009"/><text x="86.2686%" y="495.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (1,003,009 samples, 0.13%)</title><rect x="86.0186%" y="469" width="0.1332%" height="15" fill="rgb(244,66,21)" fg:x="647943814" fg:w="1003009"/><text x="86.2686%" y="479.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&lt;&amp;i64&gt;&gt;::add (1,003,009 samples, 0.13%)</title><rect x="86.0186%" y="453" width="0.1332%" height="15" fill="rgb(222,97,12)" fg:x="647943814" fg:w="1003009"/><text x="86.2686%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (3,009,027 samples, 0.40%)</title><rect x="86.1518%" y="325" width="0.3995%" height="15" fill="rgb(219,213,19)" fg:x="648946823" fg:w="3009027"/><text x="86.4018%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3,009,027 samples, 0.40%)</title><rect x="86.1518%" y="309" width="0.3995%" height="15" fill="rgb(252,169,30)" fg:x="648946823" fg:w="3009027"/><text x="86.4018%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3,009,027 samples, 0.40%)</title><rect x="86.1518%" y="293" width="0.3995%" height="15" fill="rgb(206,32,51)" fg:x="648946823" fg:w="3009027"/><text x="86.4018%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,009,027 samples, 0.40%)</title><rect x="86.1518%" y="277" width="0.3995%" height="15" fill="rgb(250,172,42)" fg:x="648946823" fg:w="3009027"/><text x="86.4018%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3,009,027 samples, 0.40%)</title><rect x="86.1518%" y="261" width="0.3995%" height="15" fill="rgb(209,34,43)" fg:x="648946823" fg:w="3009027"/><text x="86.4018%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,009,027 samples, 0.40%)</title><rect x="86.1518%" y="245" width="0.3995%" height="15" fill="rgb(223,11,35)" fg:x="648946823" fg:w="3009027"/><text x="86.4018%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2,006,018 samples, 0.27%)</title><rect x="86.5513%" y="245" width="0.2663%" height="15" fill="rgb(251,219,26)" fg:x="651955850" fg:w="2006018"/><text x="86.8013%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,006,018 samples, 0.27%)</title><rect x="86.5513%" y="229" width="0.2663%" height="15" fill="rgb(231,119,3)" fg:x="651955850" fg:w="2006018"/><text x="86.8013%" y="239.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (4,012,036 samples, 0.53%)</title><rect x="86.5513%" y="325" width="0.5326%" height="15" fill="rgb(216,97,11)" fg:x="651955850" fg:w="4012036"/><text x="86.8013%" y="335.50"></text></g><g><title>core::hash::Hasher::write_usize (4,012,036 samples, 0.53%)</title><rect x="86.5513%" y="309" width="0.5326%" height="15" fill="rgb(223,59,9)" fg:x="651955850" fg:w="4012036"/><text x="86.8013%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4,012,036 samples, 0.53%)</title><rect x="86.5513%" y="293" width="0.5326%" height="15" fill="rgb(233,93,31)" fg:x="651955850" fg:w="4012036"/><text x="86.8013%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4,012,036 samples, 0.53%)</title><rect x="86.5513%" y="277" width="0.5326%" height="15" fill="rgb(239,81,33)" fg:x="651955850" fg:w="4012036"/><text x="86.8013%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,012,036 samples, 0.53%)</title><rect x="86.5513%" y="261" width="0.5326%" height="15" fill="rgb(213,120,34)" fg:x="651955850" fg:w="4012036"/><text x="86.8013%" y="271.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (9,027,081 samples, 1.20%)</title><rect x="86.1518%" y="357" width="1.1984%" height="15" fill="rgb(243,49,53)" fg:x="648946823" fg:w="9027081"/><text x="86.4018%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (9,027,081 samples, 1.20%)</title><rect x="86.1518%" y="341" width="1.1984%" height="15" fill="rgb(247,216,33)" fg:x="648946823" fg:w="9027081"/><text x="86.4018%" y="351.50"></text></g><g><title>core::hash::Hash::hash_slice (2,006,018 samples, 0.27%)</title><rect x="87.0839%" y="325" width="0.2663%" height="15" fill="rgb(226,26,14)" fg:x="655967886" fg:w="2006018"/><text x="87.3339%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10,030,090 samples, 1.33%)</title><rect x="86.1518%" y="405" width="1.3316%" height="15" fill="rgb(215,49,53)" fg:x="648946823" fg:w="10030090"/><text x="86.4018%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10,030,090 samples, 1.33%)</title><rect x="86.1518%" y="389" width="1.3316%" height="15" fill="rgb(245,162,40)" fg:x="648946823" fg:w="10030090"/><text x="86.4018%" y="399.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (10,030,090 samples, 1.33%)</title><rect x="86.1518%" y="373" width="1.3316%" height="15" fill="rgb(229,68,17)" fg:x="648946823" fg:w="10030090"/><text x="86.4018%" y="383.50"></text></g><g><title>&lt;chlang::board::Player as core::hash::Hash&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="87.3502%" y="357" width="0.1332%" height="15" fill="rgb(213,182,10)" fg:x="657973904" fg:w="1003009"/><text x="87.6002%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="87.3502%" y="341" width="0.1332%" height="15" fill="rgb(245,125,30)" fg:x="657973904" fg:w="1003009"/><text x="87.6002%" y="351.50"></text></g><g><title>core::hash::Hasher::write_isize (1,003,009 samples, 0.13%)</title><rect x="87.3502%" y="325" width="0.1332%" height="15" fill="rgb(232,202,2)" fg:x="657973904" fg:w="1003009"/><text x="87.6002%" y="335.50"></text></g><g><title>core::hash::Hasher::write_usize (1,003,009 samples, 0.13%)</title><rect x="87.3502%" y="309" width="0.1332%" height="15" fill="rgb(237,140,51)" fg:x="657973904" fg:w="1003009"/><text x="87.6002%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="87.3502%" y="293" width="0.1332%" height="15" fill="rgb(236,157,25)" fg:x="657973904" fg:w="1003009"/><text x="87.6002%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="87.3502%" y="277" width="0.1332%" height="15" fill="rgb(219,209,0)" fg:x="657973904" fg:w="1003009"/><text x="87.6002%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="87.3502%" y="261" width="0.1332%" height="15" fill="rgb(240,116,54)" fg:x="657973904" fg:w="1003009"/><text x="87.6002%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,003,009 samples, 0.13%)</title><rect x="87.3502%" y="245" width="0.1332%" height="15" fill="rgb(216,10,36)" fg:x="657973904" fg:w="1003009"/><text x="87.6002%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.13%)</title><rect x="87.4834%" y="341" width="0.1332%" height="15" fill="rgb(222,72,44)" fg:x="658976913" fg:w="1003009"/><text x="87.7334%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,006,018 samples, 0.27%)</title><rect x="87.4834%" y="357" width="0.2663%" height="15" fill="rgb(232,159,9)" fg:x="658976913" fg:w="2006018"/><text x="87.7334%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (14,042,126 samples, 1.86%)</title><rect x="86.1518%" y="437" width="1.8642%" height="15" fill="rgb(210,39,32)" fg:x="648946823" fg:w="14042126"/><text x="86.4018%" y="447.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (14,042,126 samples, 1.86%)</title><rect x="86.1518%" y="421" width="1.8642%" height="15" fill="rgb(216,194,45)" fg:x="648946823" fg:w="14042126"/><text x="86.4018%" y="431.50">c..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (4,012,036 samples, 0.53%)</title><rect x="87.4834%" y="405" width="0.5326%" height="15" fill="rgb(218,18,35)" fg:x="658976913" fg:w="4012036"/><text x="87.7334%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4,012,036 samples, 0.53%)</title><rect x="87.4834%" y="389" width="0.5326%" height="15" fill="rgb(207,83,51)" fg:x="658976913" fg:w="4012036"/><text x="87.7334%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4,012,036 samples, 0.53%)</title><rect x="87.4834%" y="373" width="0.5326%" height="15" fill="rgb(225,63,43)" fg:x="658976913" fg:w="4012036"/><text x="87.7334%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1,003,009 samples, 0.13%)</title><rect x="88.0160%" y="357" width="0.1332%" height="15" fill="rgb(207,57,36)" fg:x="662988949" fg:w="1003009"/><text x="88.2660%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1,003,009 samples, 0.13%)</title><rect x="88.0160%" y="341" width="0.1332%" height="15" fill="rgb(216,99,33)" fg:x="662988949" fg:w="1003009"/><text x="88.2660%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1,003,009 samples, 0.13%)</title><rect x="88.0160%" y="325" width="0.1332%" height="15" fill="rgb(225,42,16)" fg:x="662988949" fg:w="1003009"/><text x="88.2660%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1,003,009 samples, 0.13%)</title><rect x="88.0160%" y="309" width="0.1332%" height="15" fill="rgb(220,201,45)" fg:x="662988949" fg:w="1003009"/><text x="88.2660%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,003,009 samples, 0.13%)</title><rect x="88.1491%" y="149" width="0.1332%" height="15" fill="rgb(225,33,4)" fg:x="663991958" fg:w="1003009"/><text x="88.3991%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2,006,018 samples, 0.27%)</title><rect x="88.1491%" y="165" width="0.2663%" height="15" fill="rgb(224,33,50)" fg:x="663991958" fg:w="2006018"/><text x="88.3991%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (3,009,027 samples, 0.40%)</title><rect x="88.1491%" y="245" width="0.3995%" height="15" fill="rgb(246,198,51)" fg:x="663991958" fg:w="3009027"/><text x="88.3991%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u64 (3,009,027 samples, 0.40%)</title><rect x="88.1491%" y="229" width="0.3995%" height="15" fill="rgb(205,22,4)" fg:x="663991958" fg:w="3009027"/><text x="88.3991%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3,009,027 samples, 0.40%)</title><rect x="88.1491%" y="213" width="0.3995%" height="15" fill="rgb(206,3,8)" fg:x="663991958" fg:w="3009027"/><text x="88.3991%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3,009,027 samples, 0.40%)</title><rect x="88.1491%" y="197" width="0.3995%" height="15" fill="rgb(251,23,15)" fg:x="663991958" fg:w="3009027"/><text x="88.3991%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,009,027 samples, 0.40%)</title><rect x="88.1491%" y="181" width="0.3995%" height="15" fill="rgb(252,88,28)" fg:x="663991958" fg:w="3009027"/><text x="88.3991%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,003,009 samples, 0.13%)</title><rect x="88.5486%" y="149" width="0.1332%" height="15" fill="rgb(212,127,14)" fg:x="667000985" fg:w="1003009"/><text x="88.7986%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.13%)</title><rect x="88.5486%" y="133" width="0.1332%" height="15" fill="rgb(247,145,37)" fg:x="667000985" fg:w="1003009"/><text x="88.7986%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (2,006,018 samples, 0.27%)</title><rect x="88.5486%" y="213" width="0.2663%" height="15" fill="rgb(209,117,53)" fg:x="667000985" fg:w="2006018"/><text x="88.7986%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2,006,018 samples, 0.27%)</title><rect x="88.5486%" y="197" width="0.2663%" height="15" fill="rgb(212,90,42)" fg:x="667000985" fg:w="2006018"/><text x="88.7986%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2,006,018 samples, 0.27%)</title><rect x="88.5486%" y="181" width="0.2663%" height="15" fill="rgb(218,164,37)" fg:x="667000985" fg:w="2006018"/><text x="88.7986%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,006,018 samples, 0.27%)</title><rect x="88.5486%" y="165" width="0.2663%" height="15" fill="rgb(246,65,34)" fg:x="667000985" fg:w="2006018"/><text x="88.7986%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,003,009 samples, 0.13%)</title><rect x="88.8149%" y="117" width="0.1332%" height="15" fill="rgb(231,100,33)" fg:x="669007003" fg:w="1003009"/><text x="89.0649%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,006,018 samples, 0.27%)</title><rect x="88.9481%" y="117" width="0.2663%" height="15" fill="rgb(228,126,14)" fg:x="670010012" fg:w="2006018"/><text x="89.1981%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4,012,036 samples, 0.53%)</title><rect x="88.8149%" y="133" width="0.5326%" height="15" fill="rgb(215,173,21)" fg:x="669007003" fg:w="4012036"/><text x="89.0649%" y="143.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (5,015,045 samples, 0.67%)</title><rect x="88.8149%" y="213" width="0.6658%" height="15" fill="rgb(210,6,40)" fg:x="669007003" fg:w="5015045"/><text x="89.0649%" y="223.50"></text></g><g><title>core::hash::Hasher::write_usize (5,015,045 samples, 0.67%)</title><rect x="88.8149%" y="197" width="0.6658%" height="15" fill="rgb(212,48,18)" fg:x="669007003" fg:w="5015045"/><text x="89.0649%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5,015,045 samples, 0.67%)</title><rect x="88.8149%" y="181" width="0.6658%" height="15" fill="rgb(230,214,11)" fg:x="669007003" fg:w="5015045"/><text x="89.0649%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5,015,045 samples, 0.67%)</title><rect x="88.8149%" y="165" width="0.6658%" height="15" fill="rgb(254,105,39)" fg:x="669007003" fg:w="5015045"/><text x="89.0649%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,015,045 samples, 0.67%)</title><rect x="88.8149%" y="149" width="0.6658%" height="15" fill="rgb(245,158,5)" fg:x="669007003" fg:w="5015045"/><text x="89.0649%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for bool&gt;::hash (3,009,027 samples, 0.40%)</title><rect x="89.4807%" y="197" width="0.3995%" height="15" fill="rgb(249,208,11)" fg:x="674022048" fg:w="3009027"/><text x="89.7307%" y="207.50"></text></g><g><title>core::hash::Hasher::write_u8 (3,009,027 samples, 0.40%)</title><rect x="89.4807%" y="181" width="0.3995%" height="15" fill="rgb(210,39,28)" fg:x="674022048" fg:w="3009027"/><text x="89.7307%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3,009,027 samples, 0.40%)</title><rect x="89.4807%" y="165" width="0.3995%" height="15" fill="rgb(211,56,53)" fg:x="674022048" fg:w="3009027"/><text x="89.7307%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3,009,027 samples, 0.40%)</title><rect x="89.4807%" y="149" width="0.3995%" height="15" fill="rgb(226,201,30)" fg:x="674022048" fg:w="3009027"/><text x="89.7307%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,009,027 samples, 0.40%)</title><rect x="89.4807%" y="133" width="0.3995%" height="15" fill="rgb(239,101,34)" fg:x="674022048" fg:w="3009027"/><text x="89.7307%" y="143.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (11,033,099 samples, 1.46%)</title><rect x="88.5486%" y="245" width="1.4647%" height="15" fill="rgb(226,209,5)" fg:x="667000985" fg:w="11033099"/><text x="88.7986%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (11,033,099 samples, 1.46%)</title><rect x="88.5486%" y="229" width="1.4647%" height="15" fill="rgb(250,105,47)" fg:x="667000985" fg:w="11033099"/><text x="88.7986%" y="239.50"></text></g><g><title>core::hash::Hash::hash_slice (4,012,036 samples, 0.53%)</title><rect x="89.4807%" y="213" width="0.5326%" height="15" fill="rgb(230,72,3)" fg:x="674022048" fg:w="4012036"/><text x="89.7307%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (16,048,144 samples, 2.13%)</title><rect x="88.0160%" y="437" width="2.1305%" height="15" fill="rgb(232,218,39)" fg:x="662988949" fg:w="16048144"/><text x="88.2660%" y="447.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (16,048,144 samples, 2.13%)</title><rect x="88.0160%" y="421" width="2.1305%" height="15" fill="rgb(248,166,6)" fg:x="662988949" fg:w="16048144"/><text x="88.2660%" y="431.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (16,048,144 samples, 2.13%)</title><rect x="88.0160%" y="405" width="2.1305%" height="15" fill="rgb(247,89,20)" fg:x="662988949" fg:w="16048144"/><text x="88.2660%" y="415.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (16,048,144 samples, 2.13%)</title><rect x="88.0160%" y="389" width="2.1305%" height="15" fill="rgb(248,130,54)" fg:x="662988949" fg:w="16048144"/><text x="88.2660%" y="399.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (16,048,144 samples, 2.13%)</title><rect x="88.0160%" y="373" width="2.1305%" height="15" fill="rgb(234,196,4)" fg:x="662988949" fg:w="16048144"/><text x="88.2660%" y="383.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (15,045,135 samples, 2.00%)</title><rect x="88.1491%" y="357" width="1.9973%" height="15" fill="rgb(250,143,31)" fg:x="663991958" fg:w="15045135"/><text x="88.3991%" y="367.50">h..</text></g><g><title>hashbrown::map::make_hasher::{{closure}} (15,045,135 samples, 2.00%)</title><rect x="88.1491%" y="341" width="1.9973%" height="15" fill="rgb(211,110,34)" fg:x="663991958" fg:w="15045135"/><text x="88.3991%" y="351.50">h..</text></g><g><title>hashbrown::map::make_hash (15,045,135 samples, 2.00%)</title><rect x="88.1491%" y="325" width="1.9973%" height="15" fill="rgb(215,124,48)" fg:x="663991958" fg:w="15045135"/><text x="88.3991%" y="335.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (15,045,135 samples, 2.00%)</title><rect x="88.1491%" y="309" width="1.9973%" height="15" fill="rgb(216,46,13)" fg:x="663991958" fg:w="15045135"/><text x="88.3991%" y="319.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (15,045,135 samples, 2.00%)</title><rect x="88.1491%" y="293" width="1.9973%" height="15" fill="rgb(205,184,25)" fg:x="663991958" fg:w="15045135"/><text x="88.3991%" y="303.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (15,045,135 samples, 2.00%)</title><rect x="88.1491%" y="277" width="1.9973%" height="15" fill="rgb(228,1,10)" fg:x="663991958" fg:w="15045135"/><text x="88.3991%" y="287.50">c..</text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (15,045,135 samples, 2.00%)</title><rect x="88.1491%" y="261" width="1.9973%" height="15" fill="rgb(213,116,27)" fg:x="663991958" fg:w="15045135"/><text x="88.3991%" y="271.50">&lt;..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="90.0133%" y="245" width="0.1332%" height="15" fill="rgb(241,95,50)" fg:x="678034084" fg:w="1003009"/><text x="90.2633%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="90.0133%" y="229" width="0.1332%" height="15" fill="rgb(238,48,32)" fg:x="678034084" fg:w="1003009"/><text x="90.2633%" y="239.50"></text></g><g><title>core::hash::Hasher::write_isize (1,003,009 samples, 0.13%)</title><rect x="90.0133%" y="213" width="0.1332%" height="15" fill="rgb(235,113,49)" fg:x="678034084" fg:w="1003009"/><text x="90.2633%" y="223.50"></text></g><g><title>core::hash::Hasher::write_usize (1,003,009 samples, 0.13%)</title><rect x="90.0133%" y="197" width="0.1332%" height="15" fill="rgb(205,127,43)" fg:x="678034084" fg:w="1003009"/><text x="90.2633%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1,003,009 samples, 0.13%)</title><rect x="90.0133%" y="181" width="0.1332%" height="15" fill="rgb(250,162,2)" fg:x="678034084" fg:w="1003009"/><text x="90.2633%" y="191.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (31,093,279 samples, 4.13%)</title><rect x="86.1518%" y="469" width="4.1278%" height="15" fill="rgb(220,13,41)" fg:x="648946823" fg:w="31093279"/><text x="86.4018%" y="479.50">std:..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (31,093,279 samples, 4.13%)</title><rect x="86.1518%" y="453" width="4.1278%" height="15" fill="rgb(249,221,25)" fg:x="648946823" fg:w="31093279"/><text x="86.4018%" y="463.50">hash..</text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (1,003,009 samples, 0.13%)</title><rect x="90.2796%" y="469" width="0.1332%" height="15" fill="rgb(215,208,19)" fg:x="680040102" fg:w="1003009"/><text x="90.5296%" y="479.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (1,003,009 samples, 0.13%)</title><rect x="90.2796%" y="453" width="0.1332%" height="15" fill="rgb(236,175,2)" fg:x="680040102" fg:w="1003009"/><text x="90.5296%" y="463.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (1,003,009 samples, 0.13%)</title><rect x="90.2796%" y="437" width="0.1332%" height="15" fill="rgb(241,52,2)" fg:x="680040102" fg:w="1003009"/><text x="90.5296%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (1,003,009 samples, 0.13%)</title><rect x="90.2796%" y="421" width="0.1332%" height="15" fill="rgb(248,140,14)" fg:x="680040102" fg:w="1003009"/><text x="90.5296%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1,003,009 samples, 0.13%)</title><rect x="90.2796%" y="405" width="0.1332%" height="15" fill="rgb(253,22,42)" fg:x="680040102" fg:w="1003009"/><text x="90.5296%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1,003,009 samples, 0.13%)</title><rect x="90.2796%" y="389" width="0.1332%" height="15" fill="rgb(234,61,47)" fg:x="680040102" fg:w="1003009"/><text x="90.5296%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1,003,009 samples, 0.13%)</title><rect x="90.2796%" y="373" width="0.1332%" height="15" fill="rgb(208,226,15)" fg:x="680040102" fg:w="1003009"/><text x="90.5296%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1,003,009 samples, 0.13%)</title><rect x="90.4128%" y="405" width="0.1332%" height="15" fill="rgb(217,221,4)" fg:x="681043111" fg:w="1003009"/><text x="90.6628%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1,003,009 samples, 0.13%)</title><rect x="90.4128%" y="389" width="0.1332%" height="15" fill="rgb(212,174,34)" fg:x="681043111" fg:w="1003009"/><text x="90.6628%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,003,009 samples, 0.13%)</title><rect x="90.4128%" y="373" width="0.1332%" height="15" fill="rgb(253,83,4)" fg:x="681043111" fg:w="1003009"/><text x="90.6628%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1,003,009 samples, 0.13%)</title><rect x="90.4128%" y="357" width="0.1332%" height="15" fill="rgb(250,195,49)" fg:x="681043111" fg:w="1003009"/><text x="90.6628%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1,003,009 samples, 0.13%)</title><rect x="90.4128%" y="341" width="0.1332%" height="15" fill="rgb(241,192,25)" fg:x="681043111" fg:w="1003009"/><text x="90.6628%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (1,003,009 samples, 0.13%)</title><rect x="90.4128%" y="325" width="0.1332%" height="15" fill="rgb(208,124,10)" fg:x="681043111" fg:w="1003009"/><text x="90.6628%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1,003,009 samples, 0.13%)</title><rect x="90.4128%" y="309" width="0.1332%" height="15" fill="rgb(222,33,0)" fg:x="681043111" fg:w="1003009"/><text x="90.6628%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1,003,009 samples, 0.13%)</title><rect x="90.4128%" y="293" width="0.1332%" height="15" fill="rgb(234,209,28)" fg:x="681043111" fg:w="1003009"/><text x="90.6628%" y="303.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1,003,009 samples, 0.13%)</title><rect x="90.4128%" y="277" width="0.1332%" height="15" fill="rgb(224,11,23)" fg:x="681043111" fg:w="1003009"/><text x="90.6628%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.13%)</title><rect x="90.4128%" y="261" width="0.1332%" height="15" fill="rgb(232,99,1)" fg:x="681043111" fg:w="1003009"/><text x="90.6628%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.13%)</title><rect x="90.4128%" y="245" width="0.1332%" height="15" fill="rgb(237,95,45)" fg:x="681043111" fg:w="1003009"/><text x="90.6628%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.13%)</title><rect x="90.4128%" y="229" width="0.1332%" height="15" fill="rgb(208,109,11)" fg:x="681043111" fg:w="1003009"/><text x="90.6628%" y="239.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.13%)</title><rect x="90.4128%" y="213" width="0.1332%" height="15" fill="rgb(216,190,48)" fg:x="681043111" fg:w="1003009"/><text x="90.6628%" y="223.50"></text></g><g><title>tcache_get (1,003,009 samples, 0.13%)</title><rect x="90.4128%" y="197" width="0.1332%" height="15" fill="rgb(251,171,36)" fg:x="681043111" fg:w="1003009"/><text x="90.6628%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.13%)</title><rect x="90.5459%" y="69" width="0.1332%" height="15" fill="rgb(230,62,22)" fg:x="682046120" fg:w="1003009"/><text x="90.7959%" y="79.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (2,006,018 samples, 0.27%)</title><rect x="90.5459%" y="149" width="0.2663%" height="15" fill="rgb(225,114,35)" fg:x="682046120" fg:w="2006018"/><text x="90.7959%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2,006,018 samples, 0.27%)</title><rect x="90.5459%" y="133" width="0.2663%" height="15" fill="rgb(215,118,42)" fg:x="682046120" fg:w="2006018"/><text x="90.7959%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2,006,018 samples, 0.27%)</title><rect x="90.5459%" y="117" width="0.2663%" height="15" fill="rgb(243,119,21)" fg:x="682046120" fg:w="2006018"/><text x="90.7959%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,006,018 samples, 0.27%)</title><rect x="90.5459%" y="101" width="0.2663%" height="15" fill="rgb(252,177,53)" fg:x="682046120" fg:w="2006018"/><text x="90.7959%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2,006,018 samples, 0.27%)</title><rect x="90.5459%" y="85" width="0.2663%" height="15" fill="rgb(237,209,29)" fg:x="682046120" fg:w="2006018"/><text x="90.7959%" y="95.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V&gt; as core::convert::From&lt;[(K,V): N]&gt;&gt;::from (4,012,036 samples, 0.53%)</title><rect x="90.4128%" y="469" width="0.5326%" height="15" fill="rgb(212,65,23)" fg:x="681043111" fg:w="4012036"/><text x="90.6628%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4,012,036 samples, 0.53%)</title><rect x="90.4128%" y="453" width="0.5326%" height="15" fill="rgb(230,222,46)" fg:x="681043111" fg:w="4012036"/><text x="90.6628%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (4,012,036 samples, 0.53%)</title><rect x="90.4128%" y="437" width="0.5326%" height="15" fill="rgb(215,135,32)" fg:x="681043111" fg:w="4012036"/><text x="90.6628%" y="447.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (4,012,036 samples, 0.53%)</title><rect x="90.4128%" y="421" width="0.5326%" height="15" fill="rgb(246,101,22)" fg:x="681043111" fg:w="4012036"/><text x="90.6628%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3,009,027 samples, 0.40%)</title><rect x="90.5459%" y="405" width="0.3995%" height="15" fill="rgb(206,107,13)" fg:x="682046120" fg:w="3009027"/><text x="90.7959%" y="415.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,009,027 samples, 0.40%)</title><rect x="90.5459%" y="389" width="0.3995%" height="15" fill="rgb(250,100,44)" fg:x="682046120" fg:w="3009027"/><text x="90.7959%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,009,027 samples, 0.40%)</title><rect x="90.5459%" y="373" width="0.3995%" height="15" fill="rgb(231,147,38)" fg:x="682046120" fg:w="3009027"/><text x="90.7959%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,009,027 samples, 0.40%)</title><rect x="90.5459%" y="357" width="0.3995%" height="15" fill="rgb(229,8,40)" fg:x="682046120" fg:w="3009027"/><text x="90.7959%" y="367.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (3,009,027 samples, 0.40%)</title><rect x="90.5459%" y="341" width="0.3995%" height="15" fill="rgb(221,135,30)" fg:x="682046120" fg:w="3009027"/><text x="90.7959%" y="351.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (3,009,027 samples, 0.40%)</title><rect x="90.5459%" y="325" width="0.3995%" height="15" fill="rgb(249,193,18)" fg:x="682046120" fg:w="3009027"/><text x="90.7959%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3,009,027 samples, 0.40%)</title><rect x="90.5459%" y="309" width="0.3995%" height="15" fill="rgb(209,133,39)" fg:x="682046120" fg:w="3009027"/><text x="90.7959%" y="319.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (3,009,027 samples, 0.40%)</title><rect x="90.5459%" y="293" width="0.3995%" height="15" fill="rgb(232,100,14)" fg:x="682046120" fg:w="3009027"/><text x="90.7959%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,009,027 samples, 0.40%)</title><rect x="90.5459%" y="277" width="0.3995%" height="15" fill="rgb(224,185,1)" fg:x="682046120" fg:w="3009027"/><text x="90.7959%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (3,009,027 samples, 0.40%)</title><rect x="90.5459%" y="261" width="0.3995%" height="15" fill="rgb(223,139,8)" fg:x="682046120" fg:w="3009027"/><text x="90.7959%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3,009,027 samples, 0.40%)</title><rect x="90.5459%" y="245" width="0.3995%" height="15" fill="rgb(232,213,38)" fg:x="682046120" fg:w="3009027"/><text x="90.7959%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,009,027 samples, 0.40%)</title><rect x="90.5459%" y="229" width="0.3995%" height="15" fill="rgb(207,94,22)" fg:x="682046120" fg:w="3009027"/><text x="90.7959%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,009,027 samples, 0.40%)</title><rect x="90.5459%" y="213" width="0.3995%" height="15" fill="rgb(219,183,54)" fg:x="682046120" fg:w="3009027"/><text x="90.7959%" y="223.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (3,009,027 samples, 0.40%)</title><rect x="90.5459%" y="197" width="0.3995%" height="15" fill="rgb(216,185,54)" fg:x="682046120" fg:w="3009027"/><text x="90.7959%" y="207.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (3,009,027 samples, 0.40%)</title><rect x="90.5459%" y="181" width="0.3995%" height="15" fill="rgb(254,217,39)" fg:x="682046120" fg:w="3009027"/><text x="90.7959%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3,009,027 samples, 0.40%)</title><rect x="90.5459%" y="165" width="0.3995%" height="15" fill="rgb(240,178,23)" fg:x="682046120" fg:w="3009027"/><text x="90.7959%" y="175.50"></text></g><g><title>core::hash::Hash::hash_slice (1,003,009 samples, 0.13%)</title><rect x="90.8123%" y="149" width="0.1332%" height="15" fill="rgb(218,11,47)" fg:x="684052138" fg:w="1003009"/><text x="91.0623%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for bool&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="90.8123%" y="133" width="0.1332%" height="15" fill="rgb(218,51,51)" fg:x="684052138" fg:w="1003009"/><text x="91.0623%" y="143.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,003,009 samples, 0.13%)</title><rect x="90.8123%" y="117" width="0.1332%" height="15" fill="rgb(238,126,27)" fg:x="684052138" fg:w="1003009"/><text x="91.0623%" y="127.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="90.8123%" y="101" width="0.1332%" height="15" fill="rgb(249,202,22)" fg:x="684052138" fg:w="1003009"/><text x="91.0623%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="90.8123%" y="85" width="0.1332%" height="15" fill="rgb(254,195,49)" fg:x="684052138" fg:w="1003009"/><text x="91.0623%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="90.8123%" y="69" width="0.1332%" height="15" fill="rgb(208,123,14)" fg:x="684052138" fg:w="1003009"/><text x="91.0623%" y="79.50"></text></g><g><title>chlang::board::Board::is_threefold_rep (37,111,333 samples, 4.93%)</title><rect x="86.1518%" y="485" width="4.9268%" height="15" fill="rgb(224,200,8)" fg:x="648946823" fg:w="37111333"/><text x="86.4018%" y="495.50">chlang..</text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.13%)</title><rect x="91.0786%" y="453" width="0.1332%" height="15" fill="rgb(217,61,36)" fg:x="686058156" fg:w="1003009"/><text x="91.3286%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.13%)</title><rect x="91.0786%" y="437" width="0.1332%" height="15" fill="rgb(206,35,45)" fg:x="686058156" fg:w="1003009"/><text x="91.3286%" y="447.50"></text></g><g><title>chlang::board::Board::unmake_last (1,003,009 samples, 0.13%)</title><rect x="91.2117%" y="453" width="0.1332%" height="15" fill="rgb(217,65,33)" fg:x="687061165" fg:w="1003009"/><text x="91.4617%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (1,003,009 samples, 0.13%)</title><rect x="91.2117%" y="437" width="0.1332%" height="15" fill="rgb(222,158,48)" fg:x="687061165" fg:w="1003009"/><text x="91.4617%" y="447.50"></text></g><g><title>chlang::board::Position::bitboard (2,006,018 samples, 0.27%)</title><rect x="91.3449%" y="437" width="0.2663%" height="15" fill="rgb(254,2,54)" fg:x="688064174" fg:w="2006018"/><text x="91.5949%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (2,006,018 samples, 0.27%)</title><rect x="91.3449%" y="421" width="0.2663%" height="15" fill="rgb(250,143,38)" fg:x="688064174" fg:w="2006018"/><text x="91.5949%" y="431.50"></text></g><g><title>chlang::board::Board::piece_type (3,009,027 samples, 0.40%)</title><rect x="91.3449%" y="453" width="0.3995%" height="15" fill="rgb(248,25,0)" fg:x="688064174" fg:w="3009027"/><text x="91.5949%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (11,033,099 samples, 1.46%)</title><rect x="91.7443%" y="389" width="1.4647%" height="15" fill="rgb(206,152,27)" fg:x="691073201" fg:w="11033099"/><text x="91.9943%" y="399.50"></text></g><g><title>chlang::board::Position::bitboard (13,039,117 samples, 1.73%)</title><rect x="91.7443%" y="405" width="1.7310%" height="15" fill="rgb(240,77,30)" fg:x="691073201" fg:w="13039117"/><text x="91.9943%" y="415.50"></text></g><g><title>chlang::board::Board::piece_type (16,048,144 samples, 2.13%)</title><rect x="91.7443%" y="421" width="2.1305%" height="15" fill="rgb(231,5,3)" fg:x="691073201" fg:w="16048144"/><text x="91.9943%" y="431.50">c..</text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.13%)</title><rect x="93.8748%" y="405" width="0.1332%" height="15" fill="rgb(207,226,32)" fg:x="707121345" fg:w="1003009"/><text x="94.1248%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.13%)</title><rect x="93.8748%" y="389" width="0.1332%" height="15" fill="rgb(222,207,47)" fg:x="707121345" fg:w="1003009"/><text x="94.1248%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.13%)</title><rect x="94.0080%" y="341" width="0.1332%" height="15" fill="rgb(229,115,45)" fg:x="708124354" fg:w="1003009"/><text x="94.2580%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.13%)</title><rect x="94.0080%" y="325" width="0.1332%" height="15" fill="rgb(224,191,6)" fg:x="708124354" fg:w="1003009"/><text x="94.2580%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.13%)</title><rect x="94.0080%" y="309" width="0.1332%" height="15" fill="rgb(230,227,24)" fg:x="708124354" fg:w="1003009"/><text x="94.2580%" y="319.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.13%)</title><rect x="94.0080%" y="293" width="0.1332%" height="15" fill="rgb(228,80,19)" fg:x="708124354" fg:w="1003009"/><text x="94.2580%" y="303.50"></text></g><g><title>checked_request2size (1,003,009 samples, 0.13%)</title><rect x="94.0080%" y="277" width="0.1332%" height="15" fill="rgb(247,229,0)" fg:x="708124354" fg:w="1003009"/><text x="94.2580%" y="287.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (3,009,027 samples, 0.40%)</title><rect x="93.8748%" y="421" width="0.3995%" height="15" fill="rgb(237,194,15)" fg:x="707121345" fg:w="3009027"/><text x="94.1248%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,006,018 samples, 0.27%)</title><rect x="94.0080%" y="405" width="0.2663%" height="15" fill="rgb(219,203,20)" fg:x="708124354" fg:w="2006018"/><text x="94.2580%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.27%)</title><rect x="94.0080%" y="389" width="0.2663%" height="15" fill="rgb(234,128,8)" fg:x="708124354" fg:w="2006018"/><text x="94.2580%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.27%)</title><rect x="94.0080%" y="373" width="0.2663%" height="15" fill="rgb(248,202,8)" fg:x="708124354" fg:w="2006018"/><text x="94.2580%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2,006,018 samples, 0.27%)</title><rect x="94.0080%" y="357" width="0.2663%" height="15" fill="rgb(206,104,37)" fg:x="708124354" fg:w="2006018"/><text x="94.2580%" y="367.50"></text></g><g><title>__rust_dealloc (1,003,009 samples, 0.13%)</title><rect x="94.2743%" y="309" width="0.1332%" height="15" fill="rgb(223,8,27)" fg:x="710130372" fg:w="1003009"/><text x="94.5243%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (2,006,018 samples, 0.27%)</title><rect x="94.2743%" y="405" width="0.2663%" height="15" fill="rgb(216,217,28)" fg:x="710130372" fg:w="2006018"/><text x="94.5243%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (2,006,018 samples, 0.27%)</title><rect x="94.2743%" y="389" width="0.2663%" height="15" fill="rgb(249,199,1)" fg:x="710130372" fg:w="2006018"/><text x="94.5243%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (2,006,018 samples, 0.27%)</title><rect x="94.2743%" y="373" width="0.2663%" height="15" fill="rgb(240,85,17)" fg:x="710130372" fg:w="2006018"/><text x="94.5243%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,006,018 samples, 0.27%)</title><rect x="94.2743%" y="357" width="0.2663%" height="15" fill="rgb(206,108,45)" fg:x="710130372" fg:w="2006018"/><text x="94.5243%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,006,018 samples, 0.27%)</title><rect x="94.2743%" y="341" width="0.2663%" height="15" fill="rgb(245,210,41)" fg:x="710130372" fg:w="2006018"/><text x="94.5243%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (2,006,018 samples, 0.27%)</title><rect x="94.2743%" y="325" width="0.2663%" height="15" fill="rgb(206,13,37)" fg:x="710130372" fg:w="2006018"/><text x="94.5243%" y="335.50"></text></g><g><title>__GI___libc_free (1,003,009 samples, 0.13%)</title><rect x="94.4075%" y="309" width="0.1332%" height="15" fill="rgb(250,61,18)" fg:x="711133381" fg:w="1003009"/><text x="94.6575%" y="319.50"></text></g><g><title>_int_free (1,003,009 samples, 0.13%)</title><rect x="94.4075%" y="293" width="0.1332%" height="15" fill="rgb(235,172,48)" fg:x="711133381" fg:w="1003009"/><text x="94.6575%" y="303.50"></text></g><g><title>chlang::board::Position::bitboard (2,006,018 samples, 0.27%)</title><rect x="94.5406%" y="405" width="0.2663%" height="15" fill="rgb(249,201,17)" fg:x="712136390" fg:w="2006018"/><text x="94.7906%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (2,006,018 samples, 0.27%)</title><rect x="94.5406%" y="389" width="0.2663%" height="15" fill="rgb(219,208,6)" fg:x="712136390" fg:w="2006018"/><text x="94.7906%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (1,003,009 samples, 0.13%)</title><rect x="94.8069%" y="405" width="0.1332%" height="15" fill="rgb(248,31,23)" fg:x="714142408" fg:w="1003009"/><text x="95.0569%" y="415.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (1,003,009 samples, 0.13%)</title><rect x="94.8069%" y="389" width="0.1332%" height="15" fill="rgb(245,15,42)" fg:x="714142408" fg:w="1003009"/><text x="95.0569%" y="399.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (6,018,054 samples, 0.80%)</title><rect x="94.2743%" y="421" width="0.7989%" height="15" fill="rgb(222,217,39)" fg:x="710130372" fg:w="6018054"/><text x="94.5243%" y="431.50"></text></g><g><title>chlang::board::Position::bitboard (2,006,018 samples, 0.27%)</title><rect x="95.0732%" y="405" width="0.2663%" height="15" fill="rgb(210,219,27)" fg:x="716148426" fg:w="2006018"/><text x="95.3232%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (2,006,018 samples, 0.27%)</title><rect x="95.0732%" y="389" width="0.2663%" height="15" fill="rgb(252,166,36)" fg:x="716148426" fg:w="2006018"/><text x="95.3232%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.13%)</title><rect x="95.3395%" y="405" width="0.1332%" height="15" fill="rgb(245,132,34)" fg:x="718154444" fg:w="1003009"/><text x="95.5895%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.13%)</title><rect x="95.3395%" y="389" width="0.1332%" height="15" fill="rgb(236,54,3)" fg:x="718154444" fg:w="1003009"/><text x="95.5895%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.13%)</title><rect x="95.3395%" y="373" width="0.1332%" height="15" fill="rgb(241,173,43)" fg:x="718154444" fg:w="1003009"/><text x="95.5895%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.13%)</title><rect x="95.3395%" y="357" width="0.1332%" height="15" fill="rgb(215,190,9)" fg:x="718154444" fg:w="1003009"/><text x="95.5895%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.13%)</title><rect x="95.3395%" y="341" width="0.1332%" height="15" fill="rgb(242,101,16)" fg:x="718154444" fg:w="1003009"/><text x="95.5895%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.13%)</title><rect x="95.3395%" y="325" width="0.1332%" height="15" fill="rgb(223,190,21)" fg:x="718154444" fg:w="1003009"/><text x="95.5895%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.13%)</title><rect x="95.3395%" y="309" width="0.1332%" height="15" fill="rgb(215,228,25)" fg:x="718154444" fg:w="1003009"/><text x="95.5895%" y="319.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.13%)</title><rect x="95.3395%" y="293" width="0.1332%" height="15" fill="rgb(225,36,22)" fg:x="718154444" fg:w="1003009"/><text x="95.5895%" y="303.50"></text></g><g><title>chlang::board::Board::is_valid (29,087,261 samples, 3.86%)</title><rect x="91.7443%" y="453" width="3.8615%" height="15" fill="rgb(251,106,46)" fg:x="691073201" fg:w="29087261"/><text x="91.9943%" y="463.50">chla..</text></g><g><title>chlang::board::Board::attacked_by_color (29,087,261 samples, 3.86%)</title><rect x="91.7443%" y="437" width="3.8615%" height="15" fill="rgb(208,90,1)" fg:x="691073201" fg:w="29087261"/><text x="91.9943%" y="447.50">chla..</text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (4,012,036 samples, 0.53%)</title><rect x="95.0732%" y="421" width="0.5326%" height="15" fill="rgb(243,10,4)" fg:x="716148426" fg:w="4012036"/><text x="95.3232%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,003,009 samples, 0.13%)</title><rect x="95.4727%" y="405" width="0.1332%" height="15" fill="rgb(212,137,27)" fg:x="719157453" fg:w="1003009"/><text x="95.7227%" y="415.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.13%)</title><rect x="95.4727%" y="389" width="0.1332%" height="15" fill="rgb(231,220,49)" fg:x="719157453" fg:w="1003009"/><text x="95.7227%" y="399.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.13%)</title><rect x="95.6059%" y="421" width="0.1332%" height="15" fill="rgb(237,96,20)" fg:x="720160462" fg:w="1003009"/><text x="95.8559%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.13%)</title><rect x="95.6059%" y="405" width="0.1332%" height="15" fill="rgb(239,229,30)" fg:x="720160462" fg:w="1003009"/><text x="95.8559%" y="415.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&lt;&amp;i64&gt;&gt;::add (1,003,009 samples, 0.13%)</title><rect x="95.7390%" y="421" width="0.1332%" height="15" fill="rgb(219,65,33)" fg:x="721163471" fg:w="1003009"/><text x="95.9890%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (1,003,009 samples, 0.13%)</title><rect x="95.7390%" y="405" width="0.1332%" height="15" fill="rgb(243,134,7)" fg:x="721163471" fg:w="1003009"/><text x="95.9890%" y="415.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (3,009,027 samples, 0.40%)</title><rect x="95.6059%" y="437" width="0.3995%" height="15" fill="rgb(216,177,54)" fg:x="720160462" fg:w="3009027"/><text x="95.8559%" y="447.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.13%)</title><rect x="96.0053%" y="421" width="0.1332%" height="15" fill="rgb(211,160,20)" fg:x="723169489" fg:w="1003009"/><text x="96.2553%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.13%)</title><rect x="96.0053%" y="405" width="0.1332%" height="15" fill="rgb(239,85,39)" fg:x="723169489" fg:w="1003009"/><text x="96.2553%" y="415.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (2,006,018 samples, 0.27%)</title><rect x="96.0053%" y="437" width="0.2663%" height="15" fill="rgb(232,125,22)" fg:x="723169489" fg:w="2006018"/><text x="96.2553%" y="447.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (6,018,054 samples, 0.80%)</title><rect x="95.6059%" y="453" width="0.7989%" height="15" fill="rgb(244,57,34)" fg:x="720160462" fg:w="6018054"/><text x="95.8559%" y="463.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (1,003,009 samples, 0.13%)</title><rect x="96.2716%" y="437" width="0.1332%" height="15" fill="rgb(214,203,32)" fg:x="725175507" fg:w="1003009"/><text x="96.5216%" y="447.50"></text></g><g><title>chlang::board::Position::valid (1,003,009 samples, 0.13%)</title><rect x="96.2716%" y="421" width="0.1332%" height="15" fill="rgb(207,58,43)" fg:x="725175507" fg:w="1003009"/><text x="96.5216%" y="431.50"></text></g><g><title>chlang::board::Board::make_move (41,123,369 samples, 5.46%)</title><rect x="91.0786%" y="469" width="5.4594%" height="15" fill="rgb(215,193,15)" fg:x="686058156" fg:w="41123369"/><text x="91.3286%" y="479.50">chlang:..</text></g><g><title>core::num::&lt;impl u64&gt;::pow (2,006,018 samples, 0.27%)</title><rect x="96.5379%" y="453" width="0.2663%" height="15" fill="rgb(232,15,44)" fg:x="727181525" fg:w="2006018"/><text x="96.7879%" y="463.50"></text></g><g><title>chlang::board::Board::get_valid_moves (45,135,405 samples, 5.99%)</title><rect x="91.0786%" y="485" width="5.9920%" height="15" fill="rgb(212,3,48)" fg:x="686058156" fg:w="45135405"/><text x="91.3286%" y="495.50">chlang::..</text></g><g><title>chlang::board::Board::get_pseudo_legal_moves (4,012,036 samples, 0.53%)</title><rect x="96.5379%" y="469" width="0.5326%" height="15" fill="rgb(218,128,7)" fg:x="727181525" fg:w="4012036"/><text x="96.7879%" y="479.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (2,006,018 samples, 0.27%)</title><rect x="96.8043%" y="453" width="0.2663%" height="15" fill="rgb(226,216,39)" fg:x="729187543" fg:w="2006018"/><text x="97.0543%" y="463.50"></text></g><g><title>chlang::board::Board::piece_type (2,006,018 samples, 0.27%)</title><rect x="96.8043%" y="437" width="0.2663%" height="15" fill="rgb(243,47,51)" fg:x="729187543" fg:w="2006018"/><text x="97.0543%" y="447.50"></text></g><g><title>chlang::board::Position::bitboard (2,006,018 samples, 0.27%)</title><rect x="96.8043%" y="421" width="0.2663%" height="15" fill="rgb(241,183,40)" fg:x="729187543" fg:w="2006018"/><text x="97.0543%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (2,006,018 samples, 0.27%)</title><rect x="96.8043%" y="405" width="0.2663%" height="15" fill="rgb(231,217,32)" fg:x="729187543" fg:w="2006018"/><text x="97.0543%" y="415.50"></text></g><g><title>chlang::board::Board::get_game_state (83,249,747 samples, 11.05%)</title><rect x="86.1518%" y="501" width="11.0519%" height="15" fill="rgb(229,61,38)" fg:x="648946823" fg:w="83249747"/><text x="86.4018%" y="511.50">chlang::board::B..</text></g><g><title>&lt;[T] as rand::seq::SliceRandom&gt;::shuffle (1,003,009 samples, 0.13%)</title><rect x="97.2037%" y="501" width="0.1332%" height="15" fill="rgb(225,210,5)" fg:x="732196570" fg:w="1003009"/><text x="97.4537%" y="511.50"></text></g><g><title>rand::seq::gen_index (1,003,009 samples, 0.13%)</title><rect x="97.2037%" y="485" width="0.1332%" height="15" fill="rgb(231,79,45)" fg:x="732196570" fg:w="1003009"/><text x="97.4537%" y="495.50"></text></g><g><title>rand::rng::Rng::gen_range (1,003,009 samples, 0.13%)</title><rect x="97.2037%" y="469" width="0.1332%" height="15" fill="rgb(224,100,7)" fg:x="732196570" fg:w="1003009"/><text x="97.4537%" y="479.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (1,003,009 samples, 0.13%)</title><rect x="97.2037%" y="453" width="0.1332%" height="15" fill="rgb(241,198,18)" fg:x="732196570" fg:w="1003009"/><text x="97.4537%" y="463.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (1,003,009 samples, 0.13%)</title><rect x="97.2037%" y="437" width="0.1332%" height="15" fill="rgb(252,97,53)" fg:x="732196570" fg:w="1003009"/><text x="97.4537%" y="447.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (1,003,009 samples, 0.13%)</title><rect x="97.2037%" y="421" width="0.1332%" height="15" fill="rgb(220,88,7)" fg:x="732196570" fg:w="1003009"/><text x="97.4537%" y="431.50"></text></g><g><title>rand::rng::Rng::gen (1,003,009 samples, 0.13%)</title><rect x="97.2037%" y="405" width="0.1332%" height="15" fill="rgb(213,176,14)" fg:x="732196570" fg:w="1003009"/><text x="97.4537%" y="415.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (1,003,009 samples, 0.13%)</title><rect x="97.2037%" y="389" width="0.1332%" height="15" fill="rgb(246,73,7)" fg:x="732196570" fg:w="1003009"/><text x="97.4537%" y="399.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (1,003,009 samples, 0.13%)</title><rect x="97.2037%" y="373" width="0.1332%" height="15" fill="rgb(245,64,36)" fg:x="732196570" fg:w="1003009"/><text x="97.4537%" y="383.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (1,003,009 samples, 0.13%)</title><rect x="97.2037%" y="357" width="0.1332%" height="15" fill="rgb(245,80,10)" fg:x="732196570" fg:w="1003009"/><text x="97.4537%" y="367.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (1,003,009 samples, 0.13%)</title><rect x="97.2037%" y="341" width="0.1332%" height="15" fill="rgb(232,107,50)" fg:x="732196570" fg:w="1003009"/><text x="97.4537%" y="351.50"></text></g><g><title>chlang::tree_evaluator::eval (732,196,570 samples, 97.20%)</title><rect x="0.2663%" y="517" width="97.2037%" height="15" fill="rgb(253,3,0)" fg:x="2006018" fg:w="732196570"/><text x="0.5163%" y="527.50">chlang::tree_evaluator::eval</text></g><g><title>chlang::board::Board::make_move (1,003,009 samples, 0.13%)</title><rect x="97.4700%" y="517" width="0.1332%" height="15" fill="rgb(212,99,53)" fg:x="734202588" fg:w="1003009"/><text x="97.7200%" y="527.50"></text></g><g><title>chlang::board::Board::is_valid (1,003,009 samples, 0.13%)</title><rect x="97.4700%" y="501" width="0.1332%" height="15" fill="rgb(249,111,54)" fg:x="734202588" fg:w="1003009"/><text x="97.7200%" y="511.50"></text></g><g><title>chlang::board::Board::attacked_by_color (1,003,009 samples, 0.13%)</title><rect x="97.4700%" y="485" width="0.1332%" height="15" fill="rgb(249,55,30)" fg:x="734202588" fg:w="1003009"/><text x="97.7200%" y="495.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (1,003,009 samples, 0.13%)</title><rect x="97.4700%" y="469" width="0.1332%" height="15" fill="rgb(237,47,42)" fg:x="734202588" fg:w="1003009"/><text x="97.7200%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (1,003,009 samples, 0.13%)</title><rect x="97.4700%" y="453" width="0.1332%" height="15" fill="rgb(211,20,18)" fg:x="734202588" fg:w="1003009"/><text x="97.7200%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.13%)</title><rect x="97.4700%" y="437" width="0.1332%" height="15" fill="rgb(231,203,46)" fg:x="734202588" fg:w="1003009"/><text x="97.7200%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.13%)</title><rect x="97.4700%" y="421" width="0.1332%" height="15" fill="rgb(237,142,3)" fg:x="734202588" fg:w="1003009"/><text x="97.7200%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.13%)</title><rect x="97.4700%" y="405" width="0.1332%" height="15" fill="rgb(241,107,1)" fg:x="734202588" fg:w="1003009"/><text x="97.7200%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.13%)</title><rect x="97.4700%" y="389" width="0.1332%" height="15" fill="rgb(229,83,13)" fg:x="734202588" fg:w="1003009"/><text x="97.7200%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.13%)</title><rect x="97.4700%" y="373" width="0.1332%" height="15" fill="rgb(241,91,40)" fg:x="734202588" fg:w="1003009"/><text x="97.7200%" y="383.50"></text></g><g><title>__rust_dealloc (1,003,009 samples, 0.13%)</title><rect x="97.4700%" y="357" width="0.1332%" height="15" fill="rgb(225,3,45)" fg:x="734202588" fg:w="1003009"/><text x="97.7200%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,003,009 samples, 0.13%)</title><rect x="97.6032%" y="453" width="0.1332%" height="15" fill="rgb(244,223,14)" fg:x="735205597" fg:w="1003009"/><text x="97.8532%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,003,009 samples, 0.13%)</title><rect x="97.6032%" y="437" width="0.1332%" height="15" fill="rgb(224,124,37)" fg:x="735205597" fg:w="1003009"/><text x="97.8532%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1,003,009 samples, 0.13%)</title><rect x="97.6032%" y="421" width="0.1332%" height="15" fill="rgb(251,171,30)" fg:x="735205597" fg:w="1003009"/><text x="97.8532%" y="431.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="97.7364%" y="373" width="0.1332%" height="15" fill="rgb(236,46,54)" fg:x="736208606" fg:w="1003009"/><text x="97.9864%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="97.7364%" y="357" width="0.1332%" height="15" fill="rgb(245,213,5)" fg:x="736208606" fg:w="1003009"/><text x="97.9864%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (1,003,009 samples, 0.13%)</title><rect x="97.7364%" y="341" width="0.1332%" height="15" fill="rgb(230,144,27)" fg:x="736208606" fg:w="1003009"/><text x="97.9864%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="97.7364%" y="325" width="0.1332%" height="15" fill="rgb(220,86,6)" fg:x="736208606" fg:w="1003009"/><text x="97.9864%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="97.7364%" y="309" width="0.1332%" height="15" fill="rgb(240,20,13)" fg:x="736208606" fg:w="1003009"/><text x="97.9864%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="97.7364%" y="293" width="0.1332%" height="15" fill="rgb(217,89,34)" fg:x="736208606" fg:w="1003009"/><text x="97.9864%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,003,009 samples, 0.13%)</title><rect x="97.7364%" y="277" width="0.1332%" height="15" fill="rgb(229,13,5)" fg:x="736208606" fg:w="1003009"/><text x="97.9864%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,003,009 samples, 0.13%)</title><rect x="97.7364%" y="261" width="0.1332%" height="15" fill="rgb(244,67,35)" fg:x="736208606" fg:w="1003009"/><text x="97.9864%" y="271.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="97.8695%" y="373" width="0.1332%" height="15" fill="rgb(221,40,2)" fg:x="737211615" fg:w="1003009"/><text x="98.1195%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="97.8695%" y="357" width="0.1332%" height="15" fill="rgb(237,157,21)" fg:x="737211615" fg:w="1003009"/><text x="98.1195%" y="367.50"></text></g><g><title>core::hash::Hasher::write_isize (1,003,009 samples, 0.13%)</title><rect x="97.8695%" y="341" width="0.1332%" height="15" fill="rgb(222,94,11)" fg:x="737211615" fg:w="1003009"/><text x="98.1195%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (1,003,009 samples, 0.13%)</title><rect x="97.8695%" y="325" width="0.1332%" height="15" fill="rgb(249,113,6)" fg:x="737211615" fg:w="1003009"/><text x="98.1195%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="97.8695%" y="309" width="0.1332%" height="15" fill="rgb(238,137,36)" fg:x="737211615" fg:w="1003009"/><text x="98.1195%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="97.8695%" y="293" width="0.1332%" height="15" fill="rgb(210,102,26)" fg:x="737211615" fg:w="1003009"/><text x="98.1195%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="97.8695%" y="277" width="0.1332%" height="15" fill="rgb(218,30,30)" fg:x="737211615" fg:w="1003009"/><text x="98.1195%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (3,009,027 samples, 0.40%)</title><rect x="97.7364%" y="453" width="0.3995%" height="15" fill="rgb(214,67,26)" fg:x="736208606" fg:w="3009027"/><text x="97.9864%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3,009,027 samples, 0.40%)</title><rect x="97.7364%" y="437" width="0.3995%" height="15" fill="rgb(251,9,53)" fg:x="736208606" fg:w="3009027"/><text x="97.9864%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,009,027 samples, 0.40%)</title><rect x="97.7364%" y="421" width="0.3995%" height="15" fill="rgb(228,204,25)" fg:x="736208606" fg:w="3009027"/><text x="97.9864%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,009,027 samples, 0.40%)</title><rect x="97.7364%" y="405" width="0.3995%" height="15" fill="rgb(207,153,8)" fg:x="736208606" fg:w="3009027"/><text x="97.9864%" y="415.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (3,009,027 samples, 0.40%)</title><rect x="97.7364%" y="389" width="0.3995%" height="15" fill="rgb(242,9,16)" fg:x="736208606" fg:w="3009027"/><text x="97.9864%" y="399.50"></text></g><g><title>&lt;chlang::board::Player as core::hash::Hash&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="98.0027%" y="373" width="0.1332%" height="15" fill="rgb(217,211,10)" fg:x="738214624" fg:w="1003009"/><text x="98.2527%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="98.0027%" y="357" width="0.1332%" height="15" fill="rgb(219,228,52)" fg:x="738214624" fg:w="1003009"/><text x="98.2527%" y="367.50"></text></g><g><title>core::hash::Hasher::write_isize (1,003,009 samples, 0.13%)</title><rect x="98.0027%" y="341" width="0.1332%" height="15" fill="rgb(231,92,29)" fg:x="738214624" fg:w="1003009"/><text x="98.2527%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (1,003,009 samples, 0.13%)</title><rect x="98.0027%" y="325" width="0.1332%" height="15" fill="rgb(232,8,23)" fg:x="738214624" fg:w="1003009"/><text x="98.2527%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="98.0027%" y="309" width="0.1332%" height="15" fill="rgb(216,211,34)" fg:x="738214624" fg:w="1003009"/><text x="98.2527%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="98.0027%" y="293" width="0.1332%" height="15" fill="rgb(236,151,0)" fg:x="738214624" fg:w="1003009"/><text x="98.2527%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="98.0027%" y="277" width="0.1332%" height="15" fill="rgb(209,168,3)" fg:x="738214624" fg:w="1003009"/><text x="98.2527%" y="287.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (5,015,045 samples, 0.67%)</title><rect x="97.6032%" y="485" width="0.6658%" height="15" fill="rgb(208,129,28)" fg:x="735205597" fg:w="5015045"/><text x="97.8532%" y="495.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5,015,045 samples, 0.67%)</title><rect x="97.6032%" y="469" width="0.6658%" height="15" fill="rgb(229,78,22)" fg:x="735205597" fg:w="5015045"/><text x="97.8532%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1,003,009 samples, 0.13%)</title><rect x="98.1358%" y="453" width="0.1332%" height="15" fill="rgb(228,187,13)" fg:x="739217633" fg:w="1003009"/><text x="98.3858%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1,003,009 samples, 0.13%)</title><rect x="98.1358%" y="437" width="0.1332%" height="15" fill="rgb(240,119,24)" fg:x="739217633" fg:w="1003009"/><text x="98.3858%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,003,009 samples, 0.13%)</title><rect x="98.1358%" y="421" width="0.1332%" height="15" fill="rgb(209,194,42)" fg:x="739217633" fg:w="1003009"/><text x="98.3858%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1,003,009 samples, 0.13%)</title><rect x="98.1358%" y="405" width="0.1332%" height="15" fill="rgb(247,200,46)" fg:x="739217633" fg:w="1003009"/><text x="98.3858%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1,003,009 samples, 0.13%)</title><rect x="98.1358%" y="389" width="0.1332%" height="15" fill="rgb(218,76,16)" fg:x="739217633" fg:w="1003009"/><text x="98.3858%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="98.1358%" y="373" width="0.1332%" height="15" fill="rgb(225,21,48)" fg:x="739217633" fg:w="1003009"/><text x="98.3858%" y="383.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="98.1358%" y="357" width="0.1332%" height="15" fill="rgb(239,223,50)" fg:x="739217633" fg:w="1003009"/><text x="98.3858%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (1,003,009 samples, 0.13%)</title><rect x="98.1358%" y="341" width="0.1332%" height="15" fill="rgb(244,45,21)" fg:x="739217633" fg:w="1003009"/><text x="98.3858%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,003,009 samples, 0.13%)</title><rect x="98.1358%" y="325" width="0.1332%" height="15" fill="rgb(232,33,43)" fg:x="739217633" fg:w="1003009"/><text x="98.3858%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="98.1358%" y="309" width="0.1332%" height="15" fill="rgb(209,8,3)" fg:x="739217633" fg:w="1003009"/><text x="98.3858%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="98.1358%" y="293" width="0.1332%" height="15" fill="rgb(214,25,53)" fg:x="739217633" fg:w="1003009"/><text x="98.3858%" y="303.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="98.1358%" y="277" width="0.1332%" height="15" fill="rgb(254,186,54)" fg:x="739217633" fg:w="1003009"/><text x="98.3858%" y="287.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="98.1358%" y="261" width="0.1332%" height="15" fill="rgb(208,174,49)" fg:x="739217633" fg:w="1003009"/><text x="98.3858%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="98.1358%" y="245" width="0.1332%" height="15" fill="rgb(233,191,51)" fg:x="739217633" fg:w="1003009"/><text x="98.3858%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (1,003,009 samples, 0.13%)</title><rect x="98.1358%" y="229" width="0.1332%" height="15" fill="rgb(222,134,10)" fg:x="739217633" fg:w="1003009"/><text x="98.3858%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="98.1358%" y="213" width="0.1332%" height="15" fill="rgb(230,226,20)" fg:x="739217633" fg:w="1003009"/><text x="98.3858%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="98.1358%" y="197" width="0.1332%" height="15" fill="rgb(251,111,25)" fg:x="739217633" fg:w="1003009"/><text x="98.3858%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="98.1358%" y="181" width="0.1332%" height="15" fill="rgb(224,40,46)" fg:x="739217633" fg:w="1003009"/><text x="98.3858%" y="191.50"></text></g><g><title>chlang::board::Board::is_threefold_rep (6,018,054 samples, 0.80%)</title><rect x="97.6032%" y="501" width="0.7989%" height="15" fill="rgb(236,108,47)" fg:x="735205597" fg:w="6018054"/><text x="97.8532%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V&gt; as core::convert::From&lt;[(K,V): N]&gt;&gt;::from (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="485" width="0.1332%" height="15" fill="rgb(234,93,0)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="469" width="0.1332%" height="15" fill="rgb(224,213,32)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="453" width="0.1332%" height="15" fill="rgb(251,11,48)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="463.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="437" width="0.1332%" height="15" fill="rgb(236,173,5)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="421" width="0.1332%" height="15" fill="rgb(230,95,12)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="431.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="405" width="0.1332%" height="15" fill="rgb(232,209,1)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="389" width="0.1332%" height="15" fill="rgb(232,6,1)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="373" width="0.1332%" height="15" fill="rgb(210,224,50)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="383.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="357" width="0.1332%" height="15" fill="rgb(228,127,35)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="367.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="341" width="0.1332%" height="15" fill="rgb(245,102,45)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="325" width="0.1332%" height="15" fill="rgb(214,1,49)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="335.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="309" width="0.1332%" height="15" fill="rgb(226,163,40)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="293" width="0.1332%" height="15" fill="rgb(239,212,28)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="277" width="0.1332%" height="15" fill="rgb(220,20,13)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="261" width="0.1332%" height="15" fill="rgb(210,164,35)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="245" width="0.1332%" height="15" fill="rgb(248,109,41)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="229" width="0.1332%" height="15" fill="rgb(238,23,50)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="239.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="213" width="0.1332%" height="15" fill="rgb(211,48,49)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="223.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="197" width="0.1332%" height="15" fill="rgb(223,36,21)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="181" width="0.1332%" height="15" fill="rgb(207,123,46)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="191.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="165" width="0.1332%" height="15" fill="rgb(240,218,32)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="175.50"></text></g><g><title>core::hash::Hasher::write_usize (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="149" width="0.1332%" height="15" fill="rgb(252,5,43)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="133" width="0.1332%" height="15" fill="rgb(252,84,19)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="117" width="0.1332%" height="15" fill="rgb(243,152,39)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="98.2690%" y="101" width="0.1332%" height="15" fill="rgb(234,160,15)" fg:x="740220642" fg:w="1003009"/><text x="98.5190%" y="111.50"></text></g><g><title>chlang::board::Board::unmake_last (1,003,009 samples, 0.13%)</title><rect x="98.4021%" y="485" width="0.1332%" height="15" fill="rgb(237,34,20)" fg:x="741223651" fg:w="1003009"/><text x="98.6521%" y="495.50"></text></g><g><title>chlang::board::Board::piece_type (2,006,018 samples, 0.27%)</title><rect x="98.5353%" y="469" width="0.2663%" height="15" fill="rgb(229,97,13)" fg:x="742226660" fg:w="2006018"/><text x="98.7853%" y="479.50"></text></g><g><title>chlang::board::Position::bitboard (2,006,018 samples, 0.27%)</title><rect x="98.5353%" y="453" width="0.2663%" height="15" fill="rgb(234,71,50)" fg:x="742226660" fg:w="2006018"/><text x="98.7853%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (2,006,018 samples, 0.27%)</title><rect x="98.5353%" y="437" width="0.2663%" height="15" fill="rgb(253,155,4)" fg:x="742226660" fg:w="2006018"/><text x="98.7853%" y="447.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.13%)</title><rect x="98.8016%" y="421" width="0.1332%" height="15" fill="rgb(222,185,37)" fg:x="744232678" fg:w="1003009"/><text x="99.0516%" y="431.50"></text></g><g><title>chlang::board::Board::piece_type (2,006,018 samples, 0.27%)</title><rect x="98.8016%" y="437" width="0.2663%" height="15" fill="rgb(251,177,13)" fg:x="744232678" fg:w="2006018"/><text x="99.0516%" y="447.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.13%)</title><rect x="99.0679%" y="421" width="0.1332%" height="15" fill="rgb(250,179,40)" fg:x="746238696" fg:w="1003009"/><text x="99.3179%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.13%)</title><rect x="99.0679%" y="405" width="0.1332%" height="15" fill="rgb(242,44,2)" fg:x="746238696" fg:w="1003009"/><text x="99.3179%" y="415.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (2,006,018 samples, 0.27%)</title><rect x="99.0679%" y="437" width="0.2663%" height="15" fill="rgb(216,177,13)" fg:x="746238696" fg:w="2006018"/><text x="99.3179%" y="447.50"></text></g><g><title>chlang::board::Board::make_move (9,027,081 samples, 1.20%)</title><rect x="98.5353%" y="485" width="1.1984%" height="15" fill="rgb(216,106,43)" fg:x="742226660" fg:w="9027081"/><text x="98.7853%" y="495.50"></text></g><g><title>chlang::board::Board::is_valid (7,021,063 samples, 0.93%)</title><rect x="98.8016%" y="469" width="0.9321%" height="15" fill="rgb(216,183,2)" fg:x="744232678" fg:w="7021063"/><text x="99.0516%" y="479.50"></text></g><g><title>chlang::board::Board::attacked_by_color (7,021,063 samples, 0.93%)</title><rect x="98.8016%" y="453" width="0.9321%" height="15" fill="rgb(249,75,3)" fg:x="744232678" fg:w="7021063"/><text x="99.0516%" y="463.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (3,009,027 samples, 0.40%)</title><rect x="99.3342%" y="437" width="0.3995%" height="15" fill="rgb(219,67,39)" fg:x="748244714" fg:w="3009027"/><text x="99.5842%" y="447.50"></text></g><g><title>chlang::board::Position::bitboard (3,009,027 samples, 0.40%)</title><rect x="99.3342%" y="421" width="0.3995%" height="15" fill="rgb(253,228,2)" fg:x="748244714" fg:w="3009027"/><text x="99.5842%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (3,009,027 samples, 0.40%)</title><rect x="99.3342%" y="405" width="0.3995%" height="15" fill="rgb(235,138,27)" fg:x="748244714" fg:w="3009027"/><text x="99.5842%" y="415.50"></text></g><g><title>chlang::tree_evaluator::eval (752,256,750 samples, 99.87%)</title><rect x="0.0000%" y="533" width="99.8668%" height="15" fill="rgb(236,97,51)" fg:x="0" fg:w="752256750"/><text x="0.2500%" y="543.50">chlang::tree_evaluator::eval</text></g><g><title>chlang::board::Board::get_game_state (17,051,153 samples, 2.26%)</title><rect x="97.6032%" y="517" width="2.2636%" height="15" fill="rgb(240,80,30)" fg:x="735205597" fg:w="17051153"/><text x="97.8532%" y="527.50">c..</text></g><g><title>chlang::board::Board::get_valid_moves (11,033,099 samples, 1.46%)</title><rect x="98.4021%" y="501" width="1.4647%" height="15" fill="rgb(230,178,19)" fg:x="741223651" fg:w="11033099"/><text x="98.6521%" y="511.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves (1,003,009 samples, 0.13%)</title><rect x="99.7337%" y="485" width="0.1332%" height="15" fill="rgb(210,190,27)" fg:x="751253741" fg:w="1003009"/><text x="99.9837%" y="495.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (1,003,009 samples, 0.13%)</title><rect x="99.7337%" y="469" width="0.1332%" height="15" fill="rgb(222,107,31)" fg:x="751253741" fg:w="1003009"/><text x="99.9837%" y="479.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (1,003,009 samples, 0.13%)</title><rect x="99.7337%" y="453" width="0.1332%" height="15" fill="rgb(216,127,34)" fg:x="751253741" fg:w="1003009"/><text x="99.9837%" y="463.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.13%)</title><rect x="99.7337%" y="437" width="0.1332%" height="15" fill="rgb(234,116,52)" fg:x="751253741" fg:w="1003009"/><text x="99.9837%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.13%)</title><rect x="99.7337%" y="421" width="0.1332%" height="15" fill="rgb(222,124,15)" fg:x="751253741" fg:w="1003009"/><text x="99.9837%" y="431.50"></text></g><g><title>all (753,259,759 samples, 100%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(231,179,28)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="895.50"></text></g><g><title>chlang (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(226,93,45)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="879.50">chlang</text></g><g><title>_start (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(215,8,51)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="863.50">_start</text></g><g><title>__libc_start_main_impl (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(223,106,5)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="847.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(250,191,5)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="831.50">__libc_start_call_main</text></g><g><title>main (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(242,132,44)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="815.50">main</text></g><g><title>std::rt::lang_start_internal (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(251,152,29)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="799.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(218,179,5)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="783.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(227,67,19)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="767.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(233,119,31)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="751.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(241,120,22)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="735.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(224,102,30)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(210,164,37)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(226,191,16)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="687.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(214,40,45)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="671.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(244,29,26)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="655.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(216,16,5)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="639.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(249,76,35)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="623.50">core::ops::function::FnOnce::call_once</text></g><g><title>chlang::main (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(207,11,44)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="607.50">chlang::main</text></g><g><title>chlang::tree_evaluator::Bot::find_best_move (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(228,190,49)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="591.50">chlang::tree_evaluator::Bot::find_best_move</text></g><g><title>chlang::tree_evaluator::eval (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(214,173,12)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="575.50">chlang::tree_evaluator::eval</text></g><g><title>chlang::tree_evaluator::eval (753,259,759 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(218,26,35)" fg:x="0" fg:w="753259759"/><text x="0.2500%" y="559.50">chlang::tree_evaluator::eval</text></g><g><title>chlang::board::Board::get_game_state (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="533" width="0.1332%" height="15" fill="rgb(220,200,19)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="543.50"></text></g><g><title>chlang::board::Board::is_threefold_rep (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="517" width="0.1332%" height="15" fill="rgb(239,95,49)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V&gt; as core::convert::From&lt;[(K,V): N]&gt;&gt;::from (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="501" width="0.1332%" height="15" fill="rgb(235,85,53)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="485" width="0.1332%" height="15" fill="rgb(233,133,31)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="469" width="0.1332%" height="15" fill="rgb(218,25,20)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="479.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="453" width="0.1332%" height="15" fill="rgb(252,210,38)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="437" width="0.1332%" height="15" fill="rgb(242,134,21)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="447.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="421" width="0.1332%" height="15" fill="rgb(213,28,48)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="405" width="0.1332%" height="15" fill="rgb(250,196,2)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="389" width="0.1332%" height="15" fill="rgb(227,5,17)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="399.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="373" width="0.1332%" height="15" fill="rgb(221,226,24)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="383.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="357" width="0.1332%" height="15" fill="rgb(211,5,48)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="341" width="0.1332%" height="15" fill="rgb(219,150,6)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="351.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="325" width="0.1332%" height="15" fill="rgb(251,46,16)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="309" width="0.1332%" height="15" fill="rgb(220,204,40)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="293" width="0.1332%" height="15" fill="rgb(211,85,2)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="277" width="0.1332%" height="15" fill="rgb(229,17,7)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="261" width="0.1332%" height="15" fill="rgb(239,72,28)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="245" width="0.1332%" height="15" fill="rgb(230,47,54)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="255.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="229" width="0.1332%" height="15" fill="rgb(214,50,8)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="239.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="213" width="0.1332%" height="15" fill="rgb(216,198,43)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="197" width="0.1332%" height="15" fill="rgb(234,20,35)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="181" width="0.1332%" height="15" fill="rgb(254,45,19)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="165" width="0.1332%" height="15" fill="rgb(219,14,44)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="149" width="0.1332%" height="15" fill="rgb(217,220,26)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,003,009 samples, 0.13%)</title><rect x="99.8668%" y="133" width="0.1332%" height="15" fill="rgb(213,158,28)" fg:x="752256750" fg:w="1003009"/><text x="100.1168%" y="143.50"></text></g></svg></svg>