<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="773.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="219658971"><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (1,003,009 samples, 0.46%)</title><rect x="0.0000%" y="357" width="0.4566%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="367.50"></text></g><g><title>core::slice::sort::quicksort (1,003,009 samples, 0.46%)</title><rect x="0.0000%" y="341" width="0.4566%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="351.50"></text></g><g><title>core::slice::sort::recurse (1,003,009 samples, 0.46%)</title><rect x="0.0000%" y="325" width="0.4566%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="335.50"></text></g><g><title>core::slice::sort::partition (1,003,009 samples, 0.46%)</title><rect x="0.0000%" y="309" width="0.4566%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key::{{closure}} (1,003,009 samples, 0.46%)</title><rect x="0.0000%" y="293" width="0.4566%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="303.50"></text></g><g><title>chlang::tree_evaluator::Bot::find_best_move::{{closure}} (1,003,009 samples, 0.46%)</title><rect x="0.0000%" y="277" width="0.4566%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="287.50"></text></g><g><title>chlang::board::Board::piece_type (1,003,009 samples, 0.46%)</title><rect x="0.0000%" y="261" width="0.4566%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.46%)</title><rect x="0.4566%" y="325" width="0.4566%" height="15" fill="rgb(228,23,34)" fg:x="1003009" fg:w="1003009"/><text x="0.7066%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.46%)</title><rect x="0.4566%" y="309" width="0.4566%" height="15" fill="rgb(218,30,26)" fg:x="1003009" fg:w="1003009"/><text x="0.7066%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.46%)</title><rect x="0.4566%" y="293" width="0.4566%" height="15" fill="rgb(220,122,19)" fg:x="1003009" fg:w="1003009"/><text x="0.7066%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.46%)</title><rect x="0.4566%" y="277" width="0.4566%" height="15" fill="rgb(250,228,42)" fg:x="1003009" fg:w="1003009"/><text x="0.7066%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.46%)</title><rect x="0.4566%" y="261" width="0.4566%" height="15" fill="rgb(240,193,28)" fg:x="1003009" fg:w="1003009"/><text x="0.7066%" y="271.50"></text></g><g><title>__GI___libc_free (1,003,009 samples, 0.46%)</title><rect x="0.4566%" y="245" width="0.4566%" height="15" fill="rgb(216,20,37)" fg:x="1003009" fg:w="1003009"/><text x="0.7066%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (1,003,009 samples, 0.46%)</title><rect x="0.9132%" y="293" width="0.4566%" height="15" fill="rgb(206,188,39)" fg:x="2006018" fg:w="1003009"/><text x="1.1632%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1,003,009 samples, 0.46%)</title><rect x="1.3699%" y="293" width="0.4566%" height="15" fill="rgb(217,207,13)" fg:x="3009027" fg:w="1003009"/><text x="1.6199%" y="303.50"></text></g><g><title>core::ptr::read (1,003,009 samples, 0.46%)</title><rect x="1.3699%" y="277" width="0.4566%" height="15" fill="rgb(231,73,38)" fg:x="3009027" fg:w="1003009"/><text x="1.6199%" y="287.50"></text></g><g><title>chlang::board::Board::unmake_last (5,015,045 samples, 2.28%)</title><rect x="0.9132%" y="309" width="2.2831%" height="15" fill="rgb(225,20,46)" fg:x="2006018" fg:w="5015045"/><text x="1.1632%" y="319.50">c..</text></g><g><title>__rust_dealloc (1,003,009 samples, 0.46%)</title><rect x="3.1963%" y="213" width="0.4566%" height="15" fill="rgb(210,31,41)" fg:x="7021063" fg:w="1003009"/><text x="3.4463%" y="223.50"></text></g><g><title>__rdl_dealloc (1,003,009 samples, 0.46%)</title><rect x="3.6530%" y="213" width="0.4566%" height="15" fill="rgb(221,200,47)" fg:x="8024072" fg:w="1003009"/><text x="3.9030%" y="223.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,003,009 samples, 0.46%)</title><rect x="3.6530%" y="197" width="0.4566%" height="15" fill="rgb(226,26,5)" fg:x="8024072" fg:w="1003009"/><text x="3.9030%" y="207.50"></text></g><g><title>_int_free (2,006,018 samples, 0.91%)</title><rect x="4.1096%" y="197" width="0.9132%" height="15" fill="rgb(249,33,26)" fg:x="9027081" fg:w="2006018"/><text x="4.3596%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (5,015,045 samples, 2.28%)</title><rect x="3.1963%" y="293" width="2.2831%" height="15" fill="rgb(235,183,28)" fg:x="7021063" fg:w="5015045"/><text x="3.4463%" y="303.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (5,015,045 samples, 2.28%)</title><rect x="3.1963%" y="277" width="2.2831%" height="15" fill="rgb(221,5,38)" fg:x="7021063" fg:w="5015045"/><text x="3.4463%" y="287.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,015,045 samples, 2.28%)</title><rect x="3.1963%" y="261" width="2.2831%" height="15" fill="rgb(247,18,42)" fg:x="7021063" fg:w="5015045"/><text x="3.4463%" y="271.50">&lt;..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5,015,045 samples, 2.28%)</title><rect x="3.1963%" y="245" width="2.2831%" height="15" fill="rgb(241,131,45)" fg:x="7021063" fg:w="5015045"/><text x="3.4463%" y="255.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (5,015,045 samples, 2.28%)</title><rect x="3.1963%" y="229" width="2.2831%" height="15" fill="rgb(249,31,29)" fg:x="7021063" fg:w="5015045"/><text x="3.4463%" y="239.50">a..</text></g><g><title>__GI___libc_free (3,009,027 samples, 1.37%)</title><rect x="4.1096%" y="213" width="1.3699%" height="15" fill="rgb(225,111,53)" fg:x="9027081" fg:w="3009027"/><text x="4.3596%" y="223.50"></text></g><g><title>chlang::board::Board::unmake_last (1,003,009 samples, 0.46%)</title><rect x="5.4795%" y="293" width="0.4566%" height="15" fill="rgb(238,160,17)" fg:x="12036108" fg:w="1003009"/><text x="5.7295%" y="303.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.46%)</title><rect x="5.9361%" y="277" width="0.4566%" height="15" fill="rgb(214,148,48)" fg:x="13039117" fg:w="1003009"/><text x="6.1861%" y="287.50"></text></g><g><title>chlang::board::Board::piece_type (2,006,018 samples, 0.91%)</title><rect x="5.9361%" y="293" width="0.9132%" height="15" fill="rgb(232,36,49)" fg:x="13039117" fg:w="2006018"/><text x="6.1861%" y="303.50"></text></g><g><title>chlang::board::Board::key (1,003,009 samples, 0.46%)</title><rect x="6.8493%" y="293" width="0.4566%" height="15" fill="rgb(209,103,24)" fg:x="15045135" fg:w="1003009"/><text x="7.0993%" y="303.50"></text></g><g><title>&lt;chlang::board::Player as core::clone::Clone&gt;::clone (1,003,009 samples, 0.46%)</title><rect x="6.8493%" y="277" width="0.4566%" height="15" fill="rgb(229,88,8)" fg:x="15045135" fg:w="1003009"/><text x="7.0993%" y="287.50"></text></g><g><title>__rust_dealloc (2,006,018 samples, 0.91%)</title><rect x="7.3059%" y="133" width="0.9132%" height="15" fill="rgb(213,181,19)" fg:x="16048144" fg:w="2006018"/><text x="7.5559%" y="143.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,003,009 samples, 0.46%)</title><rect x="8.2192%" y="117" width="0.4566%" height="15" fill="rgb(254,191,54)" fg:x="18054162" fg:w="1003009"/><text x="8.4692%" y="127.50"></text></g><g><title>__rdl_dealloc (3,009,027 samples, 1.37%)</title><rect x="8.2192%" y="133" width="1.3699%" height="15" fill="rgb(241,83,37)" fg:x="18054162" fg:w="3009027"/><text x="8.4692%" y="143.50"></text></g><g><title>_int_free (10,030,090 samples, 4.57%)</title><rect x="9.5890%" y="117" width="4.5662%" height="15" fill="rgb(233,36,39)" fg:x="21063189" fg:w="10030090"/><text x="9.8390%" y="127.50">_int_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (24,072,216 samples, 10.96%)</title><rect x="7.3059%" y="261" width="10.9589%" height="15" fill="rgb(226,3,54)" fg:x="16048144" fg:w="24072216"/><text x="7.5559%" y="271.50">core::ptr::drop_..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24,072,216 samples, 10.96%)</title><rect x="7.3059%" y="245" width="10.9589%" height="15" fill="rgb(245,192,40)" fg:x="16048144" fg:w="24072216"/><text x="7.5559%" y="255.50">&lt;alloc::vec::int..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (24,072,216 samples, 10.96%)</title><rect x="7.3059%" y="229" width="10.9589%" height="15" fill="rgb(238,167,29)" fg:x="16048144" fg:w="24072216"/><text x="7.5559%" y="239.50">core::ptr::drop_..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24,072,216 samples, 10.96%)</title><rect x="7.3059%" y="213" width="10.9589%" height="15" fill="rgb(232,182,51)" fg:x="16048144" fg:w="24072216"/><text x="7.5559%" y="223.50">&lt;&lt;alloc::vec::in..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (24,072,216 samples, 10.96%)</title><rect x="7.3059%" y="197" width="10.9589%" height="15" fill="rgb(231,60,39)" fg:x="16048144" fg:w="24072216"/><text x="7.5559%" y="207.50">core::ptr::drop_..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24,072,216 samples, 10.96%)</title><rect x="7.3059%" y="181" width="10.9589%" height="15" fill="rgb(208,69,12)" fg:x="16048144" fg:w="24072216"/><text x="7.5559%" y="191.50">&lt;alloc::raw_vec:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24,072,216 samples, 10.96%)</title><rect x="7.3059%" y="165" width="10.9589%" height="15" fill="rgb(235,93,37)" fg:x="16048144" fg:w="24072216"/><text x="7.5559%" y="175.50">&lt;alloc::alloc::G..</text></g><g><title>alloc::alloc::dealloc (24,072,216 samples, 10.96%)</title><rect x="7.3059%" y="149" width="10.9589%" height="15" fill="rgb(213,116,39)" fg:x="16048144" fg:w="24072216"/><text x="7.5559%" y="159.50">alloc::alloc::de..</text></g><g><title>__GI___libc_free (19,057,171 samples, 8.68%)</title><rect x="9.5890%" y="133" width="8.6758%" height="15" fill="rgb(222,207,29)" fg:x="21063189" fg:w="19057171"/><text x="9.8390%" y="143.50">__GI___libc_..</text></g><g><title>core::option::Option&lt;T&gt;::is_some_and (3,009,027 samples, 1.37%)</title><rect x="18.2648%" y="261" width="1.3699%" height="15" fill="rgb(206,96,30)" fg:x="40120360" fg:w="3009027"/><text x="18.5148%" y="271.50"></text></g><g><title>chlang::board::Board::attacked_by_color::{{closure}} (3,009,027 samples, 1.37%)</title><rect x="18.2648%" y="245" width="1.3699%" height="15" fill="rgb(218,138,4)" fg:x="40120360" fg:w="3009027"/><text x="18.5148%" y="255.50"></text></g><g><title>chlang::cmove::Move::to (2,006,018 samples, 0.91%)</title><rect x="19.6347%" y="261" width="0.9132%" height="15" fill="rgb(250,191,14)" fg:x="43129387" fg:w="2006018"/><text x="19.8847%" y="271.50"></text></g><g><title>chlang::board::Board::piece_type (2,006,018 samples, 0.91%)</title><rect x="20.5479%" y="261" width="0.9132%" height="15" fill="rgb(239,60,40)" fg:x="45135405" fg:w="2006018"/><text x="20.7979%" y="271.50"></text></g><g><title>chlang::board::Position::valid (2,006,018 samples, 0.91%)</title><rect x="21.4612%" y="245" width="0.9132%" height="15" fill="rgb(206,27,48)" fg:x="47141423" fg:w="2006018"/><text x="21.7112%" y="255.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.46%)</title><rect x="22.3744%" y="245" width="0.4566%" height="15" fill="rgb(225,35,8)" fg:x="49147441" fg:w="1003009"/><text x="22.6244%" y="255.50"></text></g><g><title>__rust_alloc (1,003,009 samples, 0.46%)</title><rect x="22.8311%" y="133" width="0.4566%" height="15" fill="rgb(250,213,24)" fg:x="50150450" fg:w="1003009"/><text x="23.0811%" y="143.50"></text></g><g><title>tcache_get (2,006,018 samples, 0.91%)</title><rect x="23.2877%" y="117" width="0.9132%" height="15" fill="rgb(247,123,22)" fg:x="51153459" fg:w="2006018"/><text x="23.5377%" y="127.50"></text></g><g><title>checked_request2size (1,003,009 samples, 0.46%)</title><rect x="24.2009%" y="117" width="0.4566%" height="15" fill="rgb(231,138,38)" fg:x="53159477" fg:w="1003009"/><text x="24.4509%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7,021,063 samples, 3.20%)</title><rect x="22.8311%" y="181" width="3.1963%" height="15" fill="rgb(231,145,46)" fg:x="50150450" fg:w="7021063"/><text x="23.0811%" y="191.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (7,021,063 samples, 3.20%)</title><rect x="22.8311%" y="165" width="3.1963%" height="15" fill="rgb(251,118,11)" fg:x="50150450" fg:w="7021063"/><text x="23.0811%" y="175.50">all..</text></g><g><title>alloc::alloc::alloc (7,021,063 samples, 3.20%)</title><rect x="22.8311%" y="149" width="3.1963%" height="15" fill="rgb(217,147,25)" fg:x="50150450" fg:w="7021063"/><text x="23.0811%" y="159.50">all..</text></g><g><title>__GI___libc_malloc (6,018,054 samples, 2.74%)</title><rect x="23.2877%" y="133" width="2.7397%" height="15" fill="rgb(247,81,37)" fg:x="51153459" fg:w="6018054"/><text x="23.5377%" y="143.50">__..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8,024,072 samples, 3.65%)</title><rect x="22.8311%" y="245" width="3.6530%" height="15" fill="rgb(209,12,38)" fg:x="50150450" fg:w="8024072"/><text x="23.0811%" y="255.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8,024,072 samples, 3.65%)</title><rect x="22.8311%" y="229" width="3.6530%" height="15" fill="rgb(227,1,9)" fg:x="50150450" fg:w="8024072"/><text x="23.0811%" y="239.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8,024,072 samples, 3.65%)</title><rect x="22.8311%" y="213" width="3.6530%" height="15" fill="rgb(248,47,43)" fg:x="50150450" fg:w="8024072"/><text x="23.0811%" y="223.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (8,024,072 samples, 3.65%)</title><rect x="22.8311%" y="197" width="3.6530%" height="15" fill="rgb(221,10,30)" fg:x="50150450" fg:w="8024072"/><text x="23.0811%" y="207.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,012,036 samples, 1.83%)</title><rect x="26.4840%" y="245" width="1.8265%" height="15" fill="rgb(210,229,1)" fg:x="58174522" fg:w="4012036"/><text x="26.7340%" y="255.50">a..</text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (18,054,162 samples, 8.22%)</title><rect x="21.4612%" y="261" width="8.2192%" height="15" fill="rgb(222,148,37)" fg:x="47141423" fg:w="18054162"/><text x="21.7112%" y="271.50">chlang::boa..</text></g><g><title>_int_free (1,003,009 samples, 0.46%)</title><rect x="29.6804%" y="133" width="0.4566%" height="15" fill="rgb(234,67,33)" fg:x="65195585" fg:w="1003009"/><text x="29.9304%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (2,006,018 samples, 0.91%)</title><rect x="29.6804%" y="245" width="0.9132%" height="15" fill="rgb(247,98,35)" fg:x="65195585" fg:w="2006018"/><text x="29.9304%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (2,006,018 samples, 0.91%)</title><rect x="29.6804%" y="229" width="0.9132%" height="15" fill="rgb(247,138,52)" fg:x="65195585" fg:w="2006018"/><text x="29.9304%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (2,006,018 samples, 0.91%)</title><rect x="29.6804%" y="213" width="0.9132%" height="15" fill="rgb(213,79,30)" fg:x="65195585" fg:w="2006018"/><text x="29.9304%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,006,018 samples, 0.91%)</title><rect x="29.6804%" y="197" width="0.9132%" height="15" fill="rgb(246,177,23)" fg:x="65195585" fg:w="2006018"/><text x="29.9304%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,006,018 samples, 0.91%)</title><rect x="29.6804%" y="181" width="0.9132%" height="15" fill="rgb(230,62,27)" fg:x="65195585" fg:w="2006018"/><text x="29.9304%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (2,006,018 samples, 0.91%)</title><rect x="29.6804%" y="165" width="0.9132%" height="15" fill="rgb(216,154,8)" fg:x="65195585" fg:w="2006018"/><text x="29.9304%" y="175.50"></text></g><g><title>__GI___libc_free (2,006,018 samples, 0.91%)</title><rect x="29.6804%" y="149" width="0.9132%" height="15" fill="rgb(244,35,45)" fg:x="65195585" fg:w="2006018"/><text x="29.9304%" y="159.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1,003,009 samples, 0.46%)</title><rect x="30.5936%" y="245" width="0.4566%" height="15" fill="rgb(251,115,12)" fg:x="67201603" fg:w="1003009"/><text x="30.8436%" y="255.50"></text></g><g><title>chlang::board::Position::valid (2,006,018 samples, 0.91%)</title><rect x="31.0502%" y="245" width="0.9132%" height="15" fill="rgb(240,54,50)" fg:x="68204612" fg:w="2006018"/><text x="31.3002%" y="255.50"></text></g><g><title>tcache_get (1,003,009 samples, 0.46%)</title><rect x="31.9635%" y="117" width="0.4566%" height="15" fill="rgb(233,84,52)" fg:x="70210630" fg:w="1003009"/><text x="32.2135%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3,009,027 samples, 1.37%)</title><rect x="31.9635%" y="245" width="1.3699%" height="15" fill="rgb(207,117,47)" fg:x="70210630" fg:w="3009027"/><text x="32.2135%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,009,027 samples, 1.37%)</title><rect x="31.9635%" y="229" width="1.3699%" height="15" fill="rgb(249,43,39)" fg:x="70210630" fg:w="3009027"/><text x="32.2135%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,009,027 samples, 1.37%)</title><rect x="31.9635%" y="213" width="1.3699%" height="15" fill="rgb(209,38,44)" fg:x="70210630" fg:w="3009027"/><text x="32.2135%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3,009,027 samples, 1.37%)</title><rect x="31.9635%" y="197" width="1.3699%" height="15" fill="rgb(236,212,23)" fg:x="70210630" fg:w="3009027"/><text x="32.2135%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,009,027 samples, 1.37%)</title><rect x="31.9635%" y="181" width="1.3699%" height="15" fill="rgb(242,79,21)" fg:x="70210630" fg:w="3009027"/><text x="32.2135%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,009,027 samples, 1.37%)</title><rect x="31.9635%" y="165" width="1.3699%" height="15" fill="rgb(211,96,35)" fg:x="70210630" fg:w="3009027"/><text x="32.2135%" y="175.50"></text></g><g><title>alloc::alloc::alloc (3,009,027 samples, 1.37%)</title><rect x="31.9635%" y="149" width="1.3699%" height="15" fill="rgb(253,215,40)" fg:x="70210630" fg:w="3009027"/><text x="32.2135%" y="159.50"></text></g><g><title>__GI___libc_malloc (3,009,027 samples, 1.37%)</title><rect x="31.9635%" y="133" width="1.3699%" height="15" fill="rgb(211,81,21)" fg:x="70210630" fg:w="3009027"/><text x="32.2135%" y="143.50"></text></g><g><title>__rust_alloc (1,003,009 samples, 0.46%)</title><rect x="33.3333%" y="101" width="0.4566%" height="15" fill="rgb(208,190,38)" fg:x="73219657" fg:w="1003009"/><text x="33.5833%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3,009,027 samples, 1.37%)</title><rect x="33.3333%" y="213" width="1.3699%" height="15" fill="rgb(235,213,38)" fg:x="73219657" fg:w="3009027"/><text x="33.5833%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,009,027 samples, 1.37%)</title><rect x="33.3333%" y="197" width="1.3699%" height="15" fill="rgb(237,122,38)" fg:x="73219657" fg:w="3009027"/><text x="33.5833%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,009,027 samples, 1.37%)</title><rect x="33.3333%" y="181" width="1.3699%" height="15" fill="rgb(244,218,35)" fg:x="73219657" fg:w="3009027"/><text x="33.5833%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3,009,027 samples, 1.37%)</title><rect x="33.3333%" y="165" width="1.3699%" height="15" fill="rgb(240,68,47)" fg:x="73219657" fg:w="3009027"/><text x="33.5833%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,009,027 samples, 1.37%)</title><rect x="33.3333%" y="149" width="1.3699%" height="15" fill="rgb(210,16,53)" fg:x="73219657" fg:w="3009027"/><text x="33.5833%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,009,027 samples, 1.37%)</title><rect x="33.3333%" y="133" width="1.3699%" height="15" fill="rgb(235,124,12)" fg:x="73219657" fg:w="3009027"/><text x="33.5833%" y="143.50"></text></g><g><title>alloc::alloc::alloc (3,009,027 samples, 1.37%)</title><rect x="33.3333%" y="117" width="1.3699%" height="15" fill="rgb(224,169,11)" fg:x="73219657" fg:w="3009027"/><text x="33.5833%" y="127.50"></text></g><g><title>__GI___libc_malloc (2,006,018 samples, 0.91%)</title><rect x="33.7900%" y="101" width="0.9132%" height="15" fill="rgb(250,166,2)" fg:x="74222666" fg:w="2006018"/><text x="34.0400%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,003,009 samples, 0.46%)</title><rect x="34.7032%" y="213" width="0.4566%" height="15" fill="rgb(242,216,29)" fg:x="76228684" fg:w="1003009"/><text x="34.9532%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (1,003,009 samples, 0.46%)</title><rect x="34.7032%" y="197" width="0.4566%" height="15" fill="rgb(230,116,27)" fg:x="76228684" fg:w="1003009"/><text x="34.9532%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,003,009 samples, 0.46%)</title><rect x="34.7032%" y="181" width="0.4566%" height="15" fill="rgb(228,99,48)" fg:x="76228684" fg:w="1003009"/><text x="34.9532%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1,003,009 samples, 0.46%)</title><rect x="34.7032%" y="165" width="0.4566%" height="15" fill="rgb(253,11,6)" fg:x="76228684" fg:w="1003009"/><text x="34.9532%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,003,009 samples, 0.46%)</title><rect x="34.7032%" y="149" width="0.4566%" height="15" fill="rgb(247,143,39)" fg:x="76228684" fg:w="1003009"/><text x="34.9532%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,003,009 samples, 0.46%)</title><rect x="34.7032%" y="133" width="0.4566%" height="15" fill="rgb(236,97,10)" fg:x="76228684" fg:w="1003009"/><text x="34.9532%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,003,009 samples, 0.46%)</title><rect x="34.7032%" y="117" width="0.4566%" height="15" fill="rgb(233,208,19)" fg:x="76228684" fg:w="1003009"/><text x="34.9532%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,003,009 samples, 0.46%)</title><rect x="34.7032%" y="101" width="0.4566%" height="15" fill="rgb(216,164,2)" fg:x="76228684" fg:w="1003009"/><text x="34.9532%" y="111.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1,003,009 samples, 0.46%)</title><rect x="34.7032%" y="85" width="0.4566%" height="15" fill="rgb(220,129,5)" fg:x="76228684" fg:w="1003009"/><text x="34.9532%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1,003,009 samples, 0.46%)</title><rect x="34.7032%" y="69" width="0.4566%" height="15" fill="rgb(242,17,10)" fg:x="76228684" fg:w="1003009"/><text x="34.9532%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (1,003,009 samples, 0.46%)</title><rect x="34.7032%" y="53" width="0.4566%" height="15" fill="rgb(242,107,0)" fg:x="76228684" fg:w="1003009"/><text x="34.9532%" y="63.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.46%)</title><rect x="34.7032%" y="37" width="0.4566%" height="15" fill="rgb(251,28,31)" fg:x="76228684" fg:w="1003009"/><text x="34.9532%" y="47.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.46%)</title><rect x="35.1598%" y="213" width="0.4566%" height="15" fill="rgb(233,223,10)" fg:x="77231693" fg:w="1003009"/><text x="35.4098%" y="223.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,003,009 samples, 0.46%)</title><rect x="35.1598%" y="197" width="0.4566%" height="15" fill="rgb(215,21,27)" fg:x="77231693" fg:w="1003009"/><text x="35.4098%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (7,021,063 samples, 3.20%)</title><rect x="33.3333%" y="245" width="3.1963%" height="15" fill="rgb(232,23,21)" fg:x="73219657" fg:w="7021063"/><text x="33.5833%" y="255.50">all..</text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (7,021,063 samples, 3.20%)</title><rect x="33.3333%" y="229" width="3.1963%" height="15" fill="rgb(244,5,23)" fg:x="73219657" fg:w="7021063"/><text x="33.5833%" y="239.50">&lt;[V..</text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (17,051,153 samples, 7.76%)</title><rect x="29.6804%" y="261" width="7.7626%" height="15" fill="rgb(226,81,46)" fg:x="65195585" fg:w="17051153"/><text x="29.9304%" y="271.50">chlang::boa..</text></g><g><title>__GI___libc_malloc (3,009,027 samples, 1.37%)</title><rect x="37.4429%" y="133" width="1.3699%" height="15" fill="rgb(247,70,30)" fg:x="82246738" fg:w="3009027"/><text x="37.6929%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4,012,036 samples, 1.83%)</title><rect x="37.4429%" y="245" width="1.8265%" height="15" fill="rgb(212,68,19)" fg:x="82246738" fg:w="4012036"/><text x="37.6929%" y="255.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,012,036 samples, 1.83%)</title><rect x="37.4429%" y="229" width="1.8265%" height="15" fill="rgb(240,187,13)" fg:x="82246738" fg:w="4012036"/><text x="37.6929%" y="239.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,012,036 samples, 1.83%)</title><rect x="37.4429%" y="213" width="1.8265%" height="15" fill="rgb(223,113,26)" fg:x="82246738" fg:w="4012036"/><text x="37.6929%" y="223.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (4,012,036 samples, 1.83%)</title><rect x="37.4429%" y="197" width="1.8265%" height="15" fill="rgb(206,192,2)" fg:x="82246738" fg:w="4012036"/><text x="37.6929%" y="207.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,012,036 samples, 1.83%)</title><rect x="37.4429%" y="181" width="1.8265%" height="15" fill="rgb(241,108,4)" fg:x="82246738" fg:w="4012036"/><text x="37.6929%" y="191.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (4,012,036 samples, 1.83%)</title><rect x="37.4429%" y="165" width="1.8265%" height="15" fill="rgb(247,173,49)" fg:x="82246738" fg:w="4012036"/><text x="37.6929%" y="175.50">a..</text></g><g><title>alloc::alloc::alloc (4,012,036 samples, 1.83%)</title><rect x="37.4429%" y="149" width="1.8265%" height="15" fill="rgb(224,114,35)" fg:x="82246738" fg:w="4012036"/><text x="37.6929%" y="159.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,009,027 samples, 1.37%)</title><rect x="39.2694%" y="245" width="1.3699%" height="15" fill="rgb(245,159,27)" fg:x="86258774" fg:w="3009027"/><text x="39.5194%" y="255.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (10,030,090 samples, 4.57%)</title><rect x="37.4429%" y="261" width="4.5662%" height="15" fill="rgb(245,172,44)" fg:x="82246738" fg:w="10030090"/><text x="37.6929%" y="271.50">chlan..</text></g><g><title>chlang::cmove::Move::new (1,003,009 samples, 0.46%)</title><rect x="42.0091%" y="245" width="0.4566%" height="15" fill="rgb(236,23,11)" fg:x="92276828" fg:w="1003009"/><text x="42.2591%" y="255.50"></text></g><g><title>tcache_get (1,003,009 samples, 0.46%)</title><rect x="42.4658%" y="117" width="0.4566%" height="15" fill="rgb(205,117,38)" fg:x="93279837" fg:w="1003009"/><text x="42.7158%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.91%)</title><rect x="42.4658%" y="213" width="0.9132%" height="15" fill="rgb(237,72,25)" fg:x="93279837" fg:w="2006018"/><text x="42.7158%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2,006,018 samples, 0.91%)</title><rect x="42.4658%" y="197" width="0.9132%" height="15" fill="rgb(244,70,9)" fg:x="93279837" fg:w="2006018"/><text x="42.7158%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,006,018 samples, 0.91%)</title><rect x="42.4658%" y="181" width="0.9132%" height="15" fill="rgb(217,125,39)" fg:x="93279837" fg:w="2006018"/><text x="42.7158%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,006,018 samples, 0.91%)</title><rect x="42.4658%" y="165" width="0.9132%" height="15" fill="rgb(235,36,10)" fg:x="93279837" fg:w="2006018"/><text x="42.7158%" y="175.50"></text></g><g><title>alloc::alloc::alloc (2,006,018 samples, 0.91%)</title><rect x="42.4658%" y="149" width="0.9132%" height="15" fill="rgb(251,123,47)" fg:x="93279837" fg:w="2006018"/><text x="42.7158%" y="159.50"></text></g><g><title>__GI___libc_malloc (2,006,018 samples, 0.91%)</title><rect x="42.4658%" y="133" width="0.9132%" height="15" fill="rgb(221,13,13)" fg:x="93279837" fg:w="2006018"/><text x="42.7158%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3,009,027 samples, 1.37%)</title><rect x="42.4658%" y="245" width="1.3699%" height="15" fill="rgb(238,131,9)" fg:x="93279837" fg:w="3009027"/><text x="42.7158%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,009,027 samples, 1.37%)</title><rect x="42.4658%" y="229" width="1.3699%" height="15" fill="rgb(211,50,8)" fg:x="93279837" fg:w="3009027"/><text x="42.7158%" y="239.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.46%)</title><rect x="43.8356%" y="229" width="0.4566%" height="15" fill="rgb(245,182,24)" fg:x="96288864" fg:w="1003009"/><text x="44.0856%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,006,018 samples, 0.91%)</title><rect x="43.8356%" y="245" width="0.9132%" height="15" fill="rgb(242,14,37)" fg:x="96288864" fg:w="2006018"/><text x="44.0856%" y="255.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (12,036,108 samples, 5.48%)</title><rect x="42.0091%" y="261" width="5.4795%" height="15" fill="rgb(246,228,12)" fg:x="92276828" fg:w="12036108"/><text x="42.2591%" y="271.50">chlang:..</text></g><g><title>chlang::board::Position::valid (2,006,018 samples, 0.91%)</title><rect x="47.4886%" y="245" width="0.9132%" height="15" fill="rgb(213,55,15)" fg:x="104312936" fg:w="2006018"/><text x="47.7386%" y="255.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.46%)</title><rect x="48.4018%" y="245" width="0.4566%" height="15" fill="rgb(209,9,3)" fg:x="106318954" fg:w="1003009"/><text x="48.6518%" y="255.50"></text></g><g><title>__rdl_alloc (1,003,009 samples, 0.46%)</title><rect x="48.8584%" y="133" width="0.4566%" height="15" fill="rgb(230,59,30)" fg:x="107321963" fg:w="1003009"/><text x="49.1084%" y="143.50"></text></g><g><title>tcache_get (1,003,009 samples, 0.46%)</title><rect x="49.3151%" y="117" width="0.4566%" height="15" fill="rgb(209,121,21)" fg:x="108324972" fg:w="1003009"/><text x="49.5651%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4,012,036 samples, 1.83%)</title><rect x="48.8584%" y="245" width="1.8265%" height="15" fill="rgb(220,109,13)" fg:x="107321963" fg:w="4012036"/><text x="49.1084%" y="255.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,012,036 samples, 1.83%)</title><rect x="48.8584%" y="229" width="1.8265%" height="15" fill="rgb(232,18,1)" fg:x="107321963" fg:w="4012036"/><text x="49.1084%" y="239.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,012,036 samples, 1.83%)</title><rect x="48.8584%" y="213" width="1.8265%" height="15" fill="rgb(215,41,42)" fg:x="107321963" fg:w="4012036"/><text x="49.1084%" y="223.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (4,012,036 samples, 1.83%)</title><rect x="48.8584%" y="197" width="1.8265%" height="15" fill="rgb(224,123,36)" fg:x="107321963" fg:w="4012036"/><text x="49.1084%" y="207.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,012,036 samples, 1.83%)</title><rect x="48.8584%" y="181" width="1.8265%" height="15" fill="rgb(240,125,3)" fg:x="107321963" fg:w="4012036"/><text x="49.1084%" y="191.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (4,012,036 samples, 1.83%)</title><rect x="48.8584%" y="165" width="1.8265%" height="15" fill="rgb(205,98,50)" fg:x="107321963" fg:w="4012036"/><text x="49.1084%" y="175.50">a..</text></g><g><title>alloc::alloc::alloc (4,012,036 samples, 1.83%)</title><rect x="48.8584%" y="149" width="1.8265%" height="15" fill="rgb(205,185,37)" fg:x="107321963" fg:w="4012036"/><text x="49.1084%" y="159.50">a..</text></g><g><title>__GI___libc_malloc (3,009,027 samples, 1.37%)</title><rect x="49.3151%" y="133" width="1.3699%" height="15" fill="rgb(238,207,15)" fg:x="108324972" fg:w="3009027"/><text x="49.5651%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,009,027 samples, 1.37%)</title><rect x="50.6849%" y="245" width="1.3699%" height="15" fill="rgb(213,199,42)" fg:x="111333999" fg:w="3009027"/><text x="50.9349%" y="255.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (13,039,117 samples, 5.94%)</title><rect x="47.4886%" y="261" width="5.9361%" height="15" fill="rgb(235,201,11)" fg:x="104312936" fg:w="13039117"/><text x="47.7386%" y="271.50">chlang::..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.46%)</title><rect x="53.4247%" y="261" width="0.4566%" height="15" fill="rgb(207,46,11)" fg:x="117352053" fg:w="1003009"/><text x="53.6747%" y="271.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,003,009 samples, 0.46%)</title><rect x="53.4247%" y="245" width="0.4566%" height="15" fill="rgb(241,35,35)" fg:x="117352053" fg:w="1003009"/><text x="53.6747%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (3,009,027 samples, 1.37%)</title><rect x="53.8813%" y="261" width="1.3699%" height="15" fill="rgb(243,32,47)" fg:x="118355062" fg:w="3009027"/><text x="54.1313%" y="271.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (3,009,027 samples, 1.37%)</title><rect x="53.8813%" y="245" width="1.3699%" height="15" fill="rgb(247,202,23)" fg:x="118355062" fg:w="3009027"/><text x="54.1313%" y="255.50"></text></g><g><title>chlang::board::Board::attacked_by_color (114,343,026 samples, 52.05%)</title><rect x="7.3059%" y="277" width="52.0548%" height="15" fill="rgb(219,102,11)" fg:x="16048144" fg:w="114343026"/><text x="7.5559%" y="287.50">chlang::board::Board::attacked_by_color</text></g><g><title>&lt;chlang::board::Position as core::convert::From&lt;u64&gt;&gt;::from (1,003,009 samples, 0.46%)</title><rect x="59.3607%" y="277" width="0.4566%" height="15" fill="rgb(243,110,44)" fg:x="130391170" fg:w="1003009"/><text x="59.6107%" y="287.50"></text></g><g><title>chlang::board::Board::is_valid (116,349,044 samples, 52.97%)</title><rect x="7.3059%" y="293" width="52.9680%" height="15" fill="rgb(222,74,54)" fg:x="16048144" fg:w="116349044"/><text x="7.5559%" y="303.50">chlang::board::Board::is_valid</text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.46%)</title><rect x="60.2740%" y="261" width="0.4566%" height="15" fill="rgb(216,99,12)" fg:x="132397188" fg:w="1003009"/><text x="60.5240%" y="271.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (2,006,018 samples, 0.91%)</title><rect x="60.2740%" y="277" width="0.9132%" height="15" fill="rgb(226,22,26)" fg:x="132397188" fg:w="2006018"/><text x="60.5240%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.46%)</title><rect x="60.7306%" y="261" width="0.4566%" height="15" fill="rgb(217,163,10)" fg:x="133400197" fg:w="1003009"/><text x="60.9806%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="60.7306%" y="245" width="0.4566%" height="15" fill="rgb(213,25,53)" fg:x="133400197" fg:w="1003009"/><text x="60.9806%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="60.7306%" y="229" width="0.4566%" height="15" fill="rgb(252,105,26)" fg:x="133400197" fg:w="1003009"/><text x="60.9806%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.46%)</title><rect x="60.7306%" y="213" width="0.4566%" height="15" fill="rgb(220,39,43)" fg:x="133400197" fg:w="1003009"/><text x="60.9806%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.46%)</title><rect x="60.7306%" y="197" width="0.4566%" height="15" fill="rgb(229,68,48)" fg:x="133400197" fg:w="1003009"/><text x="60.9806%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.46%)</title><rect x="60.7306%" y="181" width="0.4566%" height="15" fill="rgb(252,8,32)" fg:x="133400197" fg:w="1003009"/><text x="60.9806%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.46%)</title><rect x="60.7306%" y="165" width="0.4566%" height="15" fill="rgb(223,20,43)" fg:x="133400197" fg:w="1003009"/><text x="60.9806%" y="175.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.46%)</title><rect x="60.7306%" y="149" width="0.4566%" height="15" fill="rgb(229,81,49)" fg:x="133400197" fg:w="1003009"/><text x="60.9806%" y="159.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (1,003,009 samples, 0.46%)</title><rect x="61.1872%" y="277" width="0.4566%" height="15" fill="rgb(236,28,36)" fg:x="134403206" fg:w="1003009"/><text x="61.4372%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (1,003,009 samples, 0.46%)</title><rect x="61.1872%" y="261" width="0.4566%" height="15" fill="rgb(249,185,26)" fg:x="134403206" fg:w="1003009"/><text x="61.4372%" y="271.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (1,003,009 samples, 0.46%)</title><rect x="61.1872%" y="245" width="0.4566%" height="15" fill="rgb(249,174,33)" fg:x="134403206" fg:w="1003009"/><text x="61.4372%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.46%)</title><rect x="61.1872%" y="229" width="0.4566%" height="15" fill="rgb(233,201,37)" fg:x="134403206" fg:w="1003009"/><text x="61.4372%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="61.1872%" y="213" width="0.4566%" height="15" fill="rgb(221,78,26)" fg:x="134403206" fg:w="1003009"/><text x="61.4372%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="61.1872%" y="197" width="0.4566%" height="15" fill="rgb(250,127,30)" fg:x="134403206" fg:w="1003009"/><text x="61.4372%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.46%)</title><rect x="61.1872%" y="181" width="0.4566%" height="15" fill="rgb(230,49,44)" fg:x="134403206" fg:w="1003009"/><text x="61.4372%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.46%)</title><rect x="61.1872%" y="165" width="0.4566%" height="15" fill="rgb(229,67,23)" fg:x="134403206" fg:w="1003009"/><text x="61.4372%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.46%)</title><rect x="61.1872%" y="149" width="0.4566%" height="15" fill="rgb(249,83,47)" fg:x="134403206" fg:w="1003009"/><text x="61.4372%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.46%)</title><rect x="61.1872%" y="133" width="0.4566%" height="15" fill="rgb(215,43,3)" fg:x="134403206" fg:w="1003009"/><text x="61.4372%" y="143.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.46%)</title><rect x="61.1872%" y="117" width="0.4566%" height="15" fill="rgb(238,154,13)" fg:x="134403206" fg:w="1003009"/><text x="61.4372%" y="127.50"></text></g><g><title>chlang::board::Position::valid (1,003,009 samples, 0.46%)</title><rect x="61.6438%" y="261" width="0.4566%" height="15" fill="rgb(219,56,2)" fg:x="135406215" fg:w="1003009"/><text x="61.8938%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,003,009 samples, 0.46%)</title><rect x="62.1005%" y="261" width="0.4566%" height="15" fill="rgb(233,0,4)" fg:x="136409224" fg:w="1003009"/><text x="62.3505%" y="271.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (3,009,027 samples, 1.37%)</title><rect x="61.6438%" y="277" width="1.3699%" height="15" fill="rgb(235,30,7)" fg:x="135406215" fg:w="3009027"/><text x="61.8938%" y="287.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (1,003,009 samples, 0.46%)</title><rect x="63.0137%" y="277" width="0.4566%" height="15" fill="rgb(250,79,13)" fg:x="138415242" fg:w="1003009"/><text x="63.2637%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,003,009 samples, 0.46%)</title><rect x="63.0137%" y="261" width="0.4566%" height="15" fill="rgb(211,146,34)" fg:x="138415242" fg:w="1003009"/><text x="63.2637%" y="271.50"></text></g><g><title>tcache_get (1,003,009 samples, 0.46%)</title><rect x="63.4703%" y="117" width="0.4566%" height="15" fill="rgb(228,22,38)" fg:x="139418251" fg:w="1003009"/><text x="63.7203%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,006,018 samples, 0.91%)</title><rect x="63.4703%" y="245" width="0.9132%" height="15" fill="rgb(235,168,5)" fg:x="139418251" fg:w="2006018"/><text x="63.7203%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.91%)</title><rect x="63.4703%" y="229" width="0.9132%" height="15" fill="rgb(221,155,16)" fg:x="139418251" fg:w="2006018"/><text x="63.7203%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 0.91%)</title><rect x="63.4703%" y="213" width="0.9132%" height="15" fill="rgb(215,215,53)" fg:x="139418251" fg:w="2006018"/><text x="63.7203%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2,006,018 samples, 0.91%)</title><rect x="63.4703%" y="197" width="0.9132%" height="15" fill="rgb(223,4,10)" fg:x="139418251" fg:w="2006018"/><text x="63.7203%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,006,018 samples, 0.91%)</title><rect x="63.4703%" y="181" width="0.9132%" height="15" fill="rgb(234,103,6)" fg:x="139418251" fg:w="2006018"/><text x="63.7203%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,006,018 samples, 0.91%)</title><rect x="63.4703%" y="165" width="0.9132%" height="15" fill="rgb(227,97,0)" fg:x="139418251" fg:w="2006018"/><text x="63.7203%" y="175.50"></text></g><g><title>alloc::alloc::alloc (2,006,018 samples, 0.91%)</title><rect x="63.4703%" y="149" width="0.9132%" height="15" fill="rgb(234,150,53)" fg:x="139418251" fg:w="2006018"/><text x="63.7203%" y="159.50"></text></g><g><title>__GI___libc_malloc (2,006,018 samples, 0.91%)</title><rect x="63.4703%" y="133" width="0.9132%" height="15" fill="rgb(228,201,54)" fg:x="139418251" fg:w="2006018"/><text x="63.7203%" y="143.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (5,015,045 samples, 2.28%)</title><rect x="63.4703%" y="277" width="2.2831%" height="15" fill="rgb(222,22,37)" fg:x="139418251" fg:w="5015045"/><text x="63.7203%" y="287.50">a..</text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (5,015,045 samples, 2.28%)</title><rect x="63.4703%" y="261" width="2.2831%" height="15" fill="rgb(237,53,32)" fg:x="139418251" fg:w="5015045"/><text x="63.7203%" y="271.50">&lt;..</text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (17,051,153 samples, 7.76%)</title><rect x="60.2740%" y="293" width="7.7626%" height="15" fill="rgb(233,25,53)" fg:x="132397188" fg:w="17051153"/><text x="60.5240%" y="303.50">chlang::boa..</text></g><g><title>chlang::board::Board::make_move (150,451,350 samples, 68.49%)</title><rect x="3.1963%" y="309" width="68.4932%" height="15" fill="rgb(210,40,34)" fg:x="7021063" fg:w="150451350"/><text x="3.4463%" y="319.50">chlang::board::Board::make_move</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 1.37%)</title><rect x="71.6895%" y="293" width="1.3699%" height="15" fill="rgb(241,220,44)" fg:x="157472413" fg:w="3009027"/><text x="71.9395%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 1.37%)</title><rect x="71.6895%" y="277" width="1.3699%" height="15" fill="rgb(235,28,35)" fg:x="157472413" fg:w="3009027"/><text x="71.9395%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (3,009,027 samples, 1.37%)</title><rect x="71.6895%" y="261" width="1.3699%" height="15" fill="rgb(210,56,17)" fg:x="157472413" fg:w="3009027"/><text x="71.9395%" y="271.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 1.37%)</title><rect x="71.6895%" y="245" width="1.3699%" height="15" fill="rgb(224,130,29)" fg:x="157472413" fg:w="3009027"/><text x="71.9395%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 1.37%)</title><rect x="71.6895%" y="229" width="1.3699%" height="15" fill="rgb(235,212,8)" fg:x="157472413" fg:w="3009027"/><text x="71.9395%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 1.37%)</title><rect x="71.6895%" y="213" width="1.3699%" height="15" fill="rgb(223,33,50)" fg:x="157472413" fg:w="3009027"/><text x="71.9395%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,009,027 samples, 1.37%)</title><rect x="71.6895%" y="197" width="1.3699%" height="15" fill="rgb(219,149,13)" fg:x="157472413" fg:w="3009027"/><text x="71.9395%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (3,009,027 samples, 1.37%)</title><rect x="71.6895%" y="181" width="1.3699%" height="15" fill="rgb(250,156,29)" fg:x="157472413" fg:w="3009027"/><text x="71.9395%" y="191.50"></text></g><g><title>__GI___libc_free (3,009,027 samples, 1.37%)</title><rect x="71.6895%" y="165" width="1.3699%" height="15" fill="rgb(216,193,19)" fg:x="157472413" fg:w="3009027"/><text x="71.9395%" y="175.50"></text></g><g><title>_int_free (3,009,027 samples, 1.37%)</title><rect x="71.6895%" y="149" width="1.3699%" height="15" fill="rgb(216,135,14)" fg:x="157472413" fg:w="3009027"/><text x="71.9395%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (2,006,018 samples, 0.91%)</title><rect x="73.0594%" y="293" width="0.9132%" height="15" fill="rgb(241,47,5)" fg:x="160481440" fg:w="2006018"/><text x="73.3094%" y="303.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (1,003,009 samples, 0.46%)</title><rect x="73.9726%" y="277" width="0.4566%" height="15" fill="rgb(233,42,35)" fg:x="162487458" fg:w="1003009"/><text x="74.2226%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (1,003,009 samples, 0.46%)</title><rect x="73.9726%" y="261" width="0.4566%" height="15" fill="rgb(231,13,6)" fg:x="162487458" fg:w="1003009"/><text x="74.2226%" y="271.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (1,003,009 samples, 0.46%)</title><rect x="73.9726%" y="245" width="0.4566%" height="15" fill="rgb(207,181,40)" fg:x="162487458" fg:w="1003009"/><text x="74.2226%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.46%)</title><rect x="73.9726%" y="229" width="0.4566%" height="15" fill="rgb(254,173,49)" fg:x="162487458" fg:w="1003009"/><text x="74.2226%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="73.9726%" y="213" width="0.4566%" height="15" fill="rgb(221,1,38)" fg:x="162487458" fg:w="1003009"/><text x="74.2226%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="73.9726%" y="197" width="0.4566%" height="15" fill="rgb(206,124,46)" fg:x="162487458" fg:w="1003009"/><text x="74.2226%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.46%)</title><rect x="73.9726%" y="181" width="0.4566%" height="15" fill="rgb(249,21,11)" fg:x="162487458" fg:w="1003009"/><text x="74.2226%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.46%)</title><rect x="73.9726%" y="165" width="0.4566%" height="15" fill="rgb(222,201,40)" fg:x="162487458" fg:w="1003009"/><text x="74.2226%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.46%)</title><rect x="73.9726%" y="149" width="0.4566%" height="15" fill="rgb(235,61,29)" fg:x="162487458" fg:w="1003009"/><text x="74.2226%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.46%)</title><rect x="73.9726%" y="133" width="0.4566%" height="15" fill="rgb(219,207,3)" fg:x="162487458" fg:w="1003009"/><text x="74.2226%" y="143.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.46%)</title><rect x="73.9726%" y="117" width="0.4566%" height="15" fill="rgb(222,56,46)" fg:x="162487458" fg:w="1003009"/><text x="74.2226%" y="127.50"></text></g><g><title>tcache_get (1,003,009 samples, 0.46%)</title><rect x="73.9726%" y="101" width="0.4566%" height="15" fill="rgb(239,76,54)" fg:x="162487458" fg:w="1003009"/><text x="74.2226%" y="111.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (2,006,018 samples, 0.91%)</title><rect x="73.9726%" y="293" width="0.9132%" height="15" fill="rgb(231,124,27)" fg:x="162487458" fg:w="2006018"/><text x="74.2226%" y="303.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (1,003,009 samples, 0.46%)</title><rect x="74.4292%" y="277" width="0.4566%" height="15" fill="rgb(249,195,6)" fg:x="163490467" fg:w="1003009"/><text x="74.6792%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.46%)</title><rect x="74.4292%" y="261" width="0.4566%" height="15" fill="rgb(237,174,47)" fg:x="163490467" fg:w="1003009"/><text x="74.6792%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="74.4292%" y="245" width="0.4566%" height="15" fill="rgb(206,201,31)" fg:x="163490467" fg:w="1003009"/><text x="74.6792%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="74.4292%" y="229" width="0.4566%" height="15" fill="rgb(231,57,52)" fg:x="163490467" fg:w="1003009"/><text x="74.6792%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.46%)</title><rect x="74.4292%" y="213" width="0.4566%" height="15" fill="rgb(248,177,22)" fg:x="163490467" fg:w="1003009"/><text x="74.6792%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.46%)</title><rect x="74.4292%" y="197" width="0.4566%" height="15" fill="rgb(215,211,37)" fg:x="163490467" fg:w="1003009"/><text x="74.6792%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.46%)</title><rect x="74.4292%" y="181" width="0.4566%" height="15" fill="rgb(241,128,51)" fg:x="163490467" fg:w="1003009"/><text x="74.6792%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.46%)</title><rect x="74.4292%" y="165" width="0.4566%" height="15" fill="rgb(227,165,31)" fg:x="163490467" fg:w="1003009"/><text x="74.6792%" y="175.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.46%)</title><rect x="74.4292%" y="149" width="0.4566%" height="15" fill="rgb(228,167,24)" fg:x="163490467" fg:w="1003009"/><text x="74.6792%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,009,027 samples, 1.37%)</title><rect x="74.8858%" y="293" width="1.3699%" height="15" fill="rgb(228,143,12)" fg:x="164493476" fg:w="3009027"/><text x="75.1358%" y="303.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves (11,033,099 samples, 5.02%)</title><rect x="71.6895%" y="309" width="5.0228%" height="15" fill="rgb(249,149,8)" fg:x="157472413" fg:w="11033099"/><text x="71.9395%" y="319.50">chlang..</text></g><g><title>chlang::tree_evaluator::eval (168,505,512 samples, 76.71%)</title><rect x="0.4566%" y="357" width="76.7123%" height="15" fill="rgb(243,35,44)" fg:x="1003009" fg:w="168505512"/><text x="0.7066%" y="367.50">chlang::tree_evaluator::eval</text></g><g><title>chlang::board::Board::get_game_state (168,505,512 samples, 76.71%)</title><rect x="0.4566%" y="341" width="76.7123%" height="15" fill="rgb(246,89,9)" fg:x="1003009" fg:w="168505512"/><text x="0.7066%" y="351.50">chlang::board::Board::get_game_state</text></g><g><title>chlang::board::Board::get_valid_moves (167,502,503 samples, 76.26%)</title><rect x="0.9132%" y="325" width="76.2557%" height="15" fill="rgb(233,213,13)" fg:x="2006018" fg:w="167502503"/><text x="1.1632%" y="335.50">chlang::board::Board::get_valid_moves</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.46%)</title><rect x="76.7123%" y="309" width="0.4566%" height="15" fill="rgb(233,141,41)" fg:x="168505512" fg:w="1003009"/><text x="76.9623%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="76.7123%" y="293" width="0.4566%" height="15" fill="rgb(239,167,4)" fg:x="168505512" fg:w="1003009"/><text x="76.9623%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="76.7123%" y="277" width="0.4566%" height="15" fill="rgb(209,217,16)" fg:x="168505512" fg:w="1003009"/><text x="76.9623%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.46%)</title><rect x="76.7123%" y="261" width="0.4566%" height="15" fill="rgb(219,88,35)" fg:x="168505512" fg:w="1003009"/><text x="76.9623%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.46%)</title><rect x="76.7123%" y="245" width="0.4566%" height="15" fill="rgb(220,193,23)" fg:x="168505512" fg:w="1003009"/><text x="76.9623%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.46%)</title><rect x="76.7123%" y="229" width="0.4566%" height="15" fill="rgb(230,90,52)" fg:x="168505512" fg:w="1003009"/><text x="76.9623%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.46%)</title><rect x="76.7123%" y="213" width="0.4566%" height="15" fill="rgb(252,106,19)" fg:x="168505512" fg:w="1003009"/><text x="76.9623%" y="223.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.46%)</title><rect x="76.7123%" y="197" width="0.4566%" height="15" fill="rgb(206,74,20)" fg:x="168505512" fg:w="1003009"/><text x="76.9623%" y="207.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (1,003,009 samples, 0.46%)</title><rect x="77.1689%" y="309" width="0.4566%" height="15" fill="rgb(230,138,44)" fg:x="169508521" fg:w="1003009"/><text x="77.4189%" y="319.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (1,003,009 samples, 0.46%)</title><rect x="77.6256%" y="309" width="0.4566%" height="15" fill="rgb(235,182,43)" fg:x="170511530" fg:w="1003009"/><text x="77.8756%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.46%)</title><rect x="77.6256%" y="293" width="0.4566%" height="15" fill="rgb(242,16,51)" fg:x="170511530" fg:w="1003009"/><text x="77.8756%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="77.6256%" y="277" width="0.4566%" height="15" fill="rgb(248,9,4)" fg:x="170511530" fg:w="1003009"/><text x="77.8756%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="77.6256%" y="261" width="0.4566%" height="15" fill="rgb(210,31,22)" fg:x="170511530" fg:w="1003009"/><text x="77.8756%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.46%)</title><rect x="77.6256%" y="245" width="0.4566%" height="15" fill="rgb(239,54,39)" fg:x="170511530" fg:w="1003009"/><text x="77.8756%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.46%)</title><rect x="77.6256%" y="229" width="0.4566%" height="15" fill="rgb(230,99,41)" fg:x="170511530" fg:w="1003009"/><text x="77.8756%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.46%)</title><rect x="77.6256%" y="213" width="0.4566%" height="15" fill="rgb(253,106,12)" fg:x="170511530" fg:w="1003009"/><text x="77.8756%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.46%)</title><rect x="77.6256%" y="197" width="0.4566%" height="15" fill="rgb(213,46,41)" fg:x="170511530" fg:w="1003009"/><text x="77.8756%" y="207.50"></text></g><g><title>__rust_alloc (1,003,009 samples, 0.46%)</title><rect x="77.6256%" y="181" width="0.4566%" height="15" fill="rgb(215,133,35)" fg:x="170511530" fg:w="1003009"/><text x="77.8756%" y="191.50"></text></g><g><title>chlang::board::Board::is_valid (3,009,027 samples, 1.37%)</title><rect x="77.1689%" y="341" width="1.3699%" height="15" fill="rgb(213,28,5)" fg:x="169508521" fg:w="3009027"/><text x="77.4189%" y="351.50"></text></g><g><title>chlang::board::Board::attacked_by_color (3,009,027 samples, 1.37%)</title><rect x="77.1689%" y="325" width="1.3699%" height="15" fill="rgb(215,77,49)" fg:x="169508521" fg:w="3009027"/><text x="77.4189%" y="335.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (1,003,009 samples, 0.46%)</title><rect x="78.0822%" y="309" width="0.4566%" height="15" fill="rgb(248,100,22)" fg:x="171514539" fg:w="1003009"/><text x="78.3322%" y="319.50"></text></g><g><title>chlang::board::Position::valid (1,003,009 samples, 0.46%)</title><rect x="78.0822%" y="293" width="0.4566%" height="15" fill="rgb(208,67,9)" fg:x="171514539" fg:w="1003009"/><text x="78.3322%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (1,003,009 samples, 0.46%)</title><rect x="78.5388%" y="325" width="0.4566%" height="15" fill="rgb(219,133,21)" fg:x="172517548" fg:w="1003009"/><text x="78.7888%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.46%)</title><rect x="78.5388%" y="309" width="0.4566%" height="15" fill="rgb(246,46,29)" fg:x="172517548" fg:w="1003009"/><text x="78.7888%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.46%)</title><rect x="78.5388%" y="293" width="0.4566%" height="15" fill="rgb(246,185,52)" fg:x="172517548" fg:w="1003009"/><text x="78.7888%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.46%)</title><rect x="78.5388%" y="277" width="0.4566%" height="15" fill="rgb(252,136,11)" fg:x="172517548" fg:w="1003009"/><text x="78.7888%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.46%)</title><rect x="78.5388%" y="261" width="0.4566%" height="15" fill="rgb(219,138,53)" fg:x="172517548" fg:w="1003009"/><text x="78.7888%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.46%)</title><rect x="78.5388%" y="245" width="0.4566%" height="15" fill="rgb(211,51,23)" fg:x="172517548" fg:w="1003009"/><text x="78.7888%" y="255.50"></text></g><g><title>__GI___libc_free (1,003,009 samples, 0.46%)</title><rect x="78.5388%" y="229" width="0.4566%" height="15" fill="rgb(247,221,28)" fg:x="172517548" fg:w="1003009"/><text x="78.7888%" y="239.50"></text></g><g><title>chlang::board::Board::make_move (5,015,045 samples, 2.28%)</title><rect x="77.1689%" y="357" width="2.2831%" height="15" fill="rgb(251,222,45)" fg:x="169508521" fg:w="5015045"/><text x="77.4189%" y="367.50">c..</text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (2,006,018 samples, 0.91%)</title><rect x="78.5388%" y="341" width="0.9132%" height="15" fill="rgb(217,162,53)" fg:x="172517548" fg:w="2006018"/><text x="78.7888%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (1,003,009 samples, 0.46%)</title><rect x="78.9954%" y="325" width="0.4566%" height="15" fill="rgb(229,93,14)" fg:x="173520557" fg:w="1003009"/><text x="79.2454%" y="335.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (1,003,009 samples, 0.46%)</title><rect x="78.9954%" y="309" width="0.4566%" height="15" fill="rgb(209,67,49)" fg:x="173520557" fg:w="1003009"/><text x="79.2454%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,003,009 samples, 0.46%)</title><rect x="78.9954%" y="293" width="0.4566%" height="15" fill="rgb(213,87,29)" fg:x="173520557" fg:w="1003009"/><text x="79.2454%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (1,003,009 samples, 0.46%)</title><rect x="78.9954%" y="277" width="0.4566%" height="15" fill="rgb(205,151,52)" fg:x="173520557" fg:w="1003009"/><text x="79.2454%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,003,009 samples, 0.46%)</title><rect x="78.9954%" y="261" width="0.4566%" height="15" fill="rgb(253,215,39)" fg:x="173520557" fg:w="1003009"/><text x="79.2454%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1,003,009 samples, 0.46%)</title><rect x="78.9954%" y="245" width="0.4566%" height="15" fill="rgb(221,220,41)" fg:x="173520557" fg:w="1003009"/><text x="79.2454%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,003,009 samples, 0.46%)</title><rect x="78.9954%" y="229" width="0.4566%" height="15" fill="rgb(218,133,21)" fg:x="173520557" fg:w="1003009"/><text x="79.2454%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,003,009 samples, 0.46%)</title><rect x="78.9954%" y="213" width="0.4566%" height="15" fill="rgb(221,193,43)" fg:x="173520557" fg:w="1003009"/><text x="79.2454%" y="223.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves (1,003,009 samples, 0.46%)</title><rect x="79.4521%" y="357" width="0.4566%" height="15" fill="rgb(240,128,52)" fg:x="174523566" fg:w="1003009"/><text x="79.7021%" y="367.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (1,003,009 samples, 0.46%)</title><rect x="79.4521%" y="341" width="0.4566%" height="15" fill="rgb(253,114,12)" fg:x="174523566" fg:w="1003009"/><text x="79.7021%" y="351.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (1,003,009 samples, 0.46%)</title><rect x="79.4521%" y="325" width="0.4566%" height="15" fill="rgb(215,223,47)" fg:x="174523566" fg:w="1003009"/><text x="79.7021%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.46%)</title><rect x="79.9087%" y="341" width="0.4566%" height="15" fill="rgb(248,225,23)" fg:x="175526575" fg:w="1003009"/><text x="80.1587%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.46%)</title><rect x="79.9087%" y="325" width="0.4566%" height="15" fill="rgb(250,108,0)" fg:x="175526575" fg:w="1003009"/><text x="80.1587%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.46%)</title><rect x="79.9087%" y="309" width="0.4566%" height="15" fill="rgb(228,208,7)" fg:x="175526575" fg:w="1003009"/><text x="80.1587%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.46%)</title><rect x="79.9087%" y="293" width="0.4566%" height="15" fill="rgb(244,45,10)" fg:x="175526575" fg:w="1003009"/><text x="80.1587%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.46%)</title><rect x="79.9087%" y="277" width="0.4566%" height="15" fill="rgb(207,125,25)" fg:x="175526575" fg:w="1003009"/><text x="80.1587%" y="287.50"></text></g><g><title>__GI___libc_free (1,003,009 samples, 0.46%)</title><rect x="79.9087%" y="261" width="0.4566%" height="15" fill="rgb(210,195,18)" fg:x="175526575" fg:w="1003009"/><text x="80.1587%" y="271.50"></text></g><g><title>_int_free (1,003,009 samples, 0.46%)</title><rect x="79.9087%" y="245" width="0.4566%" height="15" fill="rgb(249,80,12)" fg:x="175526575" fg:w="1003009"/><text x="80.1587%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1,003,009 samples, 0.46%)</title><rect x="80.3653%" y="309" width="0.4566%" height="15" fill="rgb(221,65,9)" fg:x="176529584" fg:w="1003009"/><text x="80.6153%" y="319.50"></text></g><g><title>chlang::board::Board::unmake_last (2,006,018 samples, 0.91%)</title><rect x="80.3653%" y="325" width="0.9132%" height="15" fill="rgb(235,49,36)" fg:x="176529584" fg:w="2006018"/><text x="80.6153%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.46%)</title><rect x="81.2785%" y="309" width="0.4566%" height="15" fill="rgb(225,32,20)" fg:x="178535602" fg:w="1003009"/><text x="81.5285%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.46%)</title><rect x="81.2785%" y="293" width="0.4566%" height="15" fill="rgb(215,141,46)" fg:x="178535602" fg:w="1003009"/><text x="81.5285%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.46%)</title><rect x="81.2785%" y="277" width="0.4566%" height="15" fill="rgb(250,160,47)" fg:x="178535602" fg:w="1003009"/><text x="81.5285%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.46%)</title><rect x="81.2785%" y="261" width="0.4566%" height="15" fill="rgb(216,222,40)" fg:x="178535602" fg:w="1003009"/><text x="81.5285%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.46%)</title><rect x="81.2785%" y="245" width="0.4566%" height="15" fill="rgb(234,217,39)" fg:x="178535602" fg:w="1003009"/><text x="81.5285%" y="255.50"></text></g><g><title>__rdl_dealloc (1,003,009 samples, 0.46%)</title><rect x="81.2785%" y="229" width="0.4566%" height="15" fill="rgb(207,178,40)" fg:x="178535602" fg:w="1003009"/><text x="81.5285%" y="239.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,003,009 samples, 0.46%)</title><rect x="81.2785%" y="213" width="0.4566%" height="15" fill="rgb(221,136,13)" fg:x="178535602" fg:w="1003009"/><text x="81.5285%" y="223.50"></text></g><g><title>chlang::board::Board::piece_type (1,003,009 samples, 0.46%)</title><rect x="81.7352%" y="309" width="0.4566%" height="15" fill="rgb(249,199,10)" fg:x="179538611" fg:w="1003009"/><text x="81.9852%" y="319.50"></text></g><g><title>__rust_dealloc (1,003,009 samples, 0.46%)</title><rect x="82.1918%" y="149" width="0.4566%" height="15" fill="rgb(249,222,13)" fg:x="180541620" fg:w="1003009"/><text x="82.4418%" y="159.50"></text></g><g><title>__rdl_dealloc (2,006,018 samples, 0.91%)</title><rect x="82.6484%" y="149" width="0.9132%" height="15" fill="rgb(244,185,38)" fg:x="181544629" fg:w="2006018"/><text x="82.8984%" y="159.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2,006,018 samples, 0.91%)</title><rect x="82.6484%" y="133" width="0.9132%" height="15" fill="rgb(236,202,9)" fg:x="181544629" fg:w="2006018"/><text x="82.8984%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (6,018,054 samples, 2.74%)</title><rect x="82.1918%" y="277" width="2.7397%" height="15" fill="rgb(250,229,37)" fg:x="180541620" fg:w="6018054"/><text x="82.4418%" y="287.50">co..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,018,054 samples, 2.74%)</title><rect x="82.1918%" y="261" width="2.7397%" height="15" fill="rgb(206,174,23)" fg:x="180541620" fg:w="6018054"/><text x="82.4418%" y="271.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (6,018,054 samples, 2.74%)</title><rect x="82.1918%" y="245" width="2.7397%" height="15" fill="rgb(211,33,43)" fg:x="180541620" fg:w="6018054"/><text x="82.4418%" y="255.50">co..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,018,054 samples, 2.74%)</title><rect x="82.1918%" y="229" width="2.7397%" height="15" fill="rgb(245,58,50)" fg:x="180541620" fg:w="6018054"/><text x="82.4418%" y="239.50">&lt;&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (6,018,054 samples, 2.74%)</title><rect x="82.1918%" y="213" width="2.7397%" height="15" fill="rgb(244,68,36)" fg:x="180541620" fg:w="6018054"/><text x="82.4418%" y="223.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,018,054 samples, 2.74%)</title><rect x="82.1918%" y="197" width="2.7397%" height="15" fill="rgb(232,229,15)" fg:x="180541620" fg:w="6018054"/><text x="82.4418%" y="207.50">&lt;a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,018,054 samples, 2.74%)</title><rect x="82.1918%" y="181" width="2.7397%" height="15" fill="rgb(254,30,23)" fg:x="180541620" fg:w="6018054"/><text x="82.4418%" y="191.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (6,018,054 samples, 2.74%)</title><rect x="82.1918%" y="165" width="2.7397%" height="15" fill="rgb(235,160,14)" fg:x="180541620" fg:w="6018054"/><text x="82.4418%" y="175.50">al..</text></g><g><title>__GI___libc_free (3,009,027 samples, 1.37%)</title><rect x="83.5616%" y="149" width="1.3699%" height="15" fill="rgb(212,155,44)" fg:x="183550647" fg:w="3009027"/><text x="83.8116%" y="159.50"></text></g><g><title>_int_free (3,009,027 samples, 1.37%)</title><rect x="83.5616%" y="133" width="1.3699%" height="15" fill="rgb(226,2,50)" fg:x="183550647" fg:w="3009027"/><text x="83.8116%" y="143.50"></text></g><g><title>chlang::board::Board::piece_type (1,003,009 samples, 0.46%)</title><rect x="84.9315%" y="277" width="0.4566%" height="15" fill="rgb(234,177,6)" fg:x="186559674" fg:w="1003009"/><text x="85.1815%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,003,009 samples, 0.46%)</title><rect x="85.3881%" y="261" width="0.4566%" height="15" fill="rgb(217,24,9)" fg:x="187562683" fg:w="1003009"/><text x="85.6381%" y="271.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (2,006,018 samples, 0.91%)</title><rect x="85.3881%" y="277" width="0.9132%" height="15" fill="rgb(220,13,46)" fg:x="187562683" fg:w="2006018"/><text x="85.6381%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (1,003,009 samples, 0.46%)</title><rect x="86.3014%" y="261" width="0.4566%" height="15" fill="rgb(239,221,27)" fg:x="189568701" fg:w="1003009"/><text x="86.5514%" y="271.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (1,003,009 samples, 0.46%)</title><rect x="86.3014%" y="245" width="0.4566%" height="15" fill="rgb(222,198,25)" fg:x="189568701" fg:w="1003009"/><text x="86.5514%" y="255.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (2,006,018 samples, 0.91%)</title><rect x="86.3014%" y="277" width="0.9132%" height="15" fill="rgb(211,99,13)" fg:x="189568701" fg:w="2006018"/><text x="86.5514%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.46%)</title><rect x="86.7580%" y="261" width="0.4566%" height="15" fill="rgb(232,111,31)" fg:x="190571710" fg:w="1003009"/><text x="87.0080%" y="271.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (1,003,009 samples, 0.46%)</title><rect x="87.2146%" y="277" width="0.4566%" height="15" fill="rgb(245,82,37)" fg:x="191574719" fg:w="1003009"/><text x="87.4646%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.46%)</title><rect x="87.2146%" y="261" width="0.4566%" height="15" fill="rgb(227,149,46)" fg:x="191574719" fg:w="1003009"/><text x="87.4646%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="87.2146%" y="245" width="0.4566%" height="15" fill="rgb(218,36,50)" fg:x="191574719" fg:w="1003009"/><text x="87.4646%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="87.2146%" y="229" width="0.4566%" height="15" fill="rgb(226,80,48)" fg:x="191574719" fg:w="1003009"/><text x="87.4646%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.46%)</title><rect x="87.2146%" y="213" width="0.4566%" height="15" fill="rgb(238,224,15)" fg:x="191574719" fg:w="1003009"/><text x="87.4646%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.46%)</title><rect x="87.2146%" y="197" width="0.4566%" height="15" fill="rgb(241,136,10)" fg:x="191574719" fg:w="1003009"/><text x="87.4646%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.46%)</title><rect x="87.2146%" y="181" width="0.4566%" height="15" fill="rgb(208,32,45)" fg:x="191574719" fg:w="1003009"/><text x="87.4646%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.46%)</title><rect x="87.2146%" y="165" width="0.4566%" height="15" fill="rgb(207,135,9)" fg:x="191574719" fg:w="1003009"/><text x="87.4646%" y="175.50"></text></g><g><title>__rust_alloc (1,003,009 samples, 0.46%)</title><rect x="87.2146%" y="149" width="0.4566%" height="15" fill="rgb(206,86,44)" fg:x="191574719" fg:w="1003009"/><text x="87.4646%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,003,009 samples, 0.46%)</title><rect x="87.6712%" y="261" width="0.4566%" height="15" fill="rgb(245,177,15)" fg:x="192577728" fg:w="1003009"/><text x="87.9212%" y="271.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (2,006,018 samples, 0.91%)</title><rect x="87.6712%" y="277" width="0.9132%" height="15" fill="rgb(206,64,50)" fg:x="192577728" fg:w="2006018"/><text x="87.9212%" y="287.50"></text></g><g><title>chlang::board::Position::valid (1,003,009 samples, 0.46%)</title><rect x="88.5845%" y="261" width="0.4566%" height="15" fill="rgb(234,36,40)" fg:x="194583746" fg:w="1003009"/><text x="88.8345%" y="271.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (2,006,018 samples, 0.91%)</title><rect x="88.5845%" y="277" width="0.9132%" height="15" fill="rgb(213,64,8)" fg:x="194583746" fg:w="2006018"/><text x="88.8345%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.46%)</title><rect x="89.0411%" y="261" width="0.4566%" height="15" fill="rgb(210,75,36)" fg:x="195586755" fg:w="1003009"/><text x="89.2911%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="89.0411%" y="245" width="0.4566%" height="15" fill="rgb(229,88,21)" fg:x="195586755" fg:w="1003009"/><text x="89.2911%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="89.0411%" y="229" width="0.4566%" height="15" fill="rgb(252,204,47)" fg:x="195586755" fg:w="1003009"/><text x="89.2911%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.46%)</title><rect x="89.0411%" y="213" width="0.4566%" height="15" fill="rgb(208,77,27)" fg:x="195586755" fg:w="1003009"/><text x="89.2911%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.46%)</title><rect x="89.0411%" y="197" width="0.4566%" height="15" fill="rgb(221,76,26)" fg:x="195586755" fg:w="1003009"/><text x="89.2911%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.46%)</title><rect x="89.0411%" y="181" width="0.4566%" height="15" fill="rgb(225,139,18)" fg:x="195586755" fg:w="1003009"/><text x="89.2911%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.46%)</title><rect x="89.0411%" y="165" width="0.4566%" height="15" fill="rgb(230,137,11)" fg:x="195586755" fg:w="1003009"/><text x="89.2911%" y="175.50"></text></g><g><title>__rdl_alloc (1,003,009 samples, 0.46%)</title><rect x="89.0411%" y="149" width="0.4566%" height="15" fill="rgb(212,28,1)" fg:x="195586755" fg:w="1003009"/><text x="89.2911%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1,003,009 samples, 0.46%)</title><rect x="89.4977%" y="277" width="0.4566%" height="15" fill="rgb(248,164,17)" fg:x="196589764" fg:w="1003009"/><text x="89.7477%" y="287.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (1,003,009 samples, 0.46%)</title><rect x="89.4977%" y="261" width="0.4566%" height="15" fill="rgb(222,171,42)" fg:x="196589764" fg:w="1003009"/><text x="89.7477%" y="271.50"></text></g><g><title>chlang::board::Board::is_valid (19,057,171 samples, 8.68%)</title><rect x="82.1918%" y="309" width="8.6758%" height="15" fill="rgb(243,84,45)" fg:x="180541620" fg:w="19057171"/><text x="82.4418%" y="319.50">chlang::boar..</text></g><g><title>chlang::board::Board::attacked_by_color (19,057,171 samples, 8.68%)</title><rect x="82.1918%" y="293" width="8.6758%" height="15" fill="rgb(252,49,23)" fg:x="180541620" fg:w="19057171"/><text x="82.4418%" y="303.50">chlang::boar..</text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (2,006,018 samples, 0.91%)</title><rect x="90.8676%" y="293" width="0.9132%" height="15" fill="rgb(215,19,7)" fg:x="199598791" fg:w="2006018"/><text x="91.1176%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,006,018 samples, 0.91%)</title><rect x="90.8676%" y="277" width="0.9132%" height="15" fill="rgb(238,81,41)" fg:x="199598791" fg:w="2006018"/><text x="91.1176%" y="287.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (1,003,009 samples, 0.46%)</title><rect x="91.7808%" y="293" width="0.4566%" height="15" fill="rgb(210,199,37)" fg:x="201604809" fg:w="1003009"/><text x="92.0308%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1,003,009 samples, 0.46%)</title><rect x="91.7808%" y="277" width="0.4566%" height="15" fill="rgb(244,192,49)" fg:x="201604809" fg:w="1003009"/><text x="92.0308%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.46%)</title><rect x="92.2374%" y="277" width="0.4566%" height="15" fill="rgb(226,211,11)" fg:x="202607818" fg:w="1003009"/><text x="92.4874%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="92.2374%" y="261" width="0.4566%" height="15" fill="rgb(236,162,54)" fg:x="202607818" fg:w="1003009"/><text x="92.4874%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="92.2374%" y="245" width="0.4566%" height="15" fill="rgb(220,229,9)" fg:x="202607818" fg:w="1003009"/><text x="92.4874%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.46%)</title><rect x="92.2374%" y="229" width="0.4566%" height="15" fill="rgb(250,87,22)" fg:x="202607818" fg:w="1003009"/><text x="92.4874%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.46%)</title><rect x="92.2374%" y="213" width="0.4566%" height="15" fill="rgb(239,43,17)" fg:x="202607818" fg:w="1003009"/><text x="92.4874%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.46%)</title><rect x="92.2374%" y="197" width="0.4566%" height="15" fill="rgb(231,177,25)" fg:x="202607818" fg:w="1003009"/><text x="92.4874%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.46%)</title><rect x="92.2374%" y="181" width="0.4566%" height="15" fill="rgb(219,179,1)" fg:x="202607818" fg:w="1003009"/><text x="92.4874%" y="191.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.46%)</title><rect x="92.2374%" y="165" width="0.4566%" height="15" fill="rgb(238,219,53)" fg:x="202607818" fg:w="1003009"/><text x="92.4874%" y="175.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (2,006,018 samples, 0.91%)</title><rect x="92.2374%" y="293" width="0.9132%" height="15" fill="rgb(232,167,36)" fg:x="202607818" fg:w="2006018"/><text x="92.4874%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,003,009 samples, 0.46%)</title><rect x="92.6941%" y="277" width="0.4566%" height="15" fill="rgb(244,19,51)" fg:x="203610827" fg:w="1003009"/><text x="92.9441%" y="287.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.46%)</title><rect x="92.6941%" y="261" width="0.4566%" height="15" fill="rgb(224,6,22)" fg:x="203610827" fg:w="1003009"/><text x="92.9441%" y="271.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (6,018,054 samples, 2.74%)</title><rect x="90.8676%" y="309" width="2.7397%" height="15" fill="rgb(224,145,5)" fg:x="199598791" fg:w="6018054"/><text x="91.1176%" y="319.50">ch..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (1,003,009 samples, 0.46%)</title><rect x="93.1507%" y="293" width="0.4566%" height="15" fill="rgb(234,130,49)" fg:x="204613836" fg:w="1003009"/><text x="93.4007%" y="303.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (1,003,009 samples, 0.46%)</title><rect x="93.1507%" y="277" width="0.4566%" height="15" fill="rgb(254,6,2)" fg:x="204613836" fg:w="1003009"/><text x="93.4007%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.46%)</title><rect x="93.1507%" y="261" width="0.4566%" height="15" fill="rgb(208,96,46)" fg:x="204613836" fg:w="1003009"/><text x="93.4007%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="93.1507%" y="245" width="0.4566%" height="15" fill="rgb(239,3,39)" fg:x="204613836" fg:w="1003009"/><text x="93.4007%" y="255.50"></text></g><g><title>chlang::board::Board::make_move (28,084,252 samples, 12.79%)</title><rect x="81.2785%" y="325" width="12.7854%" height="15" fill="rgb(233,210,1)" fg:x="178535602" fg:w="28084252"/><text x="81.5285%" y="335.50">chlang::board::Boar..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,003,009 samples, 0.46%)</title><rect x="93.6073%" y="309" width="0.4566%" height="15" fill="rgb(244,137,37)" fg:x="205616845" fg:w="1003009"/><text x="93.8573%" y="319.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.46%)</title><rect x="93.6073%" y="293" width="0.4566%" height="15" fill="rgb(240,136,2)" fg:x="205616845" fg:w="1003009"/><text x="93.8573%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.46%)</title><rect x="94.0639%" y="309" width="0.4566%" height="15" fill="rgb(239,18,37)" fg:x="206619854" fg:w="1003009"/><text x="94.3139%" y="319.50"></text></g><g><title>chlang::board::Board::get_game_state (33,099,297 samples, 15.07%)</title><rect x="79.9087%" y="357" width="15.0685%" height="15" fill="rgb(218,185,22)" fg:x="175526575" fg:w="33099297"/><text x="80.1587%" y="367.50">chlang::board::Board::g..</text></g><g><title>chlang::board::Board::get_valid_moves (32,096,288 samples, 14.61%)</title><rect x="80.3653%" y="341" width="14.6119%" height="15" fill="rgb(225,218,4)" fg:x="176529584" fg:w="32096288"/><text x="80.6153%" y="351.50">chlang::board::Board::..</text></g><g><title>chlang::board::Board::get_pseudo_legal_moves (2,006,018 samples, 0.91%)</title><rect x="94.0639%" y="325" width="0.9132%" height="15" fill="rgb(230,182,32)" fg:x="206619854" fg:w="2006018"/><text x="94.3139%" y="335.50"></text></g><g><title>&lt;chlang::evaluators::material_evaluator::MaterialEvaluator as chlang::tree_evaluator::Eval&gt;::evaluate (1,003,009 samples, 0.46%)</title><rect x="94.9772%" y="357" width="0.4566%" height="15" fill="rgb(242,56,43)" fg:x="208625872" fg:w="1003009"/><text x="95.2272%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (1,003,009 samples, 0.46%)</title><rect x="94.9772%" y="341" width="0.4566%" height="15" fill="rgb(233,99,24)" fg:x="208625872" fg:w="1003009"/><text x="95.2272%" y="351.50"></text></g><g><title>rand::rng::Rng::gen (2,006,018 samples, 0.91%)</title><rect x="95.4338%" y="261" width="0.9132%" height="15" fill="rgb(234,209,42)" fg:x="209628881" fg:w="2006018"/><text x="95.6838%" y="271.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (2,006,018 samples, 0.91%)</title><rect x="95.4338%" y="245" width="0.9132%" height="15" fill="rgb(227,7,12)" fg:x="209628881" fg:w="2006018"/><text x="95.6838%" y="255.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (2,006,018 samples, 0.91%)</title><rect x="95.4338%" y="229" width="0.9132%" height="15" fill="rgb(245,203,43)" fg:x="209628881" fg:w="2006018"/><text x="95.6838%" y="239.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (2,006,018 samples, 0.91%)</title><rect x="95.4338%" y="213" width="0.9132%" height="15" fill="rgb(238,205,33)" fg:x="209628881" fg:w="2006018"/><text x="95.6838%" y="223.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (2,006,018 samples, 0.91%)</title><rect x="95.4338%" y="197" width="0.9132%" height="15" fill="rgb(231,56,7)" fg:x="209628881" fg:w="2006018"/><text x="95.6838%" y="207.50"></text></g><g><title>chlang::tree_evaluator::eval (212,637,908 samples, 96.80%)</title><rect x="0.0000%" y="373" width="96.8037%" height="15" fill="rgb(244,186,29)" fg:x="0" fg:w="212637908"/><text x="0.2500%" y="383.50">chlang::tree_evaluator::eval</text></g><g><title>&lt;[T] as rand::seq::SliceRandom&gt;::shuffle (3,009,027 samples, 1.37%)</title><rect x="95.4338%" y="357" width="1.3699%" height="15" fill="rgb(234,111,31)" fg:x="209628881" fg:w="3009027"/><text x="95.6838%" y="367.50"></text></g><g><title>rand::seq::gen_index (3,009,027 samples, 1.37%)</title><rect x="95.4338%" y="341" width="1.3699%" height="15" fill="rgb(241,149,10)" fg:x="209628881" fg:w="3009027"/><text x="95.6838%" y="351.50"></text></g><g><title>rand::rng::Rng::gen_range (3,009,027 samples, 1.37%)</title><rect x="95.4338%" y="325" width="1.3699%" height="15" fill="rgb(249,206,44)" fg:x="209628881" fg:w="3009027"/><text x="95.6838%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (3,009,027 samples, 1.37%)</title><rect x="95.4338%" y="309" width="1.3699%" height="15" fill="rgb(251,153,30)" fg:x="209628881" fg:w="3009027"/><text x="95.6838%" y="319.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (3,009,027 samples, 1.37%)</title><rect x="95.4338%" y="293" width="1.3699%" height="15" fill="rgb(239,152,38)" fg:x="209628881" fg:w="3009027"/><text x="95.6838%" y="303.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (3,009,027 samples, 1.37%)</title><rect x="95.4338%" y="277" width="1.3699%" height="15" fill="rgb(249,139,47)" fg:x="209628881" fg:w="3009027"/><text x="95.6838%" y="287.50"></text></g><g><title>chlang::board::Board::make_move (1,003,009 samples, 0.46%)</title><rect x="96.8037%" y="373" width="0.4566%" height="15" fill="rgb(244,64,35)" fg:x="212637908" fg:w="1003009"/><text x="97.0537%" y="383.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (1,003,009 samples, 0.46%)</title><rect x="96.8037%" y="357" width="0.4566%" height="15" fill="rgb(216,46,15)" fg:x="212637908" fg:w="1003009"/><text x="97.0537%" y="367.50"></text></g><g><title>chlang::cmove::Move::to (1,003,009 samples, 0.46%)</title><rect x="97.2603%" y="293" width="0.4566%" height="15" fill="rgb(250,74,19)" fg:x="213640917" fg:w="1003009"/><text x="97.5103%" y="303.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (1,003,009 samples, 0.46%)</title><rect x="97.7169%" y="293" width="0.4566%" height="15" fill="rgb(249,42,33)" fg:x="214643926" fg:w="1003009"/><text x="97.9669%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.46%)</title><rect x="97.7169%" y="277" width="0.4566%" height="15" fill="rgb(242,149,17)" fg:x="214643926" fg:w="1003009"/><text x="97.9669%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="97.7169%" y="261" width="0.4566%" height="15" fill="rgb(244,29,21)" fg:x="214643926" fg:w="1003009"/><text x="97.9669%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="97.7169%" y="245" width="0.4566%" height="15" fill="rgb(220,130,37)" fg:x="214643926" fg:w="1003009"/><text x="97.9669%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.46%)</title><rect x="97.7169%" y="229" width="0.4566%" height="15" fill="rgb(211,67,2)" fg:x="214643926" fg:w="1003009"/><text x="97.9669%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.46%)</title><rect x="97.7169%" y="213" width="0.4566%" height="15" fill="rgb(235,68,52)" fg:x="214643926" fg:w="1003009"/><text x="97.9669%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.46%)</title><rect x="97.7169%" y="197" width="0.4566%" height="15" fill="rgb(246,142,3)" fg:x="214643926" fg:w="1003009"/><text x="97.9669%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.46%)</title><rect x="97.7169%" y="181" width="0.4566%" height="15" fill="rgb(241,25,7)" fg:x="214643926" fg:w="1003009"/><text x="97.9669%" y="191.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.46%)</title><rect x="97.7169%" y="165" width="0.4566%" height="15" fill="rgb(242,119,39)" fg:x="214643926" fg:w="1003009"/><text x="97.9669%" y="175.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (1,003,009 samples, 0.46%)</title><rect x="98.1735%" y="293" width="0.4566%" height="15" fill="rgb(241,98,45)" fg:x="215646935" fg:w="1003009"/><text x="98.4235%" y="303.50"></text></g><g><title>chlang::board::Board::make_move (4,012,036 samples, 1.83%)</title><rect x="97.2603%" y="341" width="1.8265%" height="15" fill="rgb(254,28,30)" fg:x="213640917" fg:w="4012036"/><text x="97.5103%" y="351.50">c..</text></g><g><title>chlang::board::Board::is_valid (4,012,036 samples, 1.83%)</title><rect x="97.2603%" y="325" width="1.8265%" height="15" fill="rgb(241,142,54)" fg:x="213640917" fg:w="4012036"/><text x="97.5103%" y="335.50">c..</text></g><g><title>chlang::board::Board::attacked_by_color (4,012,036 samples, 1.83%)</title><rect x="97.2603%" y="309" width="1.8265%" height="15" fill="rgb(222,85,15)" fg:x="213640917" fg:w="4012036"/><text x="97.5103%" y="319.50">c..</text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (1,003,009 samples, 0.46%)</title><rect x="98.6301%" y="293" width="0.4566%" height="15" fill="rgb(210,85,47)" fg:x="216649944" fg:w="1003009"/><text x="98.8801%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.46%)</title><rect x="98.6301%" y="277" width="0.4566%" height="15" fill="rgb(224,206,25)" fg:x="216649944" fg:w="1003009"/><text x="98.8801%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="98.6301%" y="261" width="0.4566%" height="15" fill="rgb(243,201,19)" fg:x="216649944" fg:w="1003009"/><text x="98.8801%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="98.6301%" y="245" width="0.4566%" height="15" fill="rgb(236,59,4)" fg:x="216649944" fg:w="1003009"/><text x="98.8801%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.46%)</title><rect x="98.6301%" y="229" width="0.4566%" height="15" fill="rgb(254,179,45)" fg:x="216649944" fg:w="1003009"/><text x="98.8801%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.46%)</title><rect x="98.6301%" y="213" width="0.4566%" height="15" fill="rgb(226,14,10)" fg:x="216649944" fg:w="1003009"/><text x="98.8801%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.46%)</title><rect x="98.6301%" y="197" width="0.4566%" height="15" fill="rgb(244,27,41)" fg:x="216649944" fg:w="1003009"/><text x="98.8801%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.46%)</title><rect x="98.6301%" y="181" width="0.4566%" height="15" fill="rgb(235,35,32)" fg:x="216649944" fg:w="1003009"/><text x="98.8801%" y="191.50"></text></g><g><title>__rust_alloc (1,003,009 samples, 0.46%)</title><rect x="98.6301%" y="165" width="0.4566%" height="15" fill="rgb(218,68,31)" fg:x="216649944" fg:w="1003009"/><text x="98.8801%" y="175.50"></text></g><g><title>chlang::board::Board::get_game_state (5,015,045 samples, 2.28%)</title><rect x="97.2603%" y="373" width="2.2831%" height="15" fill="rgb(207,120,37)" fg:x="213640917" fg:w="5015045"/><text x="97.5103%" y="383.50">c..</text></g><g><title>chlang::board::Board::get_valid_moves (5,015,045 samples, 2.28%)</title><rect x="97.2603%" y="357" width="2.2831%" height="15" fill="rgb(227,98,0)" fg:x="213640917" fg:w="5015045"/><text x="97.5103%" y="367.50">c..</text></g><g><title>chlang::board::Board::get_pseudo_legal_moves (1,003,009 samples, 0.46%)</title><rect x="99.0868%" y="341" width="0.4566%" height="15" fill="rgb(207,7,3)" fg:x="217652953" fg:w="1003009"/><text x="99.3368%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.46%)</title><rect x="99.0868%" y="325" width="0.4566%" height="15" fill="rgb(206,98,19)" fg:x="217652953" fg:w="1003009"/><text x="99.3368%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="99.0868%" y="309" width="0.4566%" height="15" fill="rgb(217,5,26)" fg:x="217652953" fg:w="1003009"/><text x="99.3368%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.46%)</title><rect x="99.0868%" y="293" width="0.4566%" height="15" fill="rgb(235,190,38)" fg:x="217652953" fg:w="1003009"/><text x="99.3368%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.46%)</title><rect x="99.0868%" y="277" width="0.4566%" height="15" fill="rgb(247,86,24)" fg:x="217652953" fg:w="1003009"/><text x="99.3368%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.46%)</title><rect x="99.0868%" y="261" width="0.4566%" height="15" fill="rgb(205,101,16)" fg:x="217652953" fg:w="1003009"/><text x="99.3368%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.46%)</title><rect x="99.0868%" y="245" width="0.4566%" height="15" fill="rgb(246,168,33)" fg:x="217652953" fg:w="1003009"/><text x="99.3368%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.46%)</title><rect x="99.0868%" y="229" width="0.4566%" height="15" fill="rgb(231,114,1)" fg:x="217652953" fg:w="1003009"/><text x="99.3368%" y="239.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.46%)</title><rect x="99.0868%" y="213" width="0.4566%" height="15" fill="rgb(207,184,53)" fg:x="217652953" fg:w="1003009"/><text x="99.3368%" y="223.50"></text></g><g><title>_int_malloc (1,003,009 samples, 0.46%)</title><rect x="99.0868%" y="197" width="0.4566%" height="15" fill="rgb(224,95,51)" fg:x="217652953" fg:w="1003009"/><text x="99.3368%" y="207.50"></text></g><g><title>all (219,658,971 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(212,188,45)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="751.50"></text></g><g><title>chlang (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(223,154,38)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="735.50">chlang</text></g><g><title>_start (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(251,22,52)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="719.50">_start</text></g><g><title>__libc_start_main_impl (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(229,209,22)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="703.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(234,138,34)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="687.50">__libc_start_call_main</text></g><g><title>main (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(212,95,11)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="671.50">main</text></g><g><title>std::rt::lang_start_internal (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(240,179,47)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="655.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(240,163,11)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(236,37,12)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(232,164,16)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="607.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(244,205,15)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="591.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(223,117,47)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(244,107,35)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(205,140,8)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="543.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(228,84,46)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="527.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(254,188,9)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="511.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(206,112,54)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(216,84,49)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="479.50">core::ops::function::FnOnce::call_once</text></g><g><title>chlang::main (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(214,194,35)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="463.50">chlang::main</text></g><g><title>chlang::tree_evaluator::Bot::find_best_move (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(249,28,3)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="447.50">chlang::tree_evaluator::Bot::find_best_move</text></g><g><title>chlang::tree_evaluator::eval (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(222,56,52)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="431.50">chlang::tree_evaluator::eval</text></g><g><title>chlang::tree_evaluator::eval (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(245,217,50)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="415.50">chlang::tree_evaluator::eval</text></g><g><title>chlang::tree_evaluator::eval (219,658,971 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(213,201,24)" fg:x="0" fg:w="219658971"/><text x="0.2500%" y="399.50">chlang::tree_evaluator::eval</text></g><g><title>&lt;[T] as rand::seq::SliceRandom&gt;::shuffle (1,003,009 samples, 0.46%)</title><rect x="99.5434%" y="373" width="0.4566%" height="15" fill="rgb(248,116,28)" fg:x="218655962" fg:w="1003009"/><text x="99.7934%" y="383.50"></text></g><g><title>rand::seq::gen_index (1,003,009 samples, 0.46%)</title><rect x="99.5434%" y="357" width="0.4566%" height="15" fill="rgb(219,72,43)" fg:x="218655962" fg:w="1003009"/><text x="99.7934%" y="367.50"></text></g><g><title>rand::rng::Rng::gen_range (1,003,009 samples, 0.46%)</title><rect x="99.5434%" y="341" width="0.4566%" height="15" fill="rgb(209,138,14)" fg:x="218655962" fg:w="1003009"/><text x="99.7934%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (1,003,009 samples, 0.46%)</title><rect x="99.5434%" y="325" width="0.4566%" height="15" fill="rgb(222,18,33)" fg:x="218655962" fg:w="1003009"/><text x="99.7934%" y="335.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (1,003,009 samples, 0.46%)</title><rect x="99.5434%" y="309" width="0.4566%" height="15" fill="rgb(213,199,7)" fg:x="218655962" fg:w="1003009"/><text x="99.7934%" y="319.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (1,003,009 samples, 0.46%)</title><rect x="99.5434%" y="293" width="0.4566%" height="15" fill="rgb(250,110,10)" fg:x="218655962" fg:w="1003009"/><text x="99.7934%" y="303.50"></text></g></svg></svg>