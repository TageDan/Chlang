<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="757.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="757.00"> </text><svg id="frames" x="10" width="1180" total_samples="182547638"><g><title>core::slice::sort::partition_equal (1,003,009 samples, 0.55%)</title><rect x="0.0000%" y="293" width="0.5495%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key::{{closure}} (1,003,009 samples, 0.55%)</title><rect x="0.0000%" y="277" width="0.5495%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="287.50"></text></g><g><title>chlang::tree_evaluator::Bot::find_best_move::{{closure}} (1,003,009 samples, 0.55%)</title><rect x="0.0000%" y="261" width="0.5495%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="271.50"></text></g><g><title>chlang::board::Board::piece_type (1,003,009 samples, 0.55%)</title><rect x="0.0000%" y="245" width="0.5495%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="255.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.55%)</title><rect x="0.0000%" y="229" width="0.5495%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.55%)</title><rect x="0.0000%" y="213" width="0.5495%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1003009"/><text x="0.2500%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (3,009,027 samples, 1.65%)</title><rect x="0.0000%" y="341" width="1.6484%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="351.50"></text></g><g><title>core::slice::sort::quicksort (3,009,027 samples, 1.65%)</title><rect x="0.0000%" y="325" width="1.6484%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="335.50"></text></g><g><title>core::slice::sort::recurse (3,009,027 samples, 1.65%)</title><rect x="0.0000%" y="309" width="1.6484%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="319.50"></text></g><g><title>core::slice::sort::partition (2,006,018 samples, 1.10%)</title><rect x="0.5495%" y="293" width="1.0989%" height="15" fill="rgb(220,122,19)" fg:x="1003009" fg:w="2006018"/><text x="0.7995%" y="303.50"></text></g><g><title>core::slice::sort::partition_in_blocks (2,006,018 samples, 1.10%)</title><rect x="0.5495%" y="277" width="1.0989%" height="15" fill="rgb(250,228,42)" fg:x="1003009" fg:w="2006018"/><text x="0.7995%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key::{{closure}} (2,006,018 samples, 1.10%)</title><rect x="0.5495%" y="261" width="1.0989%" height="15" fill="rgb(240,193,28)" fg:x="1003009" fg:w="2006018"/><text x="0.7995%" y="271.50"></text></g><g><title>chlang::tree_evaluator::Bot::find_best_move::{{closure}} (2,006,018 samples, 1.10%)</title><rect x="0.5495%" y="245" width="1.0989%" height="15" fill="rgb(216,20,37)" fg:x="1003009" fg:w="2006018"/><text x="0.7995%" y="255.50"></text></g><g><title>chlang::board::Board::piece_type (2,006,018 samples, 1.10%)</title><rect x="0.5495%" y="229" width="1.0989%" height="15" fill="rgb(206,188,39)" fg:x="1003009" fg:w="2006018"/><text x="0.7995%" y="239.50"></text></g><g><title>chlang::board::Position::bitboard (2,006,018 samples, 1.10%)</title><rect x="0.5495%" y="213" width="1.0989%" height="15" fill="rgb(217,207,13)" fg:x="1003009" fg:w="2006018"/><text x="0.7995%" y="223.50"></text></g><g><title>chlang::board::Board::is_threefold_rep (1,003,009 samples, 0.55%)</title><rect x="1.6484%" y="309" width="0.5495%" height="15" fill="rgb(231,73,38)" fg:x="3009027" fg:w="1003009"/><text x="1.8984%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;&amp;chlang::board::KeyStruct,i32,rustc_hash::FxBuildHasher&gt;&gt; (1,003,009 samples, 0.55%)</title><rect x="1.6484%" y="293" width="0.5495%" height="15" fill="rgb(225,20,46)" fg:x="3009027" fg:w="1003009"/><text x="1.8984%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;&amp;chlang::board::KeyStruct,i32,rustc_hash::FxBuildHasher&gt;&gt; (1,003,009 samples, 0.55%)</title><rect x="1.6484%" y="277" width="0.5495%" height="15" fill="rgb(210,31,41)" fg:x="3009027" fg:w="1003009"/><text x="1.8984%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(&amp;chlang::board::KeyStruct,i32)&gt;&gt; (1,003,009 samples, 0.55%)</title><rect x="1.6484%" y="261" width="0.5495%" height="15" fill="rgb(221,200,47)" fg:x="3009027" fg:w="1003009"/><text x="1.8984%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.55%)</title><rect x="1.6484%" y="245" width="0.5495%" height="15" fill="rgb(226,26,5)" fg:x="3009027" fg:w="1003009"/><text x="1.8984%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1,003,009 samples, 0.55%)</title><rect x="1.6484%" y="229" width="0.5495%" height="15" fill="rgb(249,33,26)" fg:x="3009027" fg:w="1003009"/><text x="1.8984%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (1,003,009 samples, 0.55%)</title><rect x="1.6484%" y="213" width="0.5495%" height="15" fill="rgb(235,183,28)" fg:x="3009027" fg:w="1003009"/><text x="1.8984%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.55%)</title><rect x="1.6484%" y="197" width="0.5495%" height="15" fill="rgb(221,5,38)" fg:x="3009027" fg:w="1003009"/><text x="1.8984%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.55%)</title><rect x="1.6484%" y="181" width="0.5495%" height="15" fill="rgb(247,18,42)" fg:x="3009027" fg:w="1003009"/><text x="1.8984%" y="191.50"></text></g><g><title>__GI___libc_free (1,003,009 samples, 0.55%)</title><rect x="1.6484%" y="165" width="0.5495%" height="15" fill="rgb(241,131,45)" fg:x="3009027" fg:w="1003009"/><text x="1.8984%" y="175.50"></text></g><g><title>_int_free (1,003,009 samples, 0.55%)</title><rect x="1.6484%" y="149" width="0.5495%" height="15" fill="rgb(249,31,29)" fg:x="3009027" fg:w="1003009"/><text x="1.8984%" y="159.50"></text></g><g><title>unlink_chunk (1,003,009 samples, 0.55%)</title><rect x="1.6484%" y="133" width="0.5495%" height="15" fill="rgb(225,111,53)" fg:x="3009027" fg:w="1003009"/><text x="1.8984%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.55%)</title><rect x="2.1978%" y="293" width="0.5495%" height="15" fill="rgb(238,160,17)" fg:x="4012036" fg:w="1003009"/><text x="2.4478%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.55%)</title><rect x="2.1978%" y="277" width="0.5495%" height="15" fill="rgb(214,148,48)" fg:x="4012036" fg:w="1003009"/><text x="2.4478%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (1,003,009 samples, 0.55%)</title><rect x="2.1978%" y="261" width="0.5495%" height="15" fill="rgb(232,36,49)" fg:x="4012036" fg:w="1003009"/><text x="2.4478%" y="271.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.55%)</title><rect x="2.1978%" y="245" width="0.5495%" height="15" fill="rgb(209,103,24)" fg:x="4012036" fg:w="1003009"/><text x="2.4478%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.55%)</title><rect x="2.1978%" y="229" width="0.5495%" height="15" fill="rgb(229,88,8)" fg:x="4012036" fg:w="1003009"/><text x="2.4478%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.55%)</title><rect x="2.1978%" y="213" width="0.5495%" height="15" fill="rgb(213,181,19)" fg:x="4012036" fg:w="1003009"/><text x="2.4478%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.55%)</title><rect x="2.1978%" y="197" width="0.5495%" height="15" fill="rgb(254,191,54)" fg:x="4012036" fg:w="1003009"/><text x="2.4478%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.55%)</title><rect x="2.1978%" y="181" width="0.5495%" height="15" fill="rgb(241,83,37)" fg:x="4012036" fg:w="1003009"/><text x="2.4478%" y="191.50"></text></g><g><title>__GI___libc_free (1,003,009 samples, 0.55%)</title><rect x="2.1978%" y="165" width="0.5495%" height="15" fill="rgb(233,36,39)" fg:x="4012036" fg:w="1003009"/><text x="2.4478%" y="175.50"></text></g><g><title>_int_free (1,003,009 samples, 0.55%)</title><rect x="2.1978%" y="149" width="0.5495%" height="15" fill="rgb(226,3,54)" fg:x="4012036" fg:w="1003009"/><text x="2.4478%" y="159.50"></text></g><g><title>unlink_chunk (1,003,009 samples, 0.55%)</title><rect x="2.1978%" y="133" width="0.5495%" height="15" fill="rgb(245,192,40)" fg:x="4012036" fg:w="1003009"/><text x="2.4478%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (1,003,009 samples, 0.55%)</title><rect x="2.7473%" y="277" width="0.5495%" height="15" fill="rgb(238,167,29)" fg:x="5015045" fg:w="1003009"/><text x="2.9973%" y="287.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (1,003,009 samples, 0.55%)</title><rect x="2.7473%" y="261" width="0.5495%" height="15" fill="rgb(232,182,51)" fg:x="5015045" fg:w="1003009"/><text x="2.9973%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (1,003,009 samples, 0.55%)</title><rect x="2.7473%" y="245" width="0.5495%" height="15" fill="rgb(231,60,39)" fg:x="5015045" fg:w="1003009"/><text x="2.9973%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,003,009 samples, 0.55%)</title><rect x="2.7473%" y="229" width="0.5495%" height="15" fill="rgb(208,69,12)" fg:x="5015045" fg:w="1003009"/><text x="2.9973%" y="239.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,003,009 samples, 0.55%)</title><rect x="2.7473%" y="213" width="0.5495%" height="15" fill="rgb(235,93,37)" fg:x="5015045" fg:w="1003009"/><text x="2.9973%" y="223.50"></text></g><g><title>__rdl_dealloc (1,003,009 samples, 0.55%)</title><rect x="3.2967%" y="197" width="0.5495%" height="15" fill="rgb(213,116,39)" fg:x="6018054" fg:w="1003009"/><text x="3.5467%" y="207.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,003,009 samples, 0.55%)</title><rect x="3.2967%" y="181" width="0.5495%" height="15" fill="rgb(222,207,29)" fg:x="6018054" fg:w="1003009"/><text x="3.5467%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (2,006,018 samples, 1.10%)</title><rect x="3.2967%" y="277" width="1.0989%" height="15" fill="rgb(206,96,30)" fg:x="6018054" fg:w="2006018"/><text x="3.5467%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (2,006,018 samples, 1.10%)</title><rect x="3.2967%" y="261" width="1.0989%" height="15" fill="rgb(218,138,4)" fg:x="6018054" fg:w="2006018"/><text x="3.5467%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,006,018 samples, 1.10%)</title><rect x="3.2967%" y="245" width="1.0989%" height="15" fill="rgb(250,191,14)" fg:x="6018054" fg:w="2006018"/><text x="3.5467%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,006,018 samples, 1.10%)</title><rect x="3.2967%" y="229" width="1.0989%" height="15" fill="rgb(239,60,40)" fg:x="6018054" fg:w="2006018"/><text x="3.5467%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (2,006,018 samples, 1.10%)</title><rect x="3.2967%" y="213" width="1.0989%" height="15" fill="rgb(206,27,48)" fg:x="6018054" fg:w="2006018"/><text x="3.5467%" y="223.50"></text></g><g><title>__GI___libc_free (1,003,009 samples, 0.55%)</title><rect x="3.8462%" y="197" width="0.5495%" height="15" fill="rgb(225,35,8)" fg:x="7021063" fg:w="1003009"/><text x="4.0962%" y="207.50"></text></g><g><title>_int_free (1,003,009 samples, 0.55%)</title><rect x="3.8462%" y="181" width="0.5495%" height="15" fill="rgb(250,213,24)" fg:x="7021063" fg:w="1003009"/><text x="4.0962%" y="191.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.55%)</title><rect x="4.3956%" y="277" width="0.5495%" height="15" fill="rgb(247,123,22)" fg:x="8024072" fg:w="1003009"/><text x="4.6456%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.55%)</title><rect x="4.3956%" y="261" width="0.5495%" height="15" fill="rgb(231,138,38)" fg:x="8024072" fg:w="1003009"/><text x="4.6456%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (8,024,072 samples, 4.40%)</title><rect x="4.9451%" y="245" width="4.3956%" height="15" fill="rgb(231,145,46)" fg:x="9027081" fg:w="8024072"/><text x="5.1951%" y="255.50">core:..</text></g><g><title>chlang::board::Position::bitboard (9,027,081 samples, 4.95%)</title><rect x="4.9451%" y="261" width="4.9451%" height="15" fill="rgb(251,118,11)" fg:x="9027081" fg:w="9027081"/><text x="5.1951%" y="271.50">chlang..</text></g><g><title>chlang::board::Board::piece_type (10,030,090 samples, 5.49%)</title><rect x="4.9451%" y="277" width="5.4945%" height="15" fill="rgb(217,147,25)" fg:x="9027081" fg:w="10030090"/><text x="5.1951%" y="287.50">chlang:..</text></g><g><title>__rust_dealloc (2,006,018 samples, 1.10%)</title><rect x="10.4396%" y="117" width="1.0989%" height="15" fill="rgb(247,81,37)" fg:x="19057171" fg:w="2006018"/><text x="10.6896%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (5,015,045 samples, 2.75%)</title><rect x="10.4396%" y="245" width="2.7473%" height="15" fill="rgb(209,12,38)" fg:x="19057171" fg:w="5015045"/><text x="10.6896%" y="255.50">co..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,015,045 samples, 2.75%)</title><rect x="10.4396%" y="229" width="2.7473%" height="15" fill="rgb(227,1,9)" fg:x="19057171" fg:w="5015045"/><text x="10.6896%" y="239.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (5,015,045 samples, 2.75%)</title><rect x="10.4396%" y="213" width="2.7473%" height="15" fill="rgb(248,47,43)" fg:x="19057171" fg:w="5015045"/><text x="10.6896%" y="223.50">co..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,015,045 samples, 2.75%)</title><rect x="10.4396%" y="197" width="2.7473%" height="15" fill="rgb(221,10,30)" fg:x="19057171" fg:w="5015045"/><text x="10.6896%" y="207.50">&lt;&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (5,015,045 samples, 2.75%)</title><rect x="10.4396%" y="181" width="2.7473%" height="15" fill="rgb(210,229,1)" fg:x="19057171" fg:w="5015045"/><text x="10.6896%" y="191.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,015,045 samples, 2.75%)</title><rect x="10.4396%" y="165" width="2.7473%" height="15" fill="rgb(222,148,37)" fg:x="19057171" fg:w="5015045"/><text x="10.6896%" y="175.50">&lt;a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5,015,045 samples, 2.75%)</title><rect x="10.4396%" y="149" width="2.7473%" height="15" fill="rgb(234,67,33)" fg:x="19057171" fg:w="5015045"/><text x="10.6896%" y="159.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (5,015,045 samples, 2.75%)</title><rect x="10.4396%" y="133" width="2.7473%" height="15" fill="rgb(247,98,35)" fg:x="19057171" fg:w="5015045"/><text x="10.6896%" y="143.50">al..</text></g><g><title>__GI___libc_free (3,009,027 samples, 1.65%)</title><rect x="11.5385%" y="117" width="1.6484%" height="15" fill="rgb(247,138,52)" fg:x="21063189" fg:w="3009027"/><text x="11.7885%" y="127.50"></text></g><g><title>_int_free (3,009,027 samples, 1.65%)</title><rect x="11.5385%" y="101" width="1.6484%" height="15" fill="rgb(213,79,30)" fg:x="21063189" fg:w="3009027"/><text x="11.7885%" y="111.50"></text></g><g><title>chlang::cmove::Move::to (2,006,018 samples, 1.10%)</title><rect x="13.1868%" y="245" width="1.0989%" height="15" fill="rgb(246,177,23)" fg:x="24072216" fg:w="2006018"/><text x="13.4368%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (26,078,234 samples, 14.29%)</title><rect x="14.2857%" y="213" width="14.2857%" height="15" fill="rgb(230,62,27)" fg:x="26078234" fg:w="26078234"/><text x="14.5357%" y="223.50">core::num::&lt;impl u64&gt;:..</text></g><g><title>chlang::board::Position::bitboard (29,087,261 samples, 15.93%)</title><rect x="14.2857%" y="229" width="15.9341%" height="15" fill="rgb(216,154,8)" fg:x="26078234" fg:w="29087261"/><text x="14.5357%" y="239.50">chlang::board::Position::..</text></g><g><title>chlang::board::Board::piece_type (41,123,369 samples, 22.53%)</title><rect x="14.2857%" y="245" width="22.5275%" height="15" fill="rgb(244,35,45)" fg:x="26078234" fg:w="41123369"/><text x="14.5357%" y="255.50">chlang::board::Board::piece_type</text></g><g><title>chlang::board::Position::valid (1,003,009 samples, 0.55%)</title><rect x="36.8132%" y="229" width="0.5495%" height="15" fill="rgb(251,115,12)" fg:x="67201603" fg:w="1003009"/><text x="37.0632%" y="239.50"></text></g><g><title>chlang::board::Position::bitboard (3,009,027 samples, 1.65%)</title><rect x="37.3626%" y="229" width="1.6484%" height="15" fill="rgb(240,54,50)" fg:x="68204612" fg:w="3009027"/><text x="37.6126%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (3,009,027 samples, 1.65%)</title><rect x="37.3626%" y="213" width="1.6484%" height="15" fill="rgb(233,84,52)" fg:x="68204612" fg:w="3009027"/><text x="37.6126%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.55%)</title><rect x="39.0110%" y="165" width="0.5495%" height="15" fill="rgb(207,117,47)" fg:x="71213639" fg:w="1003009"/><text x="39.2610%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.55%)</title><rect x="39.0110%" y="149" width="0.5495%" height="15" fill="rgb(249,43,39)" fg:x="71213639" fg:w="1003009"/><text x="39.2610%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.55%)</title><rect x="39.0110%" y="133" width="0.5495%" height="15" fill="rgb(209,38,44)" fg:x="71213639" fg:w="1003009"/><text x="39.2610%" y="143.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.55%)</title><rect x="39.0110%" y="117" width="0.5495%" height="15" fill="rgb(236,212,23)" fg:x="71213639" fg:w="1003009"/><text x="39.2610%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,006,018 samples, 1.10%)</title><rect x="39.0110%" y="229" width="1.0989%" height="15" fill="rgb(242,79,21)" fg:x="71213639" fg:w="2006018"/><text x="39.2610%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 1.10%)</title><rect x="39.0110%" y="213" width="1.0989%" height="15" fill="rgb(211,96,35)" fg:x="71213639" fg:w="2006018"/><text x="39.2610%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 1.10%)</title><rect x="39.0110%" y="197" width="1.0989%" height="15" fill="rgb(253,215,40)" fg:x="71213639" fg:w="2006018"/><text x="39.2610%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2,006,018 samples, 1.10%)</title><rect x="39.0110%" y="181" width="1.0989%" height="15" fill="rgb(211,81,21)" fg:x="71213639" fg:w="2006018"/><text x="39.2610%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,003,009 samples, 0.55%)</title><rect x="40.1099%" y="229" width="0.5495%" height="15" fill="rgb(208,190,38)" fg:x="73219657" fg:w="1003009"/><text x="40.3599%" y="239.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (8,024,072 samples, 4.40%)</title><rect x="36.8132%" y="245" width="4.3956%" height="15" fill="rgb(235,213,38)" fg:x="67201603" fg:w="8024072"/><text x="37.0632%" y="255.50">chlan..</text></g><g><title>tcache_put (1,003,009 samples, 0.55%)</title><rect x="41.2088%" y="101" width="0.5495%" height="15" fill="rgb(237,122,38)" fg:x="75225675" fg:w="1003009"/><text x="41.4588%" y="111.50"></text></g><g><title>_int_free (2,006,018 samples, 1.10%)</title><rect x="41.2088%" y="117" width="1.0989%" height="15" fill="rgb(244,218,35)" fg:x="75225675" fg:w="2006018"/><text x="41.4588%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (3,009,027 samples, 1.65%)</title><rect x="41.2088%" y="229" width="1.6484%" height="15" fill="rgb(240,68,47)" fg:x="75225675" fg:w="3009027"/><text x="41.4588%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 1.65%)</title><rect x="41.2088%" y="213" width="1.6484%" height="15" fill="rgb(210,16,53)" fg:x="75225675" fg:w="3009027"/><text x="41.4588%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 1.65%)</title><rect x="41.2088%" y="197" width="1.6484%" height="15" fill="rgb(235,124,12)" fg:x="75225675" fg:w="3009027"/><text x="41.4588%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 1.65%)</title><rect x="41.2088%" y="181" width="1.6484%" height="15" fill="rgb(224,169,11)" fg:x="75225675" fg:w="3009027"/><text x="41.4588%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,009,027 samples, 1.65%)</title><rect x="41.2088%" y="165" width="1.6484%" height="15" fill="rgb(250,166,2)" fg:x="75225675" fg:w="3009027"/><text x="41.4588%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (3,009,027 samples, 1.65%)</title><rect x="41.2088%" y="149" width="1.6484%" height="15" fill="rgb(242,216,29)" fg:x="75225675" fg:w="3009027"/><text x="41.4588%" y="159.50"></text></g><g><title>__GI___libc_free (3,009,027 samples, 1.65%)</title><rect x="41.2088%" y="133" width="1.6484%" height="15" fill="rgb(230,116,27)" fg:x="75225675" fg:w="3009027"/><text x="41.4588%" y="143.50"></text></g><g><title>chlang::board::Position::bitboard (3,009,027 samples, 1.65%)</title><rect x="42.8571%" y="229" width="1.6484%" height="15" fill="rgb(228,99,48)" fg:x="78234702" fg:w="3009027"/><text x="43.1071%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (3,009,027 samples, 1.65%)</title><rect x="42.8571%" y="213" width="1.6484%" height="15" fill="rgb(253,11,6)" fg:x="78234702" fg:w="3009027"/><text x="43.1071%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.55%)</title><rect x="44.5055%" y="197" width="0.5495%" height="15" fill="rgb(247,143,39)" fg:x="81243729" fg:w="1003009"/><text x="44.7555%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.55%)</title><rect x="44.5055%" y="181" width="0.5495%" height="15" fill="rgb(236,97,10)" fg:x="81243729" fg:w="1003009"/><text x="44.7555%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.55%)</title><rect x="44.5055%" y="165" width="0.5495%" height="15" fill="rgb(233,208,19)" fg:x="81243729" fg:w="1003009"/><text x="44.7555%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.55%)</title><rect x="44.5055%" y="149" width="0.5495%" height="15" fill="rgb(216,164,2)" fg:x="81243729" fg:w="1003009"/><text x="44.7555%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.55%)</title><rect x="44.5055%" y="133" width="0.5495%" height="15" fill="rgb(220,129,5)" fg:x="81243729" fg:w="1003009"/><text x="44.7555%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.55%)</title><rect x="44.5055%" y="117" width="0.5495%" height="15" fill="rgb(242,17,10)" fg:x="81243729" fg:w="1003009"/><text x="44.7555%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.55%)</title><rect x="44.5055%" y="101" width="0.5495%" height="15" fill="rgb(242,107,0)" fg:x="81243729" fg:w="1003009"/><text x="44.7555%" y="111.50"></text></g><g><title>__rust_alloc (1,003,009 samples, 0.55%)</title><rect x="44.5055%" y="85" width="0.5495%" height="15" fill="rgb(251,28,31)" fg:x="81243729" fg:w="1003009"/><text x="44.7555%" y="95.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (2,006,018 samples, 1.10%)</title><rect x="44.5055%" y="229" width="1.0989%" height="15" fill="rgb(233,223,10)" fg:x="81243729" fg:w="2006018"/><text x="44.7555%" y="239.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (2,006,018 samples, 1.10%)</title><rect x="44.5055%" y="213" width="1.0989%" height="15" fill="rgb(215,21,27)" fg:x="81243729" fg:w="2006018"/><text x="44.7555%" y="223.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (10,030,090 samples, 5.49%)</title><rect x="41.2088%" y="245" width="5.4945%" height="15" fill="rgb(232,23,21)" fg:x="75225675" fg:w="10030090"/><text x="41.4588%" y="255.50">chlang:..</text></g><g><title>tcache_get (1,003,009 samples, 0.55%)</title><rect x="46.7033%" y="101" width="0.5495%" height="15" fill="rgb(244,5,23)" fg:x="85255765" fg:w="1003009"/><text x="46.9533%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,006,018 samples, 1.10%)</title><rect x="46.7033%" y="229" width="1.0989%" height="15" fill="rgb(226,81,46)" fg:x="85255765" fg:w="2006018"/><text x="46.9533%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 1.10%)</title><rect x="46.7033%" y="213" width="1.0989%" height="15" fill="rgb(247,70,30)" fg:x="85255765" fg:w="2006018"/><text x="46.9533%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 1.10%)</title><rect x="46.7033%" y="197" width="1.0989%" height="15" fill="rgb(212,68,19)" fg:x="85255765" fg:w="2006018"/><text x="46.9533%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2,006,018 samples, 1.10%)</title><rect x="46.7033%" y="181" width="1.0989%" height="15" fill="rgb(240,187,13)" fg:x="85255765" fg:w="2006018"/><text x="46.9533%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,006,018 samples, 1.10%)</title><rect x="46.7033%" y="165" width="1.0989%" height="15" fill="rgb(223,113,26)" fg:x="85255765" fg:w="2006018"/><text x="46.9533%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,006,018 samples, 1.10%)</title><rect x="46.7033%" y="149" width="1.0989%" height="15" fill="rgb(206,192,2)" fg:x="85255765" fg:w="2006018"/><text x="46.9533%" y="159.50"></text></g><g><title>alloc::alloc::alloc (2,006,018 samples, 1.10%)</title><rect x="46.7033%" y="133" width="1.0989%" height="15" fill="rgb(241,108,4)" fg:x="85255765" fg:w="2006018"/><text x="46.9533%" y="143.50"></text></g><g><title>__GI___libc_malloc (2,006,018 samples, 1.10%)</title><rect x="46.7033%" y="117" width="1.0989%" height="15" fill="rgb(247,173,49)" fg:x="85255765" fg:w="2006018"/><text x="46.9533%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,003,009 samples, 0.55%)</title><rect x="47.8022%" y="229" width="0.5495%" height="15" fill="rgb(224,114,35)" fg:x="87261783" fg:w="1003009"/><text x="48.0522%" y="239.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (4,012,036 samples, 2.20%)</title><rect x="46.7033%" y="245" width="2.1978%" height="15" fill="rgb(245,159,27)" fg:x="85255765" fg:w="4012036"/><text x="46.9533%" y="255.50">c..</text></g><g><title>chlang::board::Position::valid (2,006,018 samples, 1.10%)</title><rect x="48.9011%" y="229" width="1.0989%" height="15" fill="rgb(245,172,44)" fg:x="89267801" fg:w="2006018"/><text x="49.1511%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.55%)</title><rect x="50.0000%" y="229" width="0.5495%" height="15" fill="rgb(236,23,11)" fg:x="91273819" fg:w="1003009"/><text x="50.2500%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.55%)</title><rect x="50.0000%" y="213" width="0.5495%" height="15" fill="rgb(205,117,38)" fg:x="91273819" fg:w="1003009"/><text x="50.2500%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.55%)</title><rect x="50.0000%" y="197" width="0.5495%" height="15" fill="rgb(237,72,25)" fg:x="91273819" fg:w="1003009"/><text x="50.2500%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.55%)</title><rect x="50.0000%" y="181" width="0.5495%" height="15" fill="rgb(244,70,9)" fg:x="91273819" fg:w="1003009"/><text x="50.2500%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.55%)</title><rect x="50.0000%" y="165" width="0.5495%" height="15" fill="rgb(217,125,39)" fg:x="91273819" fg:w="1003009"/><text x="50.2500%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.55%)</title><rect x="50.0000%" y="149" width="0.5495%" height="15" fill="rgb(235,36,10)" fg:x="91273819" fg:w="1003009"/><text x="50.2500%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.55%)</title><rect x="50.0000%" y="133" width="0.5495%" height="15" fill="rgb(251,123,47)" fg:x="91273819" fg:w="1003009"/><text x="50.2500%" y="143.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.55%)</title><rect x="50.0000%" y="117" width="0.5495%" height="15" fill="rgb(221,13,13)" fg:x="91273819" fg:w="1003009"/><text x="50.2500%" y="127.50"></text></g><g><title>tcache_get (1,003,009 samples, 0.55%)</title><rect x="50.0000%" y="101" width="0.5495%" height="15" fill="rgb(238,131,9)" fg:x="91273819" fg:w="1003009"/><text x="50.2500%" y="111.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.55%)</title><rect x="50.5495%" y="213" width="0.5495%" height="15" fill="rgb(211,50,8)" fg:x="92276828" fg:w="1003009"/><text x="50.7995%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,009,027 samples, 1.65%)</title><rect x="50.5495%" y="229" width="1.6484%" height="15" fill="rgb(245,182,24)" fg:x="92276828" fg:w="3009027"/><text x="50.7995%" y="239.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (9,027,081 samples, 4.95%)</title><rect x="48.9011%" y="245" width="4.9451%" height="15" fill="rgb(242,14,37)" fg:x="89267801" fg:w="9027081"/><text x="49.1511%" y="255.50">chlang..</text></g><g><title>chlang::board::Position::bitboard (3,009,027 samples, 1.65%)</title><rect x="53.8462%" y="229" width="1.6484%" height="15" fill="rgb(246,228,12)" fg:x="98294882" fg:w="3009027"/><text x="54.0962%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (3,009,027 samples, 1.65%)</title><rect x="53.8462%" y="213" width="1.6484%" height="15" fill="rgb(213,55,15)" fg:x="98294882" fg:w="3009027"/><text x="54.0962%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.55%)</title><rect x="55.4945%" y="229" width="0.5495%" height="15" fill="rgb(209,9,3)" fg:x="101303909" fg:w="1003009"/><text x="55.7445%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.55%)</title><rect x="55.4945%" y="213" width="0.5495%" height="15" fill="rgb(230,59,30)" fg:x="101303909" fg:w="1003009"/><text x="55.7445%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.55%)</title><rect x="55.4945%" y="197" width="0.5495%" height="15" fill="rgb(209,121,21)" fg:x="101303909" fg:w="1003009"/><text x="55.7445%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.55%)</title><rect x="55.4945%" y="181" width="0.5495%" height="15" fill="rgb(220,109,13)" fg:x="101303909" fg:w="1003009"/><text x="55.7445%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.55%)</title><rect x="55.4945%" y="165" width="0.5495%" height="15" fill="rgb(232,18,1)" fg:x="101303909" fg:w="1003009"/><text x="55.7445%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.55%)</title><rect x="55.4945%" y="149" width="0.5495%" height="15" fill="rgb(215,41,42)" fg:x="101303909" fg:w="1003009"/><text x="55.7445%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.55%)</title><rect x="55.4945%" y="133" width="0.5495%" height="15" fill="rgb(224,123,36)" fg:x="101303909" fg:w="1003009"/><text x="55.7445%" y="143.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.55%)</title><rect x="55.4945%" y="117" width="0.5495%" height="15" fill="rgb(240,125,3)" fg:x="101303909" fg:w="1003009"/><text x="55.7445%" y="127.50"></text></g><g><title>tcache_get (1,003,009 samples, 0.55%)</title><rect x="55.4945%" y="101" width="0.5495%" height="15" fill="rgb(205,98,50)" fg:x="101303909" fg:w="1003009"/><text x="55.7445%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,003,009 samples, 0.55%)</title><rect x="56.0440%" y="229" width="0.5495%" height="15" fill="rgb(205,185,37)" fg:x="102306918" fg:w="1003009"/><text x="56.2940%" y="239.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (7,021,063 samples, 3.85%)</title><rect x="53.8462%" y="245" width="3.8462%" height="15" fill="rgb(238,207,15)" fg:x="98294882" fg:w="7021063"/><text x="54.0962%" y="255.50">chla..</text></g><g><title>chlang::board::Board::attacked_by_color (92,276,828 samples, 50.55%)</title><rect x="10.4396%" y="261" width="50.5495%" height="15" fill="rgb(213,199,42)" fg:x="19057171" fg:w="92276828"/><text x="10.6896%" y="271.50">chlang::board::Board::attacked_by_color</text></g><g><title>chlang::board::Board::is_valid (93,279,837 samples, 51.10%)</title><rect x="10.4396%" y="277" width="51.0989%" height="15" fill="rgb(235,201,11)" fg:x="19057171" fg:w="93279837"/><text x="10.6896%" y="287.50">chlang::board::Board::is_valid</text></g><g><title>&lt;chlang::board::Position as core::convert::From&lt;u64&gt;&gt;::from (1,003,009 samples, 0.55%)</title><rect x="60.9890%" y="261" width="0.5495%" height="15" fill="rgb(207,46,11)" fg:x="111333999" fg:w="1003009"/><text x="61.2390%" y="271.50"></text></g><g><title>chlang::board::Position::bitboard (3,009,027 samples, 1.65%)</title><rect x="61.5385%" y="245" width="1.6484%" height="15" fill="rgb(241,35,35)" fg:x="112337008" fg:w="3009027"/><text x="61.7885%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (3,009,027 samples, 1.65%)</title><rect x="61.5385%" y="229" width="1.6484%" height="15" fill="rgb(243,32,47)" fg:x="112337008" fg:w="3009027"/><text x="61.7885%" y="239.50"></text></g><g><title>chlang::board::Board::piece_type (5,015,045 samples, 2.75%)</title><rect x="61.5385%" y="261" width="2.7473%" height="15" fill="rgb(247,202,23)" fg:x="112337008" fg:w="5015045"/><text x="61.7885%" y="271.50">ch..</text></g><g><title>chlang::board::Position::bitboard (2,006,018 samples, 1.10%)</title><rect x="64.2857%" y="245" width="1.0989%" height="15" fill="rgb(219,102,11)" fg:x="117352053" fg:w="2006018"/><text x="64.5357%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (2,006,018 samples, 1.10%)</title><rect x="64.2857%" y="229" width="1.0989%" height="15" fill="rgb(243,110,44)" fg:x="117352053" fg:w="2006018"/><text x="64.5357%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.55%)</title><rect x="65.3846%" y="245" width="0.5495%" height="15" fill="rgb(222,74,54)" fg:x="119358071" fg:w="1003009"/><text x="65.6346%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.55%)</title><rect x="65.3846%" y="229" width="0.5495%" height="15" fill="rgb(216,99,12)" fg:x="119358071" fg:w="1003009"/><text x="65.6346%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.55%)</title><rect x="65.3846%" y="213" width="0.5495%" height="15" fill="rgb(226,22,26)" fg:x="119358071" fg:w="1003009"/><text x="65.6346%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.55%)</title><rect x="65.3846%" y="197" width="0.5495%" height="15" fill="rgb(217,163,10)" fg:x="119358071" fg:w="1003009"/><text x="65.6346%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.55%)</title><rect x="65.3846%" y="181" width="0.5495%" height="15" fill="rgb(213,25,53)" fg:x="119358071" fg:w="1003009"/><text x="65.6346%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.55%)</title><rect x="65.3846%" y="165" width="0.5495%" height="15" fill="rgb(252,105,26)" fg:x="119358071" fg:w="1003009"/><text x="65.6346%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.55%)</title><rect x="65.3846%" y="149" width="0.5495%" height="15" fill="rgb(220,39,43)" fg:x="119358071" fg:w="1003009"/><text x="65.6346%" y="159.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.55%)</title><rect x="65.3846%" y="133" width="0.5495%" height="15" fill="rgb(229,68,48)" fg:x="119358071" fg:w="1003009"/><text x="65.6346%" y="143.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (5,015,045 samples, 2.75%)</title><rect x="64.2857%" y="261" width="2.7473%" height="15" fill="rgb(252,8,32)" fg:x="117352053" fg:w="5015045"/><text x="64.5357%" y="271.50">ch..</text></g><g><title>chlang::board::Board::attacked_by_color (1,003,009 samples, 0.55%)</title><rect x="67.0330%" y="245" width="0.5495%" height="15" fill="rgb(223,20,43)" fg:x="122367098" fg:w="1003009"/><text x="67.2830%" y="255.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (1,003,009 samples, 0.55%)</title><rect x="67.0330%" y="229" width="0.5495%" height="15" fill="rgb(229,81,49)" fg:x="122367098" fg:w="1003009"/><text x="67.2830%" y="239.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.55%)</title><rect x="67.0330%" y="213" width="0.5495%" height="15" fill="rgb(236,28,36)" fg:x="122367098" fg:w="1003009"/><text x="67.2830%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.55%)</title><rect x="67.0330%" y="197" width="0.5495%" height="15" fill="rgb(249,185,26)" fg:x="122367098" fg:w="1003009"/><text x="67.2830%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.55%)</title><rect x="67.5824%" y="245" width="0.5495%" height="15" fill="rgb(249,174,33)" fg:x="123370107" fg:w="1003009"/><text x="67.8324%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.55%)</title><rect x="67.5824%" y="229" width="0.5495%" height="15" fill="rgb(233,201,37)" fg:x="123370107" fg:w="1003009"/><text x="67.8324%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.55%)</title><rect x="67.5824%" y="213" width="0.5495%" height="15" fill="rgb(221,78,26)" fg:x="123370107" fg:w="1003009"/><text x="67.8324%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.55%)</title><rect x="67.5824%" y="197" width="0.5495%" height="15" fill="rgb(250,127,30)" fg:x="123370107" fg:w="1003009"/><text x="67.8324%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.55%)</title><rect x="67.5824%" y="181" width="0.5495%" height="15" fill="rgb(230,49,44)" fg:x="123370107" fg:w="1003009"/><text x="67.8324%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.55%)</title><rect x="67.5824%" y="165" width="0.5495%" height="15" fill="rgb(229,67,23)" fg:x="123370107" fg:w="1003009"/><text x="67.8324%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.55%)</title><rect x="67.5824%" y="149" width="0.5495%" height="15" fill="rgb(249,83,47)" fg:x="123370107" fg:w="1003009"/><text x="67.8324%" y="159.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.55%)</title><rect x="67.5824%" y="133" width="0.5495%" height="15" fill="rgb(215,43,3)" fg:x="123370107" fg:w="1003009"/><text x="67.8324%" y="143.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (4,012,036 samples, 2.20%)</title><rect x="67.0330%" y="261" width="2.1978%" height="15" fill="rgb(238,154,13)" fg:x="122367098" fg:w="4012036"/><text x="67.2830%" y="271.50">c..</text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.55%)</title><rect x="69.2308%" y="245" width="0.5495%" height="15" fill="rgb(219,56,2)" fg:x="126379134" fg:w="1003009"/><text x="69.4808%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.55%)</title><rect x="69.2308%" y="229" width="0.5495%" height="15" fill="rgb(233,0,4)" fg:x="126379134" fg:w="1003009"/><text x="69.4808%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,003,009 samples, 0.55%)</title><rect x="69.7802%" y="245" width="0.5495%" height="15" fill="rgb(235,30,7)" fg:x="127382143" fg:w="1003009"/><text x="70.0302%" y="255.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (3,009,027 samples, 1.65%)</title><rect x="69.2308%" y="261" width="1.6484%" height="15" fill="rgb(250,79,13)" fg:x="126379134" fg:w="3009027"/><text x="69.4808%" y="271.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (18,054,162 samples, 9.89%)</title><rect x="61.5385%" y="277" width="9.8901%" height="15" fill="rgb(211,146,34)" fg:x="112337008" fg:w="18054162"/><text x="61.7885%" y="287.50">chlang::board:..</text></g><g><title>chlang::board::Board::make_move (127,382,143 samples, 69.78%)</title><rect x="2.7473%" y="293" width="69.7802%" height="15" fill="rgb(228,22,38)" fg:x="5015045" fg:w="127382143"/><text x="2.9973%" y="303.50">chlang::board::Board::make_move</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,006,018 samples, 1.10%)</title><rect x="71.4286%" y="277" width="1.0989%" height="15" fill="rgb(235,168,5)" fg:x="130391170" fg:w="2006018"/><text x="71.6786%" y="287.50"></text></g><g><title>core::ptr::write (2,006,018 samples, 1.10%)</title><rect x="71.4286%" y="261" width="1.0989%" height="15" fill="rgb(221,155,16)" fg:x="130391170" fg:w="2006018"/><text x="71.6786%" y="271.50"></text></g><g><title>chlang::board::Board::piece_type (1,003,009 samples, 0.55%)</title><rect x="72.5275%" y="261" width="0.5495%" height="15" fill="rgb(215,215,53)" fg:x="132397188" fg:w="1003009"/><text x="72.7775%" y="271.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.55%)</title><rect x="72.5275%" y="245" width="0.5495%" height="15" fill="rgb(223,4,10)" fg:x="132397188" fg:w="1003009"/><text x="72.7775%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.55%)</title><rect x="72.5275%" y="229" width="0.5495%" height="15" fill="rgb(234,103,6)" fg:x="132397188" fg:w="1003009"/><text x="72.7775%" y="239.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (1,003,009 samples, 0.55%)</title><rect x="73.0769%" y="261" width="0.5495%" height="15" fill="rgb(227,97,0)" fg:x="133400197" fg:w="1003009"/><text x="73.3269%" y="271.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.55%)</title><rect x="73.0769%" y="245" width="0.5495%" height="15" fill="rgb(234,150,53)" fg:x="133400197" fg:w="1003009"/><text x="73.3269%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.55%)</title><rect x="73.0769%" y="229" width="0.5495%" height="15" fill="rgb(228,201,54)" fg:x="133400197" fg:w="1003009"/><text x="73.3269%" y="239.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (3,009,027 samples, 1.65%)</title><rect x="72.5275%" y="277" width="1.6484%" height="15" fill="rgb(222,22,37)" fg:x="132397188" fg:w="3009027"/><text x="72.7775%" y="287.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (1,003,009 samples, 0.55%)</title><rect x="73.6264%" y="261" width="0.5495%" height="15" fill="rgb(237,53,32)" fg:x="134403206" fg:w="1003009"/><text x="73.8764%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (1,003,009 samples, 0.55%)</title><rect x="73.6264%" y="245" width="0.5495%" height="15" fill="rgb(233,25,53)" fg:x="134403206" fg:w="1003009"/><text x="73.8764%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.55%)</title><rect x="73.6264%" y="229" width="0.5495%" height="15" fill="rgb(210,40,34)" fg:x="134403206" fg:w="1003009"/><text x="73.8764%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.55%)</title><rect x="73.6264%" y="213" width="0.5495%" height="15" fill="rgb(241,220,44)" fg:x="134403206" fg:w="1003009"/><text x="73.8764%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.55%)</title><rect x="73.6264%" y="197" width="0.5495%" height="15" fill="rgb(235,28,35)" fg:x="134403206" fg:w="1003009"/><text x="73.8764%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.55%)</title><rect x="73.6264%" y="181" width="0.5495%" height="15" fill="rgb(210,56,17)" fg:x="134403206" fg:w="1003009"/><text x="73.8764%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.55%)</title><rect x="73.6264%" y="165" width="0.5495%" height="15" fill="rgb(224,130,29)" fg:x="134403206" fg:w="1003009"/><text x="73.8764%" y="175.50"></text></g><g><title>__rdl_dealloc (1,003,009 samples, 0.55%)</title><rect x="73.6264%" y="149" width="0.5495%" height="15" fill="rgb(235,212,8)" fg:x="134403206" fg:w="1003009"/><text x="73.8764%" y="159.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,003,009 samples, 0.55%)</title><rect x="73.6264%" y="133" width="0.5495%" height="15" fill="rgb(223,33,50)" fg:x="134403206" fg:w="1003009"/><text x="73.8764%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.55%)</title><rect x="74.1758%" y="277" width="0.5495%" height="15" fill="rgb(219,149,13)" fg:x="135406215" fg:w="1003009"/><text x="74.4258%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.55%)</title><rect x="74.1758%" y="261" width="0.5495%" height="15" fill="rgb(250,156,29)" fg:x="135406215" fg:w="1003009"/><text x="74.4258%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.55%)</title><rect x="74.1758%" y="245" width="0.5495%" height="15" fill="rgb(216,193,19)" fg:x="135406215" fg:w="1003009"/><text x="74.4258%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.55%)</title><rect x="74.1758%" y="229" width="0.5495%" height="15" fill="rgb(216,135,14)" fg:x="135406215" fg:w="1003009"/><text x="74.4258%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.55%)</title><rect x="74.1758%" y="213" width="0.5495%" height="15" fill="rgb(241,47,5)" fg:x="135406215" fg:w="1003009"/><text x="74.4258%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.55%)</title><rect x="74.1758%" y="197" width="0.5495%" height="15" fill="rgb(233,42,35)" fg:x="135406215" fg:w="1003009"/><text x="74.4258%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.55%)</title><rect x="74.1758%" y="181" width="0.5495%" height="15" fill="rgb(231,13,6)" fg:x="135406215" fg:w="1003009"/><text x="74.4258%" y="191.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.55%)</title><rect x="74.1758%" y="165" width="0.5495%" height="15" fill="rgb(207,181,40)" fg:x="135406215" fg:w="1003009"/><text x="74.4258%" y="175.50"></text></g><g><title>_int_malloc (1,003,009 samples, 0.55%)</title><rect x="74.1758%" y="149" width="0.5495%" height="15" fill="rgb(254,173,49)" fg:x="135406215" fg:w="1003009"/><text x="74.4258%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,003,009 samples, 0.55%)</title><rect x="74.7253%" y="277" width="0.5495%" height="15" fill="rgb(221,1,38)" fg:x="136409224" fg:w="1003009"/><text x="74.9753%" y="287.50"></text></g><g><title>chlang::tree_evaluator::eval (135,406,215 samples, 74.18%)</title><rect x="1.6484%" y="341" width="74.1758%" height="15" fill="rgb(206,124,46)" fg:x="3009027" fg:w="135406215"/><text x="1.8984%" y="351.50">chlang::tree_evaluator::eval</text></g><g><title>chlang::board::Board::get_game_state (135,406,215 samples, 74.18%)</title><rect x="1.6484%" y="325" width="74.1758%" height="15" fill="rgb(249,21,11)" fg:x="3009027" fg:w="135406215"/><text x="1.8984%" y="335.50">chlang::board::Board::get_game_state</text></g><g><title>chlang::board::Board::get_valid_moves (134,403,206 samples, 73.63%)</title><rect x="2.1978%" y="309" width="73.6264%" height="15" fill="rgb(222,201,40)" fg:x="4012036" fg:w="134403206"/><text x="2.4478%" y="319.50">chlang::board::Board::get_valid_moves</text></g><g><title>chlang::board::Board::get_pseudo_legal_moves (6,018,054 samples, 3.30%)</title><rect x="72.5275%" y="293" width="3.2967%" height="15" fill="rgb(235,61,29)" fg:x="132397188" fg:w="6018054"/><text x="72.7775%" y="303.50">chl..</text></g><g><title>chlang::board::Board::unmake_last (2,006,018 samples, 1.10%)</title><rect x="75.8242%" y="341" width="1.0989%" height="15" fill="rgb(219,207,3)" fg:x="138415242" fg:w="2006018"/><text x="76.0742%" y="351.50"></text></g><g><title>__rust_dealloc (1,003,009 samples, 0.55%)</title><rect x="76.9231%" y="245" width="0.5495%" height="15" fill="rgb(222,56,46)" fg:x="140421260" fg:w="1003009"/><text x="77.1731%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (2,006,018 samples, 1.10%)</title><rect x="76.9231%" y="325" width="1.0989%" height="15" fill="rgb(239,76,54)" fg:x="140421260" fg:w="2006018"/><text x="77.1731%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (2,006,018 samples, 1.10%)</title><rect x="76.9231%" y="309" width="1.0989%" height="15" fill="rgb(231,124,27)" fg:x="140421260" fg:w="2006018"/><text x="77.1731%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,006,018 samples, 1.10%)</title><rect x="76.9231%" y="293" width="1.0989%" height="15" fill="rgb(249,195,6)" fg:x="140421260" fg:w="2006018"/><text x="77.1731%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,006,018 samples, 1.10%)</title><rect x="76.9231%" y="277" width="1.0989%" height="15" fill="rgb(237,174,47)" fg:x="140421260" fg:w="2006018"/><text x="77.1731%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (2,006,018 samples, 1.10%)</title><rect x="76.9231%" y="261" width="1.0989%" height="15" fill="rgb(206,201,31)" fg:x="140421260" fg:w="2006018"/><text x="77.1731%" y="271.50"></text></g><g><title>__GI___libc_free (1,003,009 samples, 0.55%)</title><rect x="77.4725%" y="245" width="0.5495%" height="15" fill="rgb(231,57,52)" fg:x="141424269" fg:w="1003009"/><text x="77.7225%" y="255.50"></text></g><g><title>_int_free (1,003,009 samples, 0.55%)</title><rect x="77.4725%" y="229" width="0.5495%" height="15" fill="rgb(248,177,22)" fg:x="141424269" fg:w="1003009"/><text x="77.7225%" y="239.50"></text></g><g><title>chlang::board::Board::piece_type (2,006,018 samples, 1.10%)</title><rect x="78.0220%" y="325" width="1.0989%" height="15" fill="rgb(215,211,37)" fg:x="142427278" fg:w="2006018"/><text x="78.2720%" y="335.50"></text></g><g><title>chlang::board::Position::bitboard (2,006,018 samples, 1.10%)</title><rect x="78.0220%" y="309" width="1.0989%" height="15" fill="rgb(241,128,51)" fg:x="142427278" fg:w="2006018"/><text x="78.2720%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (2,006,018 samples, 1.10%)</title><rect x="78.0220%" y="293" width="1.0989%" height="15" fill="rgb(227,165,31)" fg:x="142427278" fg:w="2006018"/><text x="78.2720%" y="303.50"></text></g><g><title>chlang::board::Board::key (1,003,009 samples, 0.55%)</title><rect x="79.1209%" y="325" width="0.5495%" height="15" fill="rgb(228,167,24)" fg:x="144433296" fg:w="1003009"/><text x="79.3709%" y="335.50"></text></g><g><title>chlang::board::Position::bitboard (2,006,018 samples, 1.10%)</title><rect x="79.6703%" y="277" width="1.0989%" height="15" fill="rgb(228,143,12)" fg:x="145436305" fg:w="2006018"/><text x="79.9203%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (2,006,018 samples, 1.10%)</title><rect x="79.6703%" y="261" width="1.0989%" height="15" fill="rgb(249,149,8)" fg:x="145436305" fg:w="2006018"/><text x="79.9203%" y="271.50"></text></g><g><title>chlang::board::Board::piece_type (3,009,027 samples, 1.65%)</title><rect x="79.6703%" y="293" width="1.6484%" height="15" fill="rgb(243,35,44)" fg:x="145436305" fg:w="3009027"/><text x="79.9203%" y="303.50"></text></g><g><title>chlang::board::Board::make_move (9,027,081 samples, 4.95%)</title><rect x="76.9231%" y="341" width="4.9451%" height="15" fill="rgb(246,89,9)" fg:x="140421260" fg:w="9027081"/><text x="77.1731%" y="351.50">chlang..</text></g><g><title>chlang::board::Board::is_valid (4,012,036 samples, 2.20%)</title><rect x="79.6703%" y="325" width="2.1978%" height="15" fill="rgb(233,213,13)" fg:x="145436305" fg:w="4012036"/><text x="79.9203%" y="335.50">c..</text></g><g><title>chlang::board::Board::attacked_by_color (4,012,036 samples, 2.20%)</title><rect x="79.6703%" y="309" width="2.1978%" height="15" fill="rgb(233,141,41)" fg:x="145436305" fg:w="4012036"/><text x="79.9203%" y="319.50">c..</text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (1,003,009 samples, 0.55%)</title><rect x="81.3187%" y="293" width="0.5495%" height="15" fill="rgb(239,167,4)" fg:x="148445332" fg:w="1003009"/><text x="81.5687%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.55%)</title><rect x="81.3187%" y="277" width="0.5495%" height="15" fill="rgb(209,217,16)" fg:x="148445332" fg:w="1003009"/><text x="81.5687%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.55%)</title><rect x="81.3187%" y="261" width="0.5495%" height="15" fill="rgb(219,88,35)" fg:x="148445332" fg:w="1003009"/><text x="81.5687%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.55%)</title><rect x="81.3187%" y="245" width="0.5495%" height="15" fill="rgb(220,193,23)" fg:x="148445332" fg:w="1003009"/><text x="81.5687%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.55%)</title><rect x="81.3187%" y="229" width="0.5495%" height="15" fill="rgb(230,90,52)" fg:x="148445332" fg:w="1003009"/><text x="81.5687%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.55%)</title><rect x="81.3187%" y="213" width="0.5495%" height="15" fill="rgb(252,106,19)" fg:x="148445332" fg:w="1003009"/><text x="81.5687%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.55%)</title><rect x="81.3187%" y="197" width="0.5495%" height="15" fill="rgb(206,74,20)" fg:x="148445332" fg:w="1003009"/><text x="81.5687%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.55%)</title><rect x="81.3187%" y="181" width="0.5495%" height="15" fill="rgb(230,138,44)" fg:x="148445332" fg:w="1003009"/><text x="81.5687%" y="191.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.55%)</title><rect x="81.3187%" y="165" width="0.5495%" height="15" fill="rgb(235,182,43)" fg:x="148445332" fg:w="1003009"/><text x="81.5687%" y="175.50"></text></g><g><title>chlang::board::Board::piece_type (1,003,009 samples, 0.55%)</title><rect x="81.8681%" y="309" width="0.5495%" height="15" fill="rgb(242,16,51)" fg:x="149448341" fg:w="1003009"/><text x="82.1181%" y="319.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves (2,006,018 samples, 1.10%)</title><rect x="81.8681%" y="341" width="1.0989%" height="15" fill="rgb(248,9,4)" fg:x="149448341" fg:w="2006018"/><text x="82.1181%" y="351.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (2,006,018 samples, 1.10%)</title><rect x="81.8681%" y="325" width="1.0989%" height="15" fill="rgb(210,31,22)" fg:x="149448341" fg:w="2006018"/><text x="82.1181%" y="335.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (1,003,009 samples, 0.55%)</title><rect x="82.4176%" y="309" width="0.5495%" height="15" fill="rgb(239,54,39)" fg:x="150451350" fg:w="1003009"/><text x="82.6676%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (1,003,009 samples, 0.55%)</title><rect x="82.4176%" y="293" width="0.5495%" height="15" fill="rgb(230,99,41)" fg:x="150451350" fg:w="1003009"/><text x="82.6676%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.55%)</title><rect x="82.4176%" y="277" width="0.5495%" height="15" fill="rgb(253,106,12)" fg:x="150451350" fg:w="1003009"/><text x="82.6676%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.55%)</title><rect x="82.4176%" y="261" width="0.5495%" height="15" fill="rgb(213,46,41)" fg:x="150451350" fg:w="1003009"/><text x="82.6676%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.55%)</title><rect x="82.4176%" y="245" width="0.5495%" height="15" fill="rgb(215,133,35)" fg:x="150451350" fg:w="1003009"/><text x="82.6676%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.55%)</title><rect x="82.4176%" y="229" width="0.5495%" height="15" fill="rgb(213,28,5)" fg:x="150451350" fg:w="1003009"/><text x="82.6676%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.55%)</title><rect x="82.4176%" y="213" width="0.5495%" height="15" fill="rgb(215,77,49)" fg:x="150451350" fg:w="1003009"/><text x="82.6676%" y="223.50"></text></g><g><title>__GI___libc_free (1,003,009 samples, 0.55%)</title><rect x="82.4176%" y="197" width="0.5495%" height="15" fill="rgb(248,100,22)" fg:x="150451350" fg:w="1003009"/><text x="82.6676%" y="207.50"></text></g><g><title>_int_free (1,003,009 samples, 0.55%)</title><rect x="82.4176%" y="181" width="0.5495%" height="15" fill="rgb(208,67,9)" fg:x="150451350" fg:w="1003009"/><text x="82.6676%" y="191.50"></text></g><g><title>tcache_put (1,003,009 samples, 0.55%)</title><rect x="82.4176%" y="165" width="0.5495%" height="15" fill="rgb(219,133,21)" fg:x="150451350" fg:w="1003009"/><text x="82.6676%" y="175.50"></text></g><g><title>chlang::board::Board::is_threefold_rep (1,003,009 samples, 0.55%)</title><rect x="82.9670%" y="325" width="0.5495%" height="15" fill="rgb(246,46,29)" fg:x="151454359" fg:w="1003009"/><text x="83.2170%" y="335.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (1,003,009 samples, 0.55%)</title><rect x="82.9670%" y="309" width="0.5495%" height="15" fill="rgb(246,185,52)" fg:x="151454359" fg:w="1003009"/><text x="83.2170%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (1,003,009 samples, 0.55%)</title><rect x="82.9670%" y="293" width="0.5495%" height="15" fill="rgb(252,136,11)" fg:x="151454359" fg:w="1003009"/><text x="83.2170%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (1,003,009 samples, 0.55%)</title><rect x="82.9670%" y="277" width="0.5495%" height="15" fill="rgb(219,138,53)" fg:x="151454359" fg:w="1003009"/><text x="83.2170%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.55%)</title><rect x="82.9670%" y="261" width="0.5495%" height="15" fill="rgb(211,51,23)" fg:x="151454359" fg:w="1003009"/><text x="83.2170%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::with_capacity (1,003,009 samples, 0.55%)</title><rect x="82.9670%" y="245" width="0.5495%" height="15" fill="rgb(247,221,28)" fg:x="151454359" fg:w="1003009"/><text x="83.2170%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1,003,009 samples, 0.55%)</title><rect x="82.9670%" y="229" width="0.5495%" height="15" fill="rgb(251,222,45)" fg:x="151454359" fg:w="1003009"/><text x="83.2170%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1,003,009 samples, 0.55%)</title><rect x="82.9670%" y="213" width="0.5495%" height="15" fill="rgb(217,162,53)" fg:x="151454359" fg:w="1003009"/><text x="83.2170%" y="223.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1,003,009 samples, 0.55%)</title><rect x="82.9670%" y="197" width="0.5495%" height="15" fill="rgb(229,93,14)" fg:x="151454359" fg:w="1003009"/><text x="83.2170%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.55%)</title><rect x="82.9670%" y="181" width="0.5495%" height="15" fill="rgb(209,67,49)" fg:x="151454359" fg:w="1003009"/><text x="83.2170%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.55%)</title><rect x="82.9670%" y="165" width="0.5495%" height="15" fill="rgb(213,87,29)" fg:x="151454359" fg:w="1003009"/><text x="83.2170%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.55%)</title><rect x="82.9670%" y="149" width="0.5495%" height="15" fill="rgb(205,151,52)" fg:x="151454359" fg:w="1003009"/><text x="83.2170%" y="159.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.55%)</title><rect x="82.9670%" y="133" width="0.5495%" height="15" fill="rgb(253,215,39)" fg:x="151454359" fg:w="1003009"/><text x="83.2170%" y="143.50"></text></g><g><title>_int_malloc (1,003,009 samples, 0.55%)</title><rect x="82.9670%" y="117" width="0.5495%" height="15" fill="rgb(221,220,41)" fg:x="151454359" fg:w="1003009"/><text x="83.2170%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.55%)</title><rect x="83.5165%" y="293" width="0.5495%" height="15" fill="rgb(218,133,21)" fg:x="152457368" fg:w="1003009"/><text x="83.7665%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (1,003,009 samples, 0.55%)</title><rect x="83.5165%" y="277" width="0.5495%" height="15" fill="rgb(221,193,43)" fg:x="152457368" fg:w="1003009"/><text x="83.7665%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,003,009 samples, 0.55%)</title><rect x="83.5165%" y="261" width="0.5495%" height="15" fill="rgb(240,128,52)" fg:x="152457368" fg:w="1003009"/><text x="83.7665%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,003,009 samples, 0.55%)</title><rect x="83.5165%" y="245" width="0.5495%" height="15" fill="rgb(253,114,12)" fg:x="152457368" fg:w="1003009"/><text x="83.7665%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (1,003,009 samples, 0.55%)</title><rect x="83.5165%" y="229" width="0.5495%" height="15" fill="rgb(215,223,47)" fg:x="152457368" fg:w="1003009"/><text x="83.7665%" y="239.50"></text></g><g><title>__rust_dealloc (1,003,009 samples, 0.55%)</title><rect x="83.5165%" y="213" width="0.5495%" height="15" fill="rgb(248,225,23)" fg:x="152457368" fg:w="1003009"/><text x="83.7665%" y="223.50"></text></g><g><title>chlang::board::Position::bitboard (2,006,018 samples, 1.10%)</title><rect x="84.0659%" y="293" width="1.0989%" height="15" fill="rgb(250,108,0)" fg:x="153460377" fg:w="2006018"/><text x="84.3159%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (2,006,018 samples, 1.10%)</title><rect x="84.0659%" y="277" width="1.0989%" height="15" fill="rgb(228,208,7)" fg:x="153460377" fg:w="2006018"/><text x="84.3159%" y="287.50"></text></g><g><title>chlang::board::Board::piece_type (1,003,009 samples, 0.55%)</title><rect x="85.1648%" y="293" width="0.5495%" height="15" fill="rgb(244,45,10)" fg:x="155466395" fg:w="1003009"/><text x="85.4148%" y="303.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.55%)</title><rect x="85.1648%" y="277" width="0.5495%" height="15" fill="rgb(207,125,25)" fg:x="155466395" fg:w="1003009"/><text x="85.4148%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.55%)</title><rect x="85.1648%" y="261" width="0.5495%" height="15" fill="rgb(210,195,18)" fg:x="155466395" fg:w="1003009"/><text x="85.4148%" y="271.50"></text></g><g><title>__rust_dealloc (1,003,009 samples, 0.55%)</title><rect x="85.7143%" y="133" width="0.5495%" height="15" fill="rgb(249,80,12)" fg:x="156469404" fg:w="1003009"/><text x="85.9643%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 1.65%)</title><rect x="85.7143%" y="261" width="1.6484%" height="15" fill="rgb(221,65,9)" fg:x="156469404" fg:w="3009027"/><text x="85.9643%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 1.65%)</title><rect x="85.7143%" y="245" width="1.6484%" height="15" fill="rgb(235,49,36)" fg:x="156469404" fg:w="3009027"/><text x="85.9643%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (3,009,027 samples, 1.65%)</title><rect x="85.7143%" y="229" width="1.6484%" height="15" fill="rgb(225,32,20)" fg:x="156469404" fg:w="3009027"/><text x="85.9643%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 1.65%)</title><rect x="85.7143%" y="213" width="1.6484%" height="15" fill="rgb(215,141,46)" fg:x="156469404" fg:w="3009027"/><text x="85.9643%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 1.65%)</title><rect x="85.7143%" y="197" width="1.6484%" height="15" fill="rgb(250,160,47)" fg:x="156469404" fg:w="3009027"/><text x="85.9643%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 1.65%)</title><rect x="85.7143%" y="181" width="1.6484%" height="15" fill="rgb(216,222,40)" fg:x="156469404" fg:w="3009027"/><text x="85.9643%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,009,027 samples, 1.65%)</title><rect x="85.7143%" y="165" width="1.6484%" height="15" fill="rgb(234,217,39)" fg:x="156469404" fg:w="3009027"/><text x="85.9643%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (3,009,027 samples, 1.65%)</title><rect x="85.7143%" y="149" width="1.6484%" height="15" fill="rgb(207,178,40)" fg:x="156469404" fg:w="3009027"/><text x="85.9643%" y="159.50"></text></g><g><title>__GI___libc_free (2,006,018 samples, 1.10%)</title><rect x="86.2637%" y="133" width="1.0989%" height="15" fill="rgb(221,136,13)" fg:x="157472413" fg:w="2006018"/><text x="86.5137%" y="143.50"></text></g><g><title>_int_free (2,006,018 samples, 1.10%)</title><rect x="86.2637%" y="117" width="1.0989%" height="15" fill="rgb(249,199,10)" fg:x="157472413" fg:w="2006018"/><text x="86.5137%" y="127.50"></text></g><g><title>tcache_put (2,006,018 samples, 1.10%)</title><rect x="86.2637%" y="101" width="1.0989%" height="15" fill="rgb(249,222,13)" fg:x="157472413" fg:w="2006018"/><text x="86.5137%" y="111.50"></text></g><g><title>chlang::board::Position::bitboard (5,015,045 samples, 2.75%)</title><rect x="87.3626%" y="245" width="2.7473%" height="15" fill="rgb(244,185,38)" fg:x="159478431" fg:w="5015045"/><text x="87.6126%" y="255.50">ch..</text></g><g><title>core::num::&lt;impl u64&gt;::pow (5,015,045 samples, 2.75%)</title><rect x="87.3626%" y="229" width="2.7473%" height="15" fill="rgb(236,202,9)" fg:x="159478431" fg:w="5015045"/><text x="87.6126%" y="239.50">co..</text></g><g><title>chlang::board::Board::piece_type (6,018,054 samples, 3.30%)</title><rect x="87.3626%" y="261" width="3.2967%" height="15" fill="rgb(250,229,37)" fg:x="159478431" fg:w="6018054"/><text x="87.6126%" y="271.50">chl..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,003,009 samples, 0.55%)</title><rect x="90.6593%" y="245" width="0.5495%" height="15" fill="rgb(206,174,23)" fg:x="165496485" fg:w="1003009"/><text x="90.9093%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.55%)</title><rect x="90.6593%" y="229" width="0.5495%" height="15" fill="rgb(211,33,43)" fg:x="165496485" fg:w="1003009"/><text x="90.9093%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,003,009 samples, 0.55%)</title><rect x="90.6593%" y="213" width="0.5495%" height="15" fill="rgb(245,58,50)" fg:x="165496485" fg:w="1003009"/><text x="90.9093%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1,003,009 samples, 0.55%)</title><rect x="90.6593%" y="197" width="0.5495%" height="15" fill="rgb(244,68,36)" fg:x="165496485" fg:w="1003009"/><text x="90.9093%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,003,009 samples, 0.55%)</title><rect x="90.6593%" y="181" width="0.5495%" height="15" fill="rgb(232,229,15)" fg:x="165496485" fg:w="1003009"/><text x="90.9093%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,003,009 samples, 0.55%)</title><rect x="90.6593%" y="165" width="0.5495%" height="15" fill="rgb(254,30,23)" fg:x="165496485" fg:w="1003009"/><text x="90.9093%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1,003,009 samples, 0.55%)</title><rect x="90.6593%" y="149" width="0.5495%" height="15" fill="rgb(235,160,14)" fg:x="165496485" fg:w="1003009"/><text x="90.9093%" y="159.50"></text></g><g><title>__GI___libc_malloc (1,003,009 samples, 0.55%)</title><rect x="90.6593%" y="133" width="0.5495%" height="15" fill="rgb(212,155,44)" fg:x="165496485" fg:w="1003009"/><text x="90.9093%" y="143.50"></text></g><g><title>tcache_get (1,003,009 samples, 0.55%)</title><rect x="90.6593%" y="117" width="0.5495%" height="15" fill="rgb(226,2,50)" fg:x="165496485" fg:w="1003009"/><text x="90.9093%" y="127.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (2,006,018 samples, 1.10%)</title><rect x="90.6593%" y="261" width="1.0989%" height="15" fill="rgb(234,177,6)" fg:x="165496485" fg:w="2006018"/><text x="90.9093%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,003,009 samples, 0.55%)</title><rect x="91.2088%" y="245" width="0.5495%" height="15" fill="rgb(217,24,9)" fg:x="166499494" fg:w="1003009"/><text x="91.4588%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,003,009 samples, 0.55%)</title><rect x="91.2088%" y="229" width="0.5495%" height="15" fill="rgb(220,13,46)" fg:x="166499494" fg:w="1003009"/><text x="91.4588%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,003,009 samples, 0.55%)</title><rect x="91.2088%" y="213" width="0.5495%" height="15" fill="rgb(239,221,27)" fg:x="166499494" fg:w="1003009"/><text x="91.4588%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1,003,009 samples, 0.55%)</title><rect x="91.2088%" y="197" width="0.5495%" height="15" fill="rgb(222,198,25)" fg:x="166499494" fg:w="1003009"/><text x="91.4588%" y="207.50"></text></g><g><title>chlang::board::Position::valid (1,003,009 samples, 0.55%)</title><rect x="91.7582%" y="245" width="0.5495%" height="15" fill="rgb(211,99,13)" fg:x="167502503" fg:w="1003009"/><text x="92.0082%" y="255.50"></text></g><g><title>tcache_get (1,003,009 samples, 0.55%)</title><rect x="92.3077%" y="117" width="0.5495%" height="15" fill="rgb(232,111,31)" fg:x="168505512" fg:w="1003009"/><text x="92.5577%" y="127.50"></text></g><g><title>chlang::board::Board::is_valid (14,042,126 samples, 7.69%)</title><rect x="85.7143%" y="293" width="7.6923%" height="15" fill="rgb(245,82,37)" fg:x="156469404" fg:w="14042126"/><text x="85.9643%" y="303.50">chlang::boa..</text></g><g><title>chlang::board::Board::attacked_by_color (14,042,126 samples, 7.69%)</title><rect x="85.7143%" y="277" width="7.6923%" height="15" fill="rgb(227,149,46)" fg:x="156469404" fg:w="14042126"/><text x="85.9643%" y="287.50">chlang::boa..</text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (3,009,027 samples, 1.65%)</title><rect x="91.7582%" y="261" width="1.6484%" height="15" fill="rgb(218,36,50)" fg:x="167502503" fg:w="3009027"/><text x="92.0082%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,006,018 samples, 1.10%)</title><rect x="92.3077%" y="245" width="1.0989%" height="15" fill="rgb(226,80,48)" fg:x="168505512" fg:w="2006018"/><text x="92.5577%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 1.10%)</title><rect x="92.3077%" y="229" width="1.0989%" height="15" fill="rgb(238,224,15)" fg:x="168505512" fg:w="2006018"/><text x="92.5577%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,006,018 samples, 1.10%)</title><rect x="92.3077%" y="213" width="1.0989%" height="15" fill="rgb(241,136,10)" fg:x="168505512" fg:w="2006018"/><text x="92.5577%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2,006,018 samples, 1.10%)</title><rect x="92.3077%" y="197" width="1.0989%" height="15" fill="rgb(208,32,45)" fg:x="168505512" fg:w="2006018"/><text x="92.5577%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,006,018 samples, 1.10%)</title><rect x="92.3077%" y="181" width="1.0989%" height="15" fill="rgb(207,135,9)" fg:x="168505512" fg:w="2006018"/><text x="92.5577%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,006,018 samples, 1.10%)</title><rect x="92.3077%" y="165" width="1.0989%" height="15" fill="rgb(206,86,44)" fg:x="168505512" fg:w="2006018"/><text x="92.5577%" y="175.50"></text></g><g><title>alloc::alloc::alloc (2,006,018 samples, 1.10%)</title><rect x="92.3077%" y="149" width="1.0989%" height="15" fill="rgb(245,177,15)" fg:x="168505512" fg:w="2006018"/><text x="92.5577%" y="159.50"></text></g><g><title>__GI___libc_malloc (2,006,018 samples, 1.10%)</title><rect x="92.3077%" y="133" width="1.0989%" height="15" fill="rgb(206,64,50)" fg:x="168505512" fg:w="2006018"/><text x="92.5577%" y="143.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (1,003,009 samples, 0.55%)</title><rect x="93.4066%" y="277" width="0.5495%" height="15" fill="rgb(234,36,40)" fg:x="170511530" fg:w="1003009"/><text x="93.6566%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (1,003,009 samples, 0.55%)</title><rect x="93.4066%" y="261" width="0.5495%" height="15" fill="rgb(213,64,8)" fg:x="170511530" fg:w="1003009"/><text x="93.6566%" y="271.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (1,003,009 samples, 0.55%)</title><rect x="93.4066%" y="245" width="0.5495%" height="15" fill="rgb(210,75,36)" fg:x="170511530" fg:w="1003009"/><text x="93.6566%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,003,009 samples, 0.55%)</title><rect x="93.4066%" y="229" width="0.5495%" height="15" fill="rgb(229,88,21)" fg:x="170511530" fg:w="1003009"/><text x="93.6566%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (1,003,009 samples, 0.55%)</title><rect x="93.4066%" y="213" width="0.5495%" height="15" fill="rgb(252,204,47)" fg:x="170511530" fg:w="1003009"/><text x="93.6566%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,003,009 samples, 0.55%)</title><rect x="93.4066%" y="197" width="0.5495%" height="15" fill="rgb(208,77,27)" fg:x="170511530" fg:w="1003009"/><text x="93.6566%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1,003,009 samples, 0.55%)</title><rect x="93.4066%" y="181" width="0.5495%" height="15" fill="rgb(221,76,26)" fg:x="170511530" fg:w="1003009"/><text x="93.6566%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,003,009 samples, 0.55%)</title><rect x="93.4066%" y="165" width="0.5495%" height="15" fill="rgb(225,139,18)" fg:x="170511530" fg:w="1003009"/><text x="93.6566%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,003,009 samples, 0.55%)</title><rect x="93.4066%" y="149" width="0.5495%" height="15" fill="rgb(230,137,11)" fg:x="170511530" fg:w="1003009"/><text x="93.6566%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,003,009 samples, 0.55%)</title><rect x="93.4066%" y="133" width="0.5495%" height="15" fill="rgb(212,28,1)" fg:x="170511530" fg:w="1003009"/><text x="93.6566%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,003,009 samples, 0.55%)</title><rect x="93.4066%" y="117" width="0.5495%" height="15" fill="rgb(248,164,17)" fg:x="170511530" fg:w="1003009"/><text x="93.6566%" y="127.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1,003,009 samples, 0.55%)</title><rect x="93.4066%" y="101" width="0.5495%" height="15" fill="rgb(222,171,42)" fg:x="170511530" fg:w="1003009"/><text x="93.6566%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1,003,009 samples, 0.55%)</title><rect x="93.4066%" y="85" width="0.5495%" height="15" fill="rgb(243,84,45)" fg:x="170511530" fg:w="1003009"/><text x="93.6566%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (1,003,009 samples, 0.55%)</title><rect x="93.4066%" y="69" width="0.5495%" height="15" fill="rgb(252,49,23)" fg:x="170511530" fg:w="1003009"/><text x="93.6566%" y="79.50"></text></g><g><title>core::ptr::write (1,003,009 samples, 0.55%)</title><rect x="93.4066%" y="53" width="0.5495%" height="15" fill="rgb(215,19,7)" fg:x="170511530" fg:w="1003009"/><text x="93.6566%" y="63.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1,003,009 samples, 0.55%)</title><rect x="93.4066%" y="37" width="0.5495%" height="15" fill="rgb(238,81,41)" fg:x="170511530" fg:w="1003009"/><text x="93.6566%" y="47.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (1,003,009 samples, 0.55%)</title><rect x="93.9560%" y="277" width="0.5495%" height="15" fill="rgb(210,199,37)" fg:x="171514539" fg:w="1003009"/><text x="94.2060%" y="287.50"></text></g><g><title>chlang::board::Position::valid (1,003,009 samples, 0.55%)</title><rect x="93.9560%" y="261" width="0.5495%" height="15" fill="rgb(244,192,49)" fg:x="171514539" fg:w="1003009"/><text x="94.2060%" y="271.50"></text></g><g><title>chlang::tree_evaluator::eval (173,520,557 samples, 95.05%)</title><rect x="0.0000%" y="357" width="95.0549%" height="15" fill="rgb(226,211,11)" fg:x="0" fg:w="173520557"/><text x="0.2500%" y="367.50">chlang::tree_evaluator::eval</text></g><g><title>chlang::board::Board::get_game_state (22,066,198 samples, 12.09%)</title><rect x="82.9670%" y="341" width="12.0879%" height="15" fill="rgb(236,162,54)" fg:x="151454359" fg:w="22066198"/><text x="83.2170%" y="351.50">chlang::board::Boa..</text></g><g><title>chlang::board::Board::get_valid_moves (21,063,189 samples, 11.54%)</title><rect x="83.5165%" y="325" width="11.5385%" height="15" fill="rgb(220,229,9)" fg:x="152457368" fg:w="21063189"/><text x="83.7665%" y="335.50">chlang::board::Bo..</text></g><g><title>chlang::board::Board::make_move (21,063,189 samples, 11.54%)</title><rect x="83.5165%" y="309" width="11.5385%" height="15" fill="rgb(250,87,22)" fg:x="152457368" fg:w="21063189"/><text x="83.7665%" y="319.50">chlang::board::Bo..</text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (3,009,027 samples, 1.65%)</title><rect x="93.4066%" y="293" width="1.6484%" height="15" fill="rgb(239,43,17)" fg:x="170511530" fg:w="3009027"/><text x="93.6566%" y="303.50"></text></g><g><title>chlang::board::Board::piece_type (1,003,009 samples, 0.55%)</title><rect x="95.0549%" y="341" width="0.5495%" height="15" fill="rgb(231,177,25)" fg:x="173520557" fg:w="1003009"/><text x="95.3049%" y="351.50"></text></g><g><title>chlang::board::Board::piece_type (1,003,009 samples, 0.55%)</title><rect x="95.6044%" y="309" width="0.5495%" height="15" fill="rgb(219,179,1)" fg:x="174523566" fg:w="1003009"/><text x="95.8544%" y="319.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.55%)</title><rect x="95.6044%" y="293" width="0.5495%" height="15" fill="rgb(238,219,53)" fg:x="174523566" fg:w="1003009"/><text x="95.8544%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.55%)</title><rect x="95.6044%" y="277" width="0.5495%" height="15" fill="rgb(232,167,36)" fg:x="174523566" fg:w="1003009"/><text x="95.8544%" y="287.50"></text></g><g><title>chlang::board::Board::is_valid (2,006,018 samples, 1.10%)</title><rect x="95.6044%" y="341" width="1.0989%" height="15" fill="rgb(244,19,51)" fg:x="174523566" fg:w="2006018"/><text x="95.8544%" y="351.50"></text></g><g><title>chlang::board::Board::attacked_by_color (2,006,018 samples, 1.10%)</title><rect x="95.6044%" y="325" width="1.0989%" height="15" fill="rgb(224,6,22)" fg:x="174523566" fg:w="2006018"/><text x="95.8544%" y="335.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (1,003,009 samples, 0.55%)</title><rect x="96.1538%" y="309" width="0.5495%" height="15" fill="rgb(224,145,5)" fg:x="175526575" fg:w="1003009"/><text x="96.4038%" y="319.50"></text></g><g><title>chlang::board::Board::make_move (4,012,036 samples, 2.20%)</title><rect x="95.0549%" y="357" width="2.1978%" height="15" fill="rgb(234,130,49)" fg:x="173520557" fg:w="4012036"/><text x="95.3049%" y="367.50">c..</text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (1,003,009 samples, 0.55%)</title><rect x="96.7033%" y="341" width="0.5495%" height="15" fill="rgb(254,6,2)" fg:x="176529584" fg:w="1003009"/><text x="96.9533%" y="351.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (1,003,009 samples, 0.55%)</title><rect x="96.7033%" y="325" width="0.5495%" height="15" fill="rgb(208,96,46)" fg:x="176529584" fg:w="1003009"/><text x="96.9533%" y="335.50"></text></g><g><title>chlang::board::Position::bitboard (1,003,009 samples, 0.55%)</title><rect x="96.7033%" y="309" width="0.5495%" height="15" fill="rgb(239,3,39)" fg:x="176529584" fg:w="1003009"/><text x="96.9533%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.55%)</title><rect x="96.7033%" y="293" width="0.5495%" height="15" fill="rgb(233,210,1)" fg:x="176529584" fg:w="1003009"/><text x="96.9533%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (1,003,009 samples, 0.55%)</title><rect x="97.2527%" y="245" width="0.5495%" height="15" fill="rgb(244,137,37)" fg:x="177532593" fg:w="1003009"/><text x="97.5027%" y="255.50"></text></g><g><title>chlang::board::Board::piece_type (2,006,018 samples, 1.10%)</title><rect x="97.2527%" y="277" width="1.0989%" height="15" fill="rgb(240,136,2)" fg:x="177532593" fg:w="2006018"/><text x="97.5027%" y="287.50"></text></g><g><title>chlang::board::Position::bitboard (2,006,018 samples, 1.10%)</title><rect x="97.2527%" y="261" width="1.0989%" height="15" fill="rgb(239,18,37)" fg:x="177532593" fg:w="2006018"/><text x="97.5027%" y="271.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (1,003,009 samples, 0.55%)</title><rect x="98.3516%" y="277" width="0.5495%" height="15" fill="rgb(218,185,22)" fg:x="179538611" fg:w="1003009"/><text x="98.6016%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,003,009 samples, 0.55%)</title><rect x="98.3516%" y="261" width="0.5495%" height="15" fill="rgb(225,218,4)" fg:x="179538611" fg:w="1003009"/><text x="98.6016%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1,003,009 samples, 0.55%)</title><rect x="98.3516%" y="245" width="0.5495%" height="15" fill="rgb(230,182,32)" fg:x="179538611" fg:w="1003009"/><text x="98.6016%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,003,009 samples, 0.55%)</title><rect x="98.3516%" y="229" width="0.5495%" height="15" fill="rgb(242,56,43)" fg:x="179538611" fg:w="1003009"/><text x="98.6016%" y="239.50"></text></g><g><title>chlang::board::Board::make_move (4,012,036 samples, 2.20%)</title><rect x="97.2527%" y="325" width="2.1978%" height="15" fill="rgb(233,99,24)" fg:x="177532593" fg:w="4012036"/><text x="97.5027%" y="335.50">c..</text></g><g><title>chlang::board::Board::is_valid (4,012,036 samples, 2.20%)</title><rect x="97.2527%" y="309" width="2.1978%" height="15" fill="rgb(234,209,42)" fg:x="177532593" fg:w="4012036"/><text x="97.5027%" y="319.50">c..</text></g><g><title>chlang::board::Board::attacked_by_color (4,012,036 samples, 2.20%)</title><rect x="97.2527%" y="293" width="2.1978%" height="15" fill="rgb(227,7,12)" fg:x="177532593" fg:w="4012036"/><text x="97.5027%" y="303.50">c..</text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (1,003,009 samples, 0.55%)</title><rect x="98.9011%" y="277" width="0.5495%" height="15" fill="rgb(245,203,43)" fg:x="180541620" fg:w="1003009"/><text x="99.1511%" y="287.50"></text></g><g><title>all (182,547,638 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(238,205,33)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="735.50"></text></g><g><title>chlang (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(231,56,7)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="719.50">chlang</text></g><g><title>_start (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(244,186,29)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="703.50">_start</text></g><g><title>__libc_start_main_impl (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(234,111,31)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="687.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(241,149,10)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="671.50">__libc_start_call_main</text></g><g><title>main (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(249,206,44)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="655.50">main</text></g><g><title>std::rt::lang_start_internal (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(251,153,30)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="639.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(239,152,38)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(249,139,47)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(244,64,35)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="591.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(216,46,15)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="575.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(250,74,19)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(249,42,33)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(242,149,17)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="527.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(244,29,21)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="511.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(220,130,37)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="495.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(211,67,2)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="479.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(235,68,52)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="463.50">core::ops::function::FnOnce::call_once</text></g><g><title>chlang::main (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(246,142,3)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="447.50">chlang::main</text></g><g><title>chlang::tree_evaluator::Bot::find_best_move (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(241,25,7)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="431.50">chlang::tree_evaluator::Bot::find_best_move</text></g><g><title>chlang::tree_evaluator::eval (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(242,119,39)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="415.50">chlang::tree_evaluator::eval</text></g><g><title>chlang::tree_evaluator::eval (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(241,98,45)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="399.50">chlang::tree_evaluator::eval</text></g><g><title>chlang::tree_evaluator::eval (182,547,638 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(254,28,30)" fg:x="0" fg:w="182547638"/><text x="0.2500%" y="383.50">chlang::tree_evaluator::eval</text></g><g><title>chlang::board::Board::get_game_state (5,015,045 samples, 2.75%)</title><rect x="97.2527%" y="357" width="2.7473%" height="15" fill="rgb(241,142,54)" fg:x="177532593" fg:w="5015045"/><text x="97.5027%" y="367.50">ch..</text></g><g><title>chlang::board::Board::get_valid_moves (5,015,045 samples, 2.75%)</title><rect x="97.2527%" y="341" width="2.7473%" height="15" fill="rgb(222,85,15)" fg:x="177532593" fg:w="5015045"/><text x="97.5027%" y="351.50">ch..</text></g><g><title>chlang::board::Board::get_pseudo_legal_moves (1,003,009 samples, 0.55%)</title><rect x="99.4505%" y="325" width="0.5495%" height="15" fill="rgb(210,85,47)" fg:x="181544629" fg:w="1003009"/><text x="99.7005%" y="335.50"></text></g></svg></svg>