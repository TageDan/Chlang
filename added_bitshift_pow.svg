<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="934" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="917.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="917.00"> </text><svg id="frames" x="10" width="1180" total_samples="22011032505"><g><title>core::num::&lt;impl u64&gt;::pow (3,009,027 samples, 0.01%)</title><rect x="0.0000%" y="453" width="0.0137%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3009027"/><text x="0.2500%" y="463.50"></text></g><g><title>std::io::stdio::_print (4,012,036 samples, 0.02%)</title><rect x="0.0000%" y="581" width="0.0182%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4012036"/><text x="0.2500%" y="591.50"></text></g><g><title>std::io::stdio::print_to (4,012,036 samples, 0.02%)</title><rect x="0.0000%" y="565" width="0.0182%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4012036"/><text x="0.2500%" y="575.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4,012,036 samples, 0.02%)</title><rect x="0.0000%" y="549" width="0.0182%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="4012036"/><text x="0.2500%" y="559.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4,012,036 samples, 0.02%)</title><rect x="0.0000%" y="533" width="0.0182%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="4012036"/><text x="0.2500%" y="543.50"></text></g><g><title>std::io::Write::write_fmt (4,012,036 samples, 0.02%)</title><rect x="0.0000%" y="517" width="0.0182%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="4012036"/><text x="0.2500%" y="527.50"></text></g><g><title>core::fmt::write (4,012,036 samples, 0.02%)</title><rect x="0.0000%" y="501" width="0.0182%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="4012036"/><text x="0.2500%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (4,012,036 samples, 0.02%)</title><rect x="0.0000%" y="485" width="0.0182%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="4012036"/><text x="0.2500%" y="495.50"></text></g><g><title>&lt;chlang::board::Board as core::fmt::Display&gt;::fmt (4,012,036 samples, 0.02%)</title><rect x="0.0000%" y="469" width="0.0182%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="4012036"/><text x="0.2500%" y="479.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (3,009,027 samples, 0.01%)</title><rect x="0.0273%" y="405" width="0.0137%" height="15" fill="rgb(220,122,19)" fg:x="6018054" fg:w="3009027"/><text x="0.2773%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (3,009,027 samples, 0.01%)</title><rect x="0.0273%" y="389" width="0.0137%" height="15" fill="rgb(250,228,42)" fg:x="6018054" fg:w="3009027"/><text x="0.2773%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6,018,054 samples, 0.03%)</title><rect x="0.0182%" y="533" width="0.0273%" height="15" fill="rgb(240,193,28)" fg:x="4012036" fg:w="6018054"/><text x="0.2682%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6,018,054 samples, 0.03%)</title><rect x="0.0182%" y="517" width="0.0273%" height="15" fill="rgb(216,20,37)" fg:x="4012036" fg:w="6018054"/><text x="0.2682%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6,018,054 samples, 0.03%)</title><rect x="0.0182%" y="501" width="0.0273%" height="15" fill="rgb(206,188,39)" fg:x="4012036" fg:w="6018054"/><text x="0.2682%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (5,015,045 samples, 0.02%)</title><rect x="0.0228%" y="485" width="0.0228%" height="15" fill="rgb(217,207,13)" fg:x="5015045" fg:w="5015045"/><text x="0.2728%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5,015,045 samples, 0.02%)</title><rect x="0.0228%" y="469" width="0.0228%" height="15" fill="rgb(231,73,38)" fg:x="5015045" fg:w="5015045"/><text x="0.2728%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5,015,045 samples, 0.02%)</title><rect x="0.0228%" y="453" width="0.0228%" height="15" fill="rgb(225,20,46)" fg:x="5015045" fg:w="5015045"/><text x="0.2728%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (5,015,045 samples, 0.02%)</title><rect x="0.0228%" y="437" width="0.0228%" height="15" fill="rgb(210,31,41)" fg:x="5015045" fg:w="5015045"/><text x="0.2728%" y="447.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (4,012,036 samples, 0.02%)</title><rect x="0.0273%" y="421" width="0.0182%" height="15" fill="rgb(221,200,47)" fg:x="6018054" fg:w="4012036"/><text x="0.2773%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6,018,054 samples, 0.03%)</title><rect x="0.0684%" y="357" width="0.0273%" height="15" fill="rgb(226,26,5)" fg:x="15045135" fg:w="6018054"/><text x="0.3184%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (6,018,054 samples, 0.03%)</title><rect x="0.0684%" y="341" width="0.0273%" height="15" fill="rgb(249,33,26)" fg:x="15045135" fg:w="6018054"/><text x="0.3184%" y="351.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (6,018,054 samples, 0.03%)</title><rect x="0.0684%" y="325" width="0.0273%" height="15" fill="rgb(235,183,28)" fg:x="15045135" fg:w="6018054"/><text x="0.3184%" y="335.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (3,009,027 samples, 0.01%)</title><rect x="0.0820%" y="309" width="0.0137%" height="15" fill="rgb(221,5,38)" fg:x="18054162" fg:w="3009027"/><text x="0.3320%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (8,024,072 samples, 0.04%)</title><rect x="0.0638%" y="501" width="0.0365%" height="15" fill="rgb(247,18,42)" fg:x="14042126" fg:w="8024072"/><text x="0.3138%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (8,024,072 samples, 0.04%)</title><rect x="0.0638%" y="485" width="0.0365%" height="15" fill="rgb(241,131,45)" fg:x="14042126" fg:w="8024072"/><text x="0.3138%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8,024,072 samples, 0.04%)</title><rect x="0.0638%" y="469" width="0.0365%" height="15" fill="rgb(249,31,29)" fg:x="14042126" fg:w="8024072"/><text x="0.3138%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (8,024,072 samples, 0.04%)</title><rect x="0.0638%" y="453" width="0.0365%" height="15" fill="rgb(225,111,53)" fg:x="14042126" fg:w="8024072"/><text x="0.3138%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (8,024,072 samples, 0.04%)</title><rect x="0.0638%" y="437" width="0.0365%" height="15" fill="rgb(238,160,17)" fg:x="14042126" fg:w="8024072"/><text x="0.3138%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (7,021,063 samples, 0.03%)</title><rect x="0.0684%" y="421" width="0.0319%" height="15" fill="rgb(214,148,48)" fg:x="15045135" fg:w="7021063"/><text x="0.3184%" y="431.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (7,021,063 samples, 0.03%)</title><rect x="0.0684%" y="405" width="0.0319%" height="15" fill="rgb(232,36,49)" fg:x="15045135" fg:w="7021063"/><text x="0.3184%" y="415.50"></text></g><g><title>hashbrown::map::make_hash (7,021,063 samples, 0.03%)</title><rect x="0.0684%" y="389" width="0.0319%" height="15" fill="rgb(209,103,24)" fg:x="15045135" fg:w="7021063"/><text x="0.3184%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7,021,063 samples, 0.03%)</title><rect x="0.0684%" y="373" width="0.0319%" height="15" fill="rgb(229,88,8)" fg:x="15045135" fg:w="7021063"/><text x="0.3184%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (13,039,117 samples, 0.06%)</title><rect x="0.0456%" y="533" width="0.0592%" height="15" fill="rgb(213,181,19)" fg:x="10030090" fg:w="13039117"/><text x="0.2956%" y="543.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (12,036,108 samples, 0.05%)</title><rect x="0.0501%" y="517" width="0.0547%" height="15" fill="rgb(254,191,54)" fg:x="11033099" fg:w="12036108"/><text x="0.3001%" y="527.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (3,009,027 samples, 0.01%)</title><rect x="0.1094%" y="485" width="0.0137%" height="15" fill="rgb(241,83,37)" fg:x="24072216" fg:w="3009027"/><text x="0.3594%" y="495.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (6,018,054 samples, 0.03%)</title><rect x="0.1094%" y="501" width="0.0273%" height="15" fill="rgb(233,36,39)" fg:x="24072216" fg:w="6018054"/><text x="0.3594%" y="511.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (3,009,027 samples, 0.01%)</title><rect x="0.1230%" y="485" width="0.0137%" height="15" fill="rgb(226,3,54)" fg:x="27081243" fg:w="3009027"/><text x="0.3730%" y="495.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (3,009,027 samples, 0.01%)</title><rect x="0.1230%" y="469" width="0.0137%" height="15" fill="rgb(245,192,40)" fg:x="27081243" fg:w="3009027"/><text x="0.3730%" y="479.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort8_stable (3,009,027 samples, 0.01%)</title><rect x="0.1413%" y="469" width="0.0137%" height="15" fill="rgb(238,167,29)" fg:x="31093279" fg:w="3009027"/><text x="0.3913%" y="479.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (4,012,036 samples, 0.02%)</title><rect x="0.1595%" y="469" width="0.0182%" height="15" fill="rgb(232,182,51)" fg:x="35105315" fg:w="4012036"/><text x="0.4095%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (17,051,153 samples, 0.08%)</title><rect x="0.1094%" y="533" width="0.0775%" height="15" fill="rgb(231,60,39)" fg:x="24072216" fg:w="17051153"/><text x="0.3594%" y="543.50"></text></g><g><title>core::slice::sort::unstable::sort (17,051,153 samples, 0.08%)</title><rect x="0.1094%" y="517" width="0.0775%" height="15" fill="rgb(208,69,12)" fg:x="24072216" fg:w="17051153"/><text x="0.3594%" y="527.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (10,030,090 samples, 0.05%)</title><rect x="0.1413%" y="501" width="0.0456%" height="15" fill="rgb(235,93,37)" fg:x="31093279" fg:w="10030090"/><text x="0.3913%" y="511.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (10,030,090 samples, 0.05%)</title><rect x="0.1413%" y="485" width="0.0456%" height="15" fill="rgb(213,116,39)" fg:x="31093279" fg:w="10030090"/><text x="0.3913%" y="495.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (12,036,108 samples, 0.05%)</title><rect x="0.1959%" y="421" width="0.0547%" height="15" fill="rgb(222,207,29)" fg:x="43129387" fg:w="12036108"/><text x="0.4459%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12,036,108 samples, 0.05%)</title><rect x="0.1959%" y="405" width="0.0547%" height="15" fill="rgb(206,96,30)" fg:x="43129387" fg:w="12036108"/><text x="0.4459%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (6,018,054 samples, 0.03%)</title><rect x="0.2597%" y="421" width="0.0273%" height="15" fill="rgb(218,138,4)" fg:x="57171513" fg:w="6018054"/><text x="0.5097%" y="431.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (6,018,054 samples, 0.03%)</title><rect x="0.2597%" y="405" width="0.0273%" height="15" fill="rgb(250,191,14)" fg:x="57171513" fg:w="6018054"/><text x="0.5097%" y="415.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (6,018,054 samples, 0.03%)</title><rect x="0.2597%" y="389" width="0.0273%" height="15" fill="rgb(239,60,40)" fg:x="57171513" fg:w="6018054"/><text x="0.5097%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6,018,054 samples, 0.03%)</title><rect x="0.2597%" y="373" width="0.0273%" height="15" fill="rgb(206,27,48)" fg:x="57171513" fg:w="6018054"/><text x="0.5097%" y="383.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (6,018,054 samples, 0.03%)</title><rect x="0.2597%" y="357" width="0.0273%" height="15" fill="rgb(225,35,8)" fg:x="57171513" fg:w="6018054"/><text x="0.5097%" y="367.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::cmp::PartialEq&gt;::eq (6,018,054 samples, 0.03%)</title><rect x="0.2597%" y="341" width="0.0273%" height="15" fill="rgb(250,213,24)" fg:x="57171513" fg:w="6018054"/><text x="0.5097%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (22,066,198 samples, 0.10%)</title><rect x="0.1914%" y="469" width="0.1003%" height="15" fill="rgb(247,123,22)" fg:x="42126378" fg:w="22066198"/><text x="0.4414%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (22,066,198 samples, 0.10%)</title><rect x="0.1914%" y="453" width="0.1003%" height="15" fill="rgb(231,138,38)" fg:x="42126378" fg:w="22066198"/><text x="0.4414%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (22,066,198 samples, 0.10%)</title><rect x="0.1914%" y="437" width="0.1003%" height="15" fill="rgb(231,145,46)" fg:x="42126378" fg:w="22066198"/><text x="0.4414%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (3,009,027 samples, 0.01%)</title><rect x="0.3099%" y="357" width="0.0137%" height="15" fill="rgb(251,118,11)" fg:x="68204612" fg:w="3009027"/><text x="0.5599%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3,009,027 samples, 0.01%)</title><rect x="0.3099%" y="341" width="0.0137%" height="15" fill="rgb(217,147,25)" fg:x="68204612" fg:w="3009027"/><text x="0.5599%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3,009,027 samples, 0.01%)</title><rect x="0.3099%" y="325" width="0.0137%" height="15" fill="rgb(247,81,37)" fg:x="68204612" fg:w="3009027"/><text x="0.5599%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,009,027 samples, 0.01%)</title><rect x="0.3099%" y="309" width="0.0137%" height="15" fill="rgb(209,12,38)" fg:x="68204612" fg:w="3009027"/><text x="0.5599%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3,009,027 samples, 0.01%)</title><rect x="0.3099%" y="293" width="0.0137%" height="15" fill="rgb(227,1,9)" fg:x="68204612" fg:w="3009027"/><text x="0.5599%" y="303.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (6,018,054 samples, 0.03%)</title><rect x="0.3099%" y="389" width="0.0273%" height="15" fill="rgb(248,47,43)" fg:x="68204612" fg:w="6018054"/><text x="0.5599%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (6,018,054 samples, 0.03%)</title><rect x="0.3099%" y="373" width="0.0273%" height="15" fill="rgb(221,10,30)" fg:x="68204612" fg:w="6018054"/><text x="0.5599%" y="383.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (3,009,027 samples, 0.01%)</title><rect x="0.3235%" y="357" width="0.0137%" height="15" fill="rgb(210,229,1)" fg:x="71213639" fg:w="3009027"/><text x="0.5735%" y="367.50"></text></g><g><title>core::hash::Hasher::write_usize (3,009,027 samples, 0.01%)</title><rect x="0.3235%" y="341" width="0.0137%" height="15" fill="rgb(222,148,37)" fg:x="71213639" fg:w="3009027"/><text x="0.5735%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (3,009,027 samples, 0.01%)</title><rect x="0.3372%" y="373" width="0.0137%" height="15" fill="rgb(234,67,33)" fg:x="74222666" fg:w="3009027"/><text x="0.5872%" y="383.50"></text></g><g><title>core::hash::Hasher::write_isize (3,009,027 samples, 0.01%)</title><rect x="0.3372%" y="357" width="0.0137%" height="15" fill="rgb(247,98,35)" fg:x="74222666" fg:w="3009027"/><text x="0.5872%" y="367.50"></text></g><g><title>core::hash::Hasher::write_usize (3,009,027 samples, 0.01%)</title><rect x="0.3372%" y="341" width="0.0137%" height="15" fill="rgb(247,138,52)" fg:x="74222666" fg:w="3009027"/><text x="0.5872%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3,009,027 samples, 0.01%)</title><rect x="0.3372%" y="325" width="0.0137%" height="15" fill="rgb(213,79,30)" fg:x="74222666" fg:w="3009027"/><text x="0.5872%" y="335.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (4,012,036 samples, 0.02%)</title><rect x="0.3372%" y="389" width="0.0182%" height="15" fill="rgb(246,177,23)" fg:x="74222666" fg:w="4012036"/><text x="0.5872%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (17,051,153 samples, 0.08%)</title><rect x="0.2916%" y="437" width="0.0775%" height="15" fill="rgb(230,62,27)" fg:x="64192576" fg:w="17051153"/><text x="0.5416%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (17,051,153 samples, 0.08%)</title><rect x="0.2916%" y="421" width="0.0775%" height="15" fill="rgb(216,154,8)" fg:x="64192576" fg:w="17051153"/><text x="0.5416%" y="431.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (15,045,135 samples, 0.07%)</title><rect x="0.3008%" y="405" width="0.0684%" height="15" fill="rgb(244,35,45)" fg:x="66198594" fg:w="15045135"/><text x="0.5508%" y="415.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (41,123,369 samples, 0.19%)</title><rect x="0.1914%" y="517" width="0.1868%" height="15" fill="rgb(251,115,12)" fg:x="42126378" fg:w="41123369"/><text x="0.4414%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (41,123,369 samples, 0.19%)</title><rect x="0.1914%" y="501" width="0.1868%" height="15" fill="rgb(240,54,50)" fg:x="42126378" fg:w="41123369"/><text x="0.4414%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (41,123,369 samples, 0.19%)</title><rect x="0.1914%" y="485" width="0.1868%" height="15" fill="rgb(233,84,52)" fg:x="42126378" fg:w="41123369"/><text x="0.4414%" y="495.50"></text></g><g><title>hashbrown::map::make_hash (19,057,171 samples, 0.09%)</title><rect x="0.2916%" y="469" width="0.0866%" height="15" fill="rgb(207,117,47)" fg:x="64192576" fg:w="19057171"/><text x="0.5416%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (19,057,171 samples, 0.09%)</title><rect x="0.2916%" y="453" width="0.0866%" height="15" fill="rgb(249,43,39)" fg:x="64192576" fg:w="19057171"/><text x="0.5416%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4,012,036 samples, 0.02%)</title><rect x="0.3873%" y="309" width="0.0182%" height="15" fill="rgb(209,38,44)" fg:x="85255765" fg:w="4012036"/><text x="0.6373%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (6,018,054 samples, 0.03%)</title><rect x="0.3873%" y="373" width="0.0273%" height="15" fill="rgb(236,212,23)" fg:x="85255765" fg:w="6018054"/><text x="0.6373%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6,018,054 samples, 0.03%)</title><rect x="0.3873%" y="357" width="0.0273%" height="15" fill="rgb(242,79,21)" fg:x="85255765" fg:w="6018054"/><text x="0.6373%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6,018,054 samples, 0.03%)</title><rect x="0.3873%" y="341" width="0.0273%" height="15" fill="rgb(211,96,35)" fg:x="85255765" fg:w="6018054"/><text x="0.6373%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6,018,054 samples, 0.03%)</title><rect x="0.3873%" y="325" width="0.0273%" height="15" fill="rgb(253,215,40)" fg:x="85255765" fg:w="6018054"/><text x="0.6373%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3,009,027 samples, 0.01%)</title><rect x="0.4147%" y="293" width="0.0137%" height="15" fill="rgb(211,81,21)" fg:x="91273819" fg:w="3009027"/><text x="0.6647%" y="303.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (4,012,036 samples, 0.02%)</title><rect x="0.4147%" y="373" width="0.0182%" height="15" fill="rgb(208,190,38)" fg:x="91273819" fg:w="4012036"/><text x="0.6647%" y="383.50"></text></g><g><title>core::hash::Hasher::write_usize (4,012,036 samples, 0.02%)</title><rect x="0.4147%" y="357" width="0.0182%" height="15" fill="rgb(235,213,38)" fg:x="91273819" fg:w="4012036"/><text x="0.6647%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4,012,036 samples, 0.02%)</title><rect x="0.4147%" y="341" width="0.0182%" height="15" fill="rgb(237,122,38)" fg:x="91273819" fg:w="4012036"/><text x="0.6647%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4,012,036 samples, 0.02%)</title><rect x="0.4147%" y="325" width="0.0182%" height="15" fill="rgb(244,218,35)" fg:x="91273819" fg:w="4012036"/><text x="0.6647%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,012,036 samples, 0.02%)</title><rect x="0.4147%" y="309" width="0.0182%" height="15" fill="rgb(240,68,47)" fg:x="91273819" fg:w="4012036"/><text x="0.6647%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (13,039,117 samples, 0.06%)</title><rect x="0.3782%" y="453" width="0.0592%" height="15" fill="rgb(210,16,53)" fg:x="83249747" fg:w="13039117"/><text x="0.6282%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (13,039,117 samples, 0.06%)</title><rect x="0.3782%" y="437" width="0.0592%" height="15" fill="rgb(235,124,12)" fg:x="83249747" fg:w="13039117"/><text x="0.6282%" y="447.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (12,036,108 samples, 0.05%)</title><rect x="0.3828%" y="421" width="0.0547%" height="15" fill="rgb(224,169,11)" fg:x="84252756" fg:w="12036108"/><text x="0.6328%" y="431.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (11,033,099 samples, 0.05%)</title><rect x="0.3873%" y="405" width="0.0501%" height="15" fill="rgb(250,166,2)" fg:x="85255765" fg:w="11033099"/><text x="0.6373%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (11,033,099 samples, 0.05%)</title><rect x="0.3873%" y="389" width="0.0501%" height="15" fill="rgb(242,216,29)" fg:x="85255765" fg:w="11033099"/><text x="0.6373%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3,009,027 samples, 0.01%)</title><rect x="0.4375%" y="405" width="0.0137%" height="15" fill="rgb(230,116,27)" fg:x="96288864" fg:w="3009027"/><text x="0.6875%" y="415.50"></text></g><g><title>hashbrown::map::make_hash (17,051,153 samples, 0.08%)</title><rect x="0.3782%" y="485" width="0.0775%" height="15" fill="rgb(228,99,48)" fg:x="83249747" fg:w="17051153"/><text x="0.6282%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (17,051,153 samples, 0.08%)</title><rect x="0.3782%" y="469" width="0.0775%" height="15" fill="rgb(253,11,6)" fg:x="83249747" fg:w="17051153"/><text x="0.6282%" y="479.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (4,012,036 samples, 0.02%)</title><rect x="0.4375%" y="453" width="0.0182%" height="15" fill="rgb(247,143,39)" fg:x="96288864" fg:w="4012036"/><text x="0.6875%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4,012,036 samples, 0.02%)</title><rect x="0.4375%" y="437" width="0.0182%" height="15" fill="rgb(236,97,10)" fg:x="96288864" fg:w="4012036"/><text x="0.6875%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4,012,036 samples, 0.02%)</title><rect x="0.4375%" y="421" width="0.0182%" height="15" fill="rgb(233,208,19)" fg:x="96288864" fg:w="4012036"/><text x="0.6875%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (4,012,036 samples, 0.02%)</title><rect x="0.4557%" y="485" width="0.0182%" height="15" fill="rgb(216,164,2)" fg:x="100300900" fg:w="4012036"/><text x="0.7057%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (4,012,036 samples, 0.02%)</title><rect x="0.4557%" y="469" width="0.0182%" height="15" fill="rgb(220,129,5)" fg:x="100300900" fg:w="4012036"/><text x="0.7057%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4,012,036 samples, 0.02%)</title><rect x="0.4557%" y="453" width="0.0182%" height="15" fill="rgb(242,17,10)" fg:x="100300900" fg:w="4012036"/><text x="0.7057%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (4,012,036 samples, 0.02%)</title><rect x="0.4557%" y="437" width="0.0182%" height="15" fill="rgb(242,107,0)" fg:x="100300900" fg:w="4012036"/><text x="0.7057%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (4,012,036 samples, 0.02%)</title><rect x="0.4557%" y="421" width="0.0182%" height="15" fill="rgb(251,28,31)" fg:x="100300900" fg:w="4012036"/><text x="0.7057%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (3,009,027 samples, 0.01%)</title><rect x="0.4602%" y="405" width="0.0137%" height="15" fill="rgb(233,223,10)" fg:x="101303909" fg:w="3009027"/><text x="0.7102%" y="415.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (3,009,027 samples, 0.01%)</title><rect x="0.4602%" y="389" width="0.0137%" height="15" fill="rgb(215,21,27)" fg:x="101303909" fg:w="3009027"/><text x="0.7102%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (3,009,027 samples, 0.01%)</title><rect x="0.4602%" y="373" width="0.0137%" height="15" fill="rgb(232,23,21)" fg:x="101303909" fg:w="3009027"/><text x="0.7102%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3,009,027 samples, 0.01%)</title><rect x="0.4602%" y="357" width="0.0137%" height="15" fill="rgb(244,5,23)" fg:x="101303909" fg:w="3009027"/><text x="0.7102%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (22,066,198 samples, 0.10%)</title><rect x="0.3782%" y="517" width="0.1003%" height="15" fill="rgb(226,81,46)" fg:x="83249747" fg:w="22066198"/><text x="0.6282%" y="527.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (22,066,198 samples, 0.10%)</title><rect x="0.3782%" y="501" width="0.1003%" height="15" fill="rgb(247,70,30)" fg:x="83249747" fg:w="22066198"/><text x="0.6282%" y="511.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (29,087,261 samples, 0.13%)</title><rect x="0.4785%" y="517" width="0.1321%" height="15" fill="rgb(212,68,19)" fg:x="105315945" fg:w="29087261"/><text x="0.7285%" y="527.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (29,087,261 samples, 0.13%)</title><rect x="0.4785%" y="501" width="0.1321%" height="15" fill="rgb(240,187,13)" fg:x="105315945" fg:w="29087261"/><text x="0.7285%" y="511.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (29,087,261 samples, 0.13%)</title><rect x="0.4785%" y="485" width="0.1321%" height="15" fill="rgb(223,113,26)" fg:x="105315945" fg:w="29087261"/><text x="0.7285%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (29,087,261 samples, 0.13%)</title><rect x="0.4785%" y="469" width="0.1321%" height="15" fill="rgb(206,192,2)" fg:x="105315945" fg:w="29087261"/><text x="0.7285%" y="479.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (28,084,252 samples, 0.13%)</title><rect x="0.4830%" y="453" width="0.1276%" height="15" fill="rgb(241,108,4)" fg:x="106318954" fg:w="28084252"/><text x="0.7330%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (28,084,252 samples, 0.13%)</title><rect x="0.4830%" y="437" width="0.1276%" height="15" fill="rgb(247,173,49)" fg:x="106318954" fg:w="28084252"/><text x="0.7330%" y="447.50"></text></g><g><title>core::ptr::write (28,084,252 samples, 0.13%)</title><rect x="0.4830%" y="421" width="0.1276%" height="15" fill="rgb(224,114,35)" fg:x="106318954" fg:w="28084252"/><text x="0.7330%" y="431.50"></text></g><g><title>chlang::cmove::Move::to (6,018,054 samples, 0.03%)</title><rect x="0.6152%" y="389" width="0.0273%" height="15" fill="rgb(245,159,27)" fg:x="135406215" fg:w="6018054"/><text x="0.8652%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key::{{closure}} (13,039,117 samples, 0.06%)</title><rect x="0.6152%" y="421" width="0.0592%" height="15" fill="rgb(245,172,44)" fg:x="135406215" fg:w="13039117"/><text x="0.8652%" y="431.50"></text></g><g><title>chlang::tree_evaluator::eval::{{closure}} (13,039,117 samples, 0.06%)</title><rect x="0.6152%" y="405" width="0.0592%" height="15" fill="rgb(236,23,11)" fg:x="135406215" fg:w="13039117"/><text x="0.8652%" y="415.50"></text></g><g><title>chlang::board::Board::piece_type (7,021,063 samples, 0.03%)</title><rect x="0.6425%" y="389" width="0.0319%" height="15" fill="rgb(205,117,38)" fg:x="141424269" fg:w="7021063"/><text x="0.8925%" y="399.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition (16,048,144 samples, 0.07%)</title><rect x="0.6106%" y="469" width="0.0729%" height="15" fill="rgb(237,72,25)" fg:x="134403206" fg:w="16048144"/><text x="0.8606%" y="479.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic (16,048,144 samples, 0.07%)</title><rect x="0.6106%" y="453" width="0.0729%" height="15" fill="rgb(244,70,9)" fg:x="134403206" fg:w="16048144"/><text x="0.8606%" y="463.50"></text></g><g><title>core::slice::sort::unstable::quicksort::partition_lomuto_branchless_cyclic::{{closure}} (16,048,144 samples, 0.07%)</title><rect x="0.6106%" y="437" width="0.0729%" height="15" fill="rgb(217,125,39)" fg:x="134403206" fg:w="16048144"/><text x="0.8606%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort4_stable (4,012,036 samples, 0.02%)</title><rect x="0.6926%" y="437" width="0.0182%" height="15" fill="rgb(235,36,10)" fg:x="152457368" fg:w="4012036"/><text x="0.9426%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key::{{closure}} (4,012,036 samples, 0.02%)</title><rect x="0.6926%" y="421" width="0.0182%" height="15" fill="rgb(251,123,47)" fg:x="152457368" fg:w="4012036"/><text x="0.9426%" y="431.50"></text></g><g><title>chlang::tree_evaluator::Bot::find_best_move::{{closure}} (4,012,036 samples, 0.02%)</title><rect x="0.6926%" y="405" width="0.0182%" height="15" fill="rgb(221,13,13)" fg:x="152457368" fg:w="4012036"/><text x="0.9426%" y="415.50"></text></g><g><title>chlang::board::Board::piece_type (3,009,027 samples, 0.01%)</title><rect x="0.6972%" y="389" width="0.0137%" height="15" fill="rgb(238,131,9)" fg:x="153460377" fg:w="3009027"/><text x="0.9472%" y="399.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (5,015,045 samples, 0.02%)</title><rect x="0.7154%" y="437" width="0.0228%" height="15" fill="rgb(211,50,8)" fg:x="157472413" fg:w="5015045"/><text x="0.9654%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (13,039,117 samples, 0.06%)</title><rect x="0.6835%" y="469" width="0.0592%" height="15" fill="rgb(245,182,24)" fg:x="150451350" fg:w="13039117"/><text x="0.9335%" y="479.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (13,039,117 samples, 0.06%)</title><rect x="0.6835%" y="453" width="0.0592%" height="15" fill="rgb(242,14,37)" fg:x="150451350" fg:w="13039117"/><text x="0.9335%" y="463.50"></text></g><g><title>core::slice::sort::shared::pivot::median3 (3,009,027 samples, 0.01%)</title><rect x="0.7428%" y="453" width="0.0137%" height="15" fill="rgb(246,228,12)" fg:x="163490467" fg:w="3009027"/><text x="0.9928%" y="463.50"></text></g><g><title>core::slice::sort::unstable::quicksort::quicksort (33,099,297 samples, 0.15%)</title><rect x="0.6106%" y="485" width="0.1504%" height="15" fill="rgb(213,55,15)" fg:x="134403206" fg:w="33099297"/><text x="0.8606%" y="495.50"></text></g><g><title>core::slice::sort::shared::pivot::choose_pivot (4,012,036 samples, 0.02%)</title><rect x="0.7428%" y="469" width="0.0182%" height="15" fill="rgb(209,9,3)" fg:x="163490467" fg:w="4012036"/><text x="0.9928%" y="479.50"></text></g><g><title>chlang::cmove::Move::to (4,012,036 samples, 0.02%)</title><rect x="0.7701%" y="389" width="0.0182%" height="15" fill="rgb(230,59,30)" fg:x="169508521" fg:w="4012036"/><text x="1.0201%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key::{{closure}} (5,015,045 samples, 0.02%)</title><rect x="0.7701%" y="421" width="0.0228%" height="15" fill="rgb(209,121,21)" fg:x="169508521" fg:w="5015045"/><text x="1.0201%" y="431.50"></text></g><g><title>chlang::tree_evaluator::Bot::find_best_move::{{closure}} (5,015,045 samples, 0.02%)</title><rect x="0.7701%" y="405" width="0.0228%" height="15" fill="rgb(220,109,13)" fg:x="169508521" fg:w="5015045"/><text x="1.0201%" y="415.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort4_stable (6,018,054 samples, 0.03%)</title><rect x="0.7701%" y="437" width="0.0273%" height="15" fill="rgb(232,18,1)" fg:x="169508521" fg:w="6018054"/><text x="1.0201%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort8_stable (10,030,090 samples, 0.05%)</title><rect x="0.7701%" y="453" width="0.0456%" height="15" fill="rgb(215,41,42)" fg:x="169508521" fg:w="10030090"/><text x="1.0201%" y="463.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (4,012,036 samples, 0.02%)</title><rect x="0.7974%" y="437" width="0.0182%" height="15" fill="rgb(224,123,36)" fg:x="175526575" fg:w="4012036"/><text x="1.0474%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key::{{closure}} (6,018,054 samples, 0.03%)</title><rect x="0.8157%" y="437" width="0.0273%" height="15" fill="rgb(240,125,3)" fg:x="179538611" fg:w="6018054"/><text x="1.0657%" y="447.50"></text></g><g><title>chlang::tree_evaluator::Bot::find_best_move::{{closure}} (6,018,054 samples, 0.03%)</title><rect x="0.8157%" y="421" width="0.0273%" height="15" fill="rgb(205,98,50)" fg:x="179538611" fg:w="6018054"/><text x="1.0657%" y="431.50"></text></g><g><title>chlang::board::Board::piece_type (4,012,036 samples, 0.02%)</title><rect x="0.8248%" y="405" width="0.0182%" height="15" fill="rgb(205,185,37)" fg:x="181544629" fg:w="4012036"/><text x="1.0748%" y="415.50"></text></g><g><title>core::slice::sort::shared::smallsort::insert_tail (8,024,072 samples, 0.04%)</title><rect x="0.8157%" y="453" width="0.0365%" height="15" fill="rgb(238,207,15)" fg:x="179538611" fg:w="8024072"/><text x="1.0657%" y="463.50"></text></g><g><title>core::slice::sort::shared::smallsort::merge_down (3,009,027 samples, 0.01%)</title><rect x="0.8612%" y="437" width="0.0137%" height="15" fill="rgb(213,199,42)" fg:x="189568701" fg:w="3009027"/><text x="1.1112%" y="447.50"></text></g><g><title>core::slice::sort::shared::smallsort::bidirectional_merge (6,018,054 samples, 0.03%)</title><rect x="0.8521%" y="453" width="0.0273%" height="15" fill="rgb(235,201,11)" fg:x="187562683" fg:w="6018054"/><text x="1.1021%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by_key (61,183,549 samples, 0.28%)</title><rect x="0.6106%" y="517" width="0.2780%" height="15" fill="rgb(207,46,11)" fg:x="134403206" fg:w="61183549"/><text x="0.8606%" y="527.50"></text></g><g><title>core::slice::sort::unstable::sort (61,183,549 samples, 0.28%)</title><rect x="0.6106%" y="501" width="0.2780%" height="15" fill="rgb(241,35,35)" fg:x="134403206" fg:w="61183549"/><text x="0.8606%" y="511.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general (26,078,234 samples, 0.12%)</title><rect x="0.7701%" y="485" width="0.1185%" height="15" fill="rgb(243,32,47)" fg:x="169508521" fg:w="26078234"/><text x="1.0201%" y="495.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (26,078,234 samples, 0.12%)</title><rect x="0.7701%" y="469" width="0.1185%" height="15" fill="rgb(247,202,23)" fg:x="169508521" fg:w="26078234"/><text x="1.0201%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::enumerate::Enumerate&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt;&gt; (8,024,072 samples, 0.04%)</title><rect x="0.8886%" y="517" width="0.0365%" height="15" fill="rgb(219,102,11)" fg:x="195586755" fg:w="8024072"/><text x="1.1386%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (8,024,072 samples, 0.04%)</title><rect x="0.8886%" y="501" width="0.0365%" height="15" fill="rgb(243,110,44)" fg:x="195586755" fg:w="8024072"/><text x="1.1386%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,024,072 samples, 0.04%)</title><rect x="0.8886%" y="485" width="0.0365%" height="15" fill="rgb(222,74,54)" fg:x="195586755" fg:w="8024072"/><text x="1.1386%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (8,024,072 samples, 0.04%)</title><rect x="0.8886%" y="469" width="0.0365%" height="15" fill="rgb(216,99,12)" fg:x="195586755" fg:w="8024072"/><text x="1.1386%" y="479.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,024,072 samples, 0.04%)</title><rect x="0.8886%" y="453" width="0.0365%" height="15" fill="rgb(226,22,26)" fg:x="195586755" fg:w="8024072"/><text x="1.1386%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (8,024,072 samples, 0.04%)</title><rect x="0.8886%" y="437" width="0.0365%" height="15" fill="rgb(217,163,10)" fg:x="195586755" fg:w="8024072"/><text x="1.1386%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,024,072 samples, 0.04%)</title><rect x="0.8886%" y="421" width="0.0365%" height="15" fill="rgb(213,25,53)" fg:x="195586755" fg:w="8024072"/><text x="1.1386%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8,024,072 samples, 0.04%)</title><rect x="0.8886%" y="405" width="0.0365%" height="15" fill="rgb(252,105,26)" fg:x="195586755" fg:w="8024072"/><text x="1.1386%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8,024,072 samples, 0.04%)</title><rect x="0.8886%" y="389" width="0.0365%" height="15" fill="rgb(220,39,43)" fg:x="195586755" fg:w="8024072"/><text x="1.1386%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (8,024,072 samples, 0.04%)</title><rect x="0.8886%" y="373" width="0.0365%" height="15" fill="rgb(229,68,48)" fg:x="195586755" fg:w="8024072"/><text x="1.1386%" y="383.50"></text></g><g><title>__GI___libc_free (7,021,063 samples, 0.03%)</title><rect x="0.8931%" y="357" width="0.0319%" height="15" fill="rgb(252,8,32)" fg:x="196589764" fg:w="7021063"/><text x="1.1431%" y="367.50"></text></g><g><title>_int_free (7,021,063 samples, 0.03%)</title><rect x="0.8931%" y="341" width="0.0319%" height="15" fill="rgb(223,20,43)" fg:x="196589764" fg:w="7021063"/><text x="1.1431%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (76,228,684 samples, 0.35%)</title><rect x="0.9296%" y="405" width="0.3463%" height="15" fill="rgb(229,81,49)" fg:x="204613836" fg:w="76228684"/><text x="1.1796%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (76,228,684 samples, 0.35%)</title><rect x="0.9296%" y="389" width="0.3463%" height="15" fill="rgb(236,28,36)" fg:x="204613836" fg:w="76228684"/><text x="1.1796%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (34,102,306 samples, 0.15%)</title><rect x="1.2850%" y="405" width="0.1549%" height="15" fill="rgb(249,185,26)" fg:x="282848538" fg:w="34102306"/><text x="1.5350%" y="415.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (34,102,306 samples, 0.15%)</title><rect x="1.2850%" y="389" width="0.1549%" height="15" fill="rgb(249,174,33)" fg:x="282848538" fg:w="34102306"/><text x="1.5350%" y="399.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (34,102,306 samples, 0.15%)</title><rect x="1.2850%" y="373" width="0.1549%" height="15" fill="rgb(233,201,37)" fg:x="282848538" fg:w="34102306"/><text x="1.5350%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (34,102,306 samples, 0.15%)</title><rect x="1.2850%" y="357" width="0.1549%" height="15" fill="rgb(221,78,26)" fg:x="282848538" fg:w="34102306"/><text x="1.5350%" y="367.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (34,102,306 samples, 0.15%)</title><rect x="1.2850%" y="341" width="0.1549%" height="15" fill="rgb(250,127,30)" fg:x="282848538" fg:w="34102306"/><text x="1.5350%" y="351.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::cmp::PartialEq&gt;::eq (34,102,306 samples, 0.15%)</title><rect x="1.2850%" y="325" width="0.1549%" height="15" fill="rgb(230,49,44)" fg:x="282848538" fg:w="34102306"/><text x="1.5350%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (115,346,035 samples, 0.52%)</title><rect x="0.9250%" y="453" width="0.5240%" height="15" fill="rgb(229,67,23)" fg:x="203610827" fg:w="115346035"/><text x="1.1750%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (115,346,035 samples, 0.52%)</title><rect x="0.9250%" y="437" width="0.5240%" height="15" fill="rgb(249,83,47)" fg:x="203610827" fg:w="115346035"/><text x="1.1750%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (115,346,035 samples, 0.52%)</title><rect x="0.9250%" y="421" width="0.5240%" height="15" fill="rgb(215,43,3)" fg:x="203610827" fg:w="115346035"/><text x="1.1750%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3,009,027 samples, 0.01%)</title><rect x="1.4673%" y="293" width="0.0137%" height="15" fill="rgb(238,154,13)" fg:x="322968898" fg:w="3009027"/><text x="1.7173%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8,024,072 samples, 0.04%)</title><rect x="1.4673%" y="341" width="0.0365%" height="15" fill="rgb(219,56,2)" fg:x="322968898" fg:w="8024072"/><text x="1.7173%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8,024,072 samples, 0.04%)</title><rect x="1.4673%" y="325" width="0.0365%" height="15" fill="rgb(233,0,4)" fg:x="322968898" fg:w="8024072"/><text x="1.7173%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8,024,072 samples, 0.04%)</title><rect x="1.4673%" y="309" width="0.0365%" height="15" fill="rgb(235,30,7)" fg:x="322968898" fg:w="8024072"/><text x="1.7173%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (11,033,099 samples, 0.05%)</title><rect x="1.4582%" y="373" width="0.0501%" height="15" fill="rgb(250,79,13)" fg:x="320962880" fg:w="11033099"/><text x="1.7082%" y="383.50"></text></g><g><title>core::hash::Hasher::write_u64 (11,033,099 samples, 0.05%)</title><rect x="1.4582%" y="357" width="0.0501%" height="15" fill="rgb(211,146,34)" fg:x="320962880" fg:w="11033099"/><text x="1.7082%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5,015,045 samples, 0.02%)</title><rect x="1.5083%" y="261" width="0.0228%" height="15" fill="rgb(228,22,38)" fg:x="331995979" fg:w="5015045"/><text x="1.7583%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9,027,081 samples, 0.04%)</title><rect x="1.5083%" y="277" width="0.0410%" height="15" fill="rgb(235,168,5)" fg:x="331995979" fg:w="9027081"/><text x="1.7583%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4,012,036 samples, 0.02%)</title><rect x="1.5311%" y="261" width="0.0182%" height="15" fill="rgb(221,155,16)" fg:x="337011024" fg:w="4012036"/><text x="1.7811%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (13,039,117 samples, 0.06%)</title><rect x="1.5083%" y="341" width="0.0592%" height="15" fill="rgb(215,215,53)" fg:x="331995979" fg:w="13039117"/><text x="1.7583%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (13,039,117 samples, 0.06%)</title><rect x="1.5083%" y="325" width="0.0592%" height="15" fill="rgb(223,4,10)" fg:x="331995979" fg:w="13039117"/><text x="1.7583%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (13,039,117 samples, 0.06%)</title><rect x="1.5083%" y="309" width="0.0592%" height="15" fill="rgb(234,103,6)" fg:x="331995979" fg:w="13039117"/><text x="1.7583%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13,039,117 samples, 0.06%)</title><rect x="1.5083%" y="293" width="0.0592%" height="15" fill="rgb(227,97,0)" fg:x="331995979" fg:w="13039117"/><text x="1.7583%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8,024,072 samples, 0.04%)</title><rect x="1.5676%" y="309" width="0.0365%" height="15" fill="rgb(234,150,53)" fg:x="345035096" fg:w="8024072"/><text x="1.8176%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8,024,072 samples, 0.04%)</title><rect x="1.5676%" y="293" width="0.0365%" height="15" fill="rgb(228,201,54)" fg:x="345035096" fg:w="8024072"/><text x="1.8176%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8,024,072 samples, 0.04%)</title><rect x="1.5676%" y="277" width="0.0365%" height="15" fill="rgb(222,22,37)" fg:x="345035096" fg:w="8024072"/><text x="1.8176%" y="287.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (15,045,135 samples, 0.07%)</title><rect x="1.5676%" y="341" width="0.0684%" height="15" fill="rgb(237,53,32)" fg:x="345035096" fg:w="15045135"/><text x="1.8176%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (15,045,135 samples, 0.07%)</title><rect x="1.5676%" y="325" width="0.0684%" height="15" fill="rgb(233,25,53)" fg:x="345035096" fg:w="15045135"/><text x="1.8176%" y="335.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (33,099,297 samples, 0.15%)</title><rect x="1.5083%" y="373" width="0.1504%" height="15" fill="rgb(210,40,34)" fg:x="331995979" fg:w="33099297"/><text x="1.7583%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (33,099,297 samples, 0.15%)</title><rect x="1.5083%" y="357" width="0.1504%" height="15" fill="rgb(241,220,44)" fg:x="331995979" fg:w="33099297"/><text x="1.7583%" y="367.50"></text></g><g><title>core::hash::Hash::hash_slice (5,015,045 samples, 0.02%)</title><rect x="1.6359%" y="341" width="0.0228%" height="15" fill="rgb(235,28,35)" fg:x="360080231" fg:w="5015045"/><text x="1.8859%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for bool&gt;::hash (5,015,045 samples, 0.02%)</title><rect x="1.6359%" y="325" width="0.0228%" height="15" fill="rgb(210,56,17)" fg:x="360080231" fg:w="5015045"/><text x="1.8859%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u8 (5,015,045 samples, 0.02%)</title><rect x="1.6359%" y="309" width="0.0228%" height="15" fill="rgb(224,130,29)" fg:x="360080231" fg:w="5015045"/><text x="1.8859%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="1.6359%" y="293" width="0.0228%" height="15" fill="rgb(235,212,8)" fg:x="360080231" fg:w="5015045"/><text x="1.8859%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="1.6359%" y="277" width="0.0228%" height="15" fill="rgb(223,33,50)" fg:x="360080231" fg:w="5015045"/><text x="1.8859%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="1.6359%" y="261" width="0.0228%" height="15" fill="rgb(219,149,13)" fg:x="360080231" fg:w="5015045"/><text x="1.8859%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="1.6587%" y="293" width="0.0228%" height="15" fill="rgb(250,156,29)" fg:x="365095276" fg:w="5015045"/><text x="1.9087%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="1.6587%" y="277" width="0.0228%" height="15" fill="rgb(216,193,19)" fg:x="365095276" fg:w="5015045"/><text x="1.9087%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5,015,045 samples, 0.02%)</title><rect x="1.6587%" y="261" width="0.0228%" height="15" fill="rgb(216,135,14)" fg:x="365095276" fg:w="5015045"/><text x="1.9087%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (6,018,054 samples, 0.03%)</title><rect x="1.6587%" y="357" width="0.0273%" height="15" fill="rgb(241,47,5)" fg:x="365095276" fg:w="6018054"/><text x="1.9087%" y="367.50"></text></g><g><title>core::hash::Hasher::write_isize (6,018,054 samples, 0.03%)</title><rect x="1.6587%" y="341" width="0.0273%" height="15" fill="rgb(233,42,35)" fg:x="365095276" fg:w="6018054"/><text x="1.9087%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (6,018,054 samples, 0.03%)</title><rect x="1.6587%" y="325" width="0.0273%" height="15" fill="rgb(231,13,6)" fg:x="365095276" fg:w="6018054"/><text x="1.9087%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6,018,054 samples, 0.03%)</title><rect x="1.6587%" y="309" width="0.0273%" height="15" fill="rgb(207,181,40)" fg:x="365095276" fg:w="6018054"/><text x="1.9087%" y="319.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (8,024,072 samples, 0.04%)</title><rect x="1.6587%" y="373" width="0.0365%" height="15" fill="rgb(254,173,49)" fg:x="365095276" fg:w="8024072"/><text x="1.9087%" y="383.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (55,165,495 samples, 0.25%)</title><rect x="1.4582%" y="389" width="0.2506%" height="15" fill="rgb(221,1,38)" fg:x="320962880" fg:w="55165495"/><text x="1.7082%" y="399.50"></text></g><g><title>&lt;chlang::board::Player as core::hash::Hash&gt;::hash (3,009,027 samples, 0.01%)</title><rect x="1.6951%" y="373" width="0.0137%" height="15" fill="rgb(206,124,46)" fg:x="373119348" fg:w="3009027"/><text x="1.9451%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (3,009,027 samples, 0.01%)</title><rect x="1.6951%" y="357" width="0.0137%" height="15" fill="rgb(249,21,11)" fg:x="373119348" fg:w="3009027"/><text x="1.9451%" y="367.50"></text></g><g><title>core::hash::Hasher::write_isize (3,009,027 samples, 0.01%)</title><rect x="1.6951%" y="341" width="0.0137%" height="15" fill="rgb(222,201,40)" fg:x="373119348" fg:w="3009027"/><text x="1.9451%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (3,009,027 samples, 0.01%)</title><rect x="1.6951%" y="325" width="0.0137%" height="15" fill="rgb(235,61,29)" fg:x="373119348" fg:w="3009027"/><text x="1.9451%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3,009,027 samples, 0.01%)</title><rect x="1.6951%" y="309" width="0.0137%" height="15" fill="rgb(219,207,3)" fg:x="373119348" fg:w="3009027"/><text x="1.9451%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3,009,027 samples, 0.01%)</title><rect x="1.6951%" y="293" width="0.0137%" height="15" fill="rgb(222,56,46)" fg:x="373119348" fg:w="3009027"/><text x="1.9451%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,009,027 samples, 0.01%)</title><rect x="1.6951%" y="277" width="0.0137%" height="15" fill="rgb(239,76,54)" fg:x="373119348" fg:w="3009027"/><text x="1.9451%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (58,174,522 samples, 0.26%)</title><rect x="1.4491%" y="421" width="0.2643%" height="15" fill="rgb(231,124,27)" fg:x="318956862" fg:w="58174522"/><text x="1.6991%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (58,174,522 samples, 0.26%)</title><rect x="1.4491%" y="405" width="0.2643%" height="15" fill="rgb(249,195,6)" fg:x="318956862" fg:w="58174522"/><text x="1.6991%" y="415.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3,009,027 samples, 0.01%)</title><rect x="1.7134%" y="405" width="0.0137%" height="15" fill="rgb(237,174,47)" fg:x="377131384" fg:w="3009027"/><text x="1.9634%" y="415.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3,009,027 samples, 0.01%)</title><rect x="1.7134%" y="389" width="0.0137%" height="15" fill="rgb(206,201,31)" fg:x="377131384" fg:w="3009027"/><text x="1.9634%" y="399.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (3,009,027 samples, 0.01%)</title><rect x="1.7134%" y="373" width="0.0137%" height="15" fill="rgb(231,57,52)" fg:x="377131384" fg:w="3009027"/><text x="1.9634%" y="383.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (4,012,036 samples, 0.02%)</title><rect x="1.7134%" y="421" width="0.0182%" height="15" fill="rgb(248,177,22)" fg:x="377131384" fg:w="4012036"/><text x="1.9634%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3,009,027 samples, 0.01%)</title><rect x="1.7316%" y="373" width="0.0137%" height="15" fill="rgb(215,211,37)" fg:x="381143420" fg:w="3009027"/><text x="1.9816%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (70,210,630 samples, 0.32%)</title><rect x="1.4491%" y="437" width="0.3190%" height="15" fill="rgb(241,128,51)" fg:x="318956862" fg:w="70210630"/><text x="1.6991%" y="447.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (8,024,072 samples, 0.04%)</title><rect x="1.7316%" y="421" width="0.0365%" height="15" fill="rgb(227,165,31)" fg:x="381143420" fg:w="8024072"/><text x="1.9816%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8,024,072 samples, 0.04%)</title><rect x="1.7316%" y="405" width="0.0365%" height="15" fill="rgb(228,167,24)" fg:x="381143420" fg:w="8024072"/><text x="1.9816%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8,024,072 samples, 0.04%)</title><rect x="1.7316%" y="389" width="0.0365%" height="15" fill="rgb(228,143,12)" fg:x="381143420" fg:w="8024072"/><text x="1.9816%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (186,559,674 samples, 0.85%)</title><rect x="0.9250%" y="501" width="0.8476%" height="15" fill="rgb(249,149,8)" fg:x="203610827" fg:w="186559674"/><text x="1.1750%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (186,559,674 samples, 0.85%)</title><rect x="0.9250%" y="485" width="0.8476%" height="15" fill="rgb(243,35,44)" fg:x="203610827" fg:w="186559674"/><text x="1.1750%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (186,559,674 samples, 0.85%)</title><rect x="0.9250%" y="469" width="0.8476%" height="15" fill="rgb(246,89,9)" fg:x="203610827" fg:w="186559674"/><text x="1.1750%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (71,213,639 samples, 0.32%)</title><rect x="1.4491%" y="453" width="0.3235%" height="15" fill="rgb(233,213,13)" fg:x="318956862" fg:w="71213639"/><text x="1.6991%" y="463.50"></text></g><g><title>std::collections::hash::map::map_entry (5,015,045 samples, 0.02%)</title><rect x="1.7726%" y="485" width="0.0228%" height="15" fill="rgb(233,141,41)" fg:x="390170501" fg:w="5015045"/><text x="2.0226%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4,012,036 samples, 0.02%)</title><rect x="1.7954%" y="469" width="0.0182%" height="15" fill="rgb(239,167,4)" fg:x="395185546" fg:w="4012036"/><text x="2.0454%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4,012,036 samples, 0.02%)</title><rect x="1.7954%" y="453" width="0.0182%" height="15" fill="rgb(209,217,16)" fg:x="395185546" fg:w="4012036"/><text x="2.0454%" y="463.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3,009,027 samples, 0.01%)</title><rect x="1.8136%" y="373" width="0.0137%" height="15" fill="rgb(219,88,35)" fg:x="399197582" fg:w="3009027"/><text x="2.0636%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3,009,027 samples, 0.01%)</title><rect x="1.8136%" y="357" width="0.0137%" height="15" fill="rgb(220,193,23)" fg:x="399197582" fg:w="3009027"/><text x="2.0636%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,009,027 samples, 0.01%)</title><rect x="1.8136%" y="341" width="0.0137%" height="15" fill="rgb(230,90,52)" fg:x="399197582" fg:w="3009027"/><text x="2.0636%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (4,012,036 samples, 0.02%)</title><rect x="1.8136%" y="405" width="0.0182%" height="15" fill="rgb(252,106,19)" fg:x="399197582" fg:w="4012036"/><text x="2.0636%" y="415.50"></text></g><g><title>core::hash::Hasher::write_u8 (4,012,036 samples, 0.02%)</title><rect x="1.8136%" y="389" width="0.0182%" height="15" fill="rgb(206,74,20)" fg:x="399197582" fg:w="4012036"/><text x="2.0636%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4,012,036 samples, 0.02%)</title><rect x="1.8319%" y="309" width="0.0182%" height="15" fill="rgb(230,138,44)" fg:x="403209618" fg:w="4012036"/><text x="2.0819%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (5,015,045 samples, 0.02%)</title><rect x="1.8319%" y="389" width="0.0228%" height="15" fill="rgb(235,182,43)" fg:x="403209618" fg:w="5015045"/><text x="2.0819%" y="399.50"></text></g><g><title>core::hash::Hasher::write_u64 (5,015,045 samples, 0.02%)</title><rect x="1.8319%" y="373" width="0.0228%" height="15" fill="rgb(242,16,51)" fg:x="403209618" fg:w="5015045"/><text x="2.0819%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="1.8319%" y="357" width="0.0228%" height="15" fill="rgb(248,9,4)" fg:x="403209618" fg:w="5015045"/><text x="2.0819%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="1.8319%" y="341" width="0.0228%" height="15" fill="rgb(210,31,22)" fg:x="403209618" fg:w="5015045"/><text x="2.0819%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="1.8319%" y="325" width="0.0228%" height="15" fill="rgb(239,54,39)" fg:x="403209618" fg:w="5015045"/><text x="2.0819%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,009,027 samples, 0.01%)</title><rect x="1.8546%" y="277" width="0.0137%" height="15" fill="rgb(230,99,41)" fg:x="408224663" fg:w="3009027"/><text x="2.1046%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5,015,045 samples, 0.02%)</title><rect x="1.8546%" y="293" width="0.0228%" height="15" fill="rgb(253,106,12)" fg:x="408224663" fg:w="5015045"/><text x="2.1046%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (8,024,072 samples, 0.04%)</title><rect x="1.8546%" y="357" width="0.0365%" height="15" fill="rgb(213,46,41)" fg:x="408224663" fg:w="8024072"/><text x="2.1046%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8,024,072 samples, 0.04%)</title><rect x="1.8546%" y="341" width="0.0365%" height="15" fill="rgb(215,133,35)" fg:x="408224663" fg:w="8024072"/><text x="2.1046%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8,024,072 samples, 0.04%)</title><rect x="1.8546%" y="325" width="0.0365%" height="15" fill="rgb(213,28,5)" fg:x="408224663" fg:w="8024072"/><text x="2.1046%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8,024,072 samples, 0.04%)</title><rect x="1.8546%" y="309" width="0.0365%" height="15" fill="rgb(215,77,49)" fg:x="408224663" fg:w="8024072"/><text x="2.1046%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4,012,036 samples, 0.02%)</title><rect x="1.8911%" y="325" width="0.0182%" height="15" fill="rgb(248,100,22)" fg:x="416248735" fg:w="4012036"/><text x="2.1411%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4,012,036 samples, 0.02%)</title><rect x="1.8911%" y="309" width="0.0182%" height="15" fill="rgb(208,67,9)" fg:x="416248735" fg:w="4012036"/><text x="2.1411%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,012,036 samples, 0.02%)</title><rect x="1.8911%" y="293" width="0.0182%" height="15" fill="rgb(219,133,21)" fg:x="416248735" fg:w="4012036"/><text x="2.1411%" y="303.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (6,018,054 samples, 0.03%)</title><rect x="1.8911%" y="357" width="0.0273%" height="15" fill="rgb(246,46,29)" fg:x="416248735" fg:w="6018054"/><text x="2.1411%" y="367.50"></text></g><g><title>core::hash::Hasher::write_usize (6,018,054 samples, 0.03%)</title><rect x="1.8911%" y="341" width="0.0273%" height="15" fill="rgb(246,185,52)" fg:x="416248735" fg:w="6018054"/><text x="2.1411%" y="351.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (16,048,144 samples, 0.07%)</title><rect x="1.8546%" y="389" width="0.0729%" height="15" fill="rgb(252,136,11)" fg:x="408224663" fg:w="16048144"/><text x="2.1046%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (16,048,144 samples, 0.07%)</title><rect x="1.8546%" y="373" width="0.0729%" height="15" fill="rgb(219,138,53)" fg:x="408224663" fg:w="16048144"/><text x="2.1046%" y="383.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (5,015,045 samples, 0.02%)</title><rect x="1.9275%" y="389" width="0.0228%" height="15" fill="rgb(211,51,23)" fg:x="424272807" fg:w="5015045"/><text x="2.1775%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (5,015,045 samples, 0.02%)</title><rect x="1.9275%" y="373" width="0.0228%" height="15" fill="rgb(247,221,28)" fg:x="424272807" fg:w="5015045"/><text x="2.1775%" y="383.50"></text></g><g><title>core::hash::Hasher::write_isize (5,015,045 samples, 0.02%)</title><rect x="1.9275%" y="357" width="0.0228%" height="15" fill="rgb(251,222,45)" fg:x="424272807" fg:w="5015045"/><text x="2.1775%" y="367.50"></text></g><g><title>core::hash::Hasher::write_usize (5,015,045 samples, 0.02%)</title><rect x="1.9275%" y="341" width="0.0228%" height="15" fill="rgb(217,162,53)" fg:x="424272807" fg:w="5015045"/><text x="2.1775%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="1.9275%" y="325" width="0.0228%" height="15" fill="rgb(229,93,14)" fg:x="424272807" fg:w="5015045"/><text x="2.1775%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="1.9275%" y="309" width="0.0228%" height="15" fill="rgb(209,67,49)" fg:x="424272807" fg:w="5015045"/><text x="2.1775%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="1.9275%" y="293" width="0.0228%" height="15" fill="rgb(213,87,29)" fg:x="424272807" fg:w="5015045"/><text x="2.1775%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (33,099,297 samples, 0.15%)</title><rect x="1.8136%" y="437" width="0.1504%" height="15" fill="rgb(205,151,52)" fg:x="399197582" fg:w="33099297"/><text x="2.0636%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (33,099,297 samples, 0.15%)</title><rect x="1.8136%" y="421" width="0.1504%" height="15" fill="rgb(253,215,39)" fg:x="399197582" fg:w="33099297"/><text x="2.0636%" y="431.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (29,087,261 samples, 0.13%)</title><rect x="1.8319%" y="405" width="0.1321%" height="15" fill="rgb(221,220,41)" fg:x="403209618" fg:w="29087261"/><text x="2.0819%" y="415.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (4,012,036 samples, 0.02%)</title><rect x="1.9640%" y="437" width="0.0182%" height="15" fill="rgb(218,133,21)" fg:x="432296879" fg:w="4012036"/><text x="2.2140%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4,012,036 samples, 0.02%)</title><rect x="1.9822%" y="389" width="0.0182%" height="15" fill="rgb(221,193,43)" fg:x="436308915" fg:w="4012036"/><text x="2.2322%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (44,132,396 samples, 0.20%)</title><rect x="1.8136%" y="469" width="0.2005%" height="15" fill="rgb(240,128,52)" fg:x="399197582" fg:w="44132396"/><text x="2.0636%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (44,132,396 samples, 0.20%)</title><rect x="1.8136%" y="453" width="0.2005%" height="15" fill="rgb(253,114,12)" fg:x="399197582" fg:w="44132396"/><text x="2.0636%" y="463.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7,021,063 samples, 0.03%)</title><rect x="1.9822%" y="437" width="0.0319%" height="15" fill="rgb(215,223,47)" fg:x="436308915" fg:w="7021063"/><text x="2.2322%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7,021,063 samples, 0.03%)</title><rect x="1.9822%" y="421" width="0.0319%" height="15" fill="rgb(248,225,23)" fg:x="436308915" fg:w="7021063"/><text x="2.2322%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7,021,063 samples, 0.03%)</title><rect x="1.9822%" y="405" width="0.0319%" height="15" fill="rgb(250,108,0)" fg:x="436308915" fg:w="7021063"/><text x="2.2322%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (4,012,036 samples, 0.02%)</title><rect x="2.0187%" y="341" width="0.0182%" height="15" fill="rgb(228,208,7)" fg:x="444332987" fg:w="4012036"/><text x="2.2687%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4,012,036 samples, 0.02%)</title><rect x="2.0187%" y="325" width="0.0182%" height="15" fill="rgb(244,45,10)" fg:x="444332987" fg:w="4012036"/><text x="2.2687%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (6,018,054 samples, 0.03%)</title><rect x="2.0141%" y="389" width="0.0273%" height="15" fill="rgb(207,125,25)" fg:x="443329978" fg:w="6018054"/><text x="2.2641%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (6,018,054 samples, 0.03%)</title><rect x="2.0141%" y="373" width="0.0273%" height="15" fill="rgb(210,195,18)" fg:x="443329978" fg:w="6018054"/><text x="2.2641%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (5,015,045 samples, 0.02%)</title><rect x="2.0187%" y="357" width="0.0228%" height="15" fill="rgb(249,80,12)" fg:x="444332987" fg:w="5015045"/><text x="2.2687%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6,018,054 samples, 0.03%)</title><rect x="2.0551%" y="245" width="0.0273%" height="15" fill="rgb(221,65,9)" fg:x="452357059" fg:w="6018054"/><text x="2.3051%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6,018,054 samples, 0.03%)</title><rect x="2.0551%" y="229" width="0.0273%" height="15" fill="rgb(235,49,36)" fg:x="452357059" fg:w="6018054"/><text x="2.3051%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6,018,054 samples, 0.03%)</title><rect x="2.0551%" y="213" width="0.0273%" height="15" fill="rgb(225,32,20)" fg:x="452357059" fg:w="6018054"/><text x="2.3051%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (9,027,081 samples, 0.04%)</title><rect x="2.0506%" y="277" width="0.0410%" height="15" fill="rgb(215,141,46)" fg:x="451354050" fg:w="9027081"/><text x="2.3006%" y="287.50"></text></g><g><title>core::hash::Hasher::write_u64 (9,027,081 samples, 0.04%)</title><rect x="2.0506%" y="261" width="0.0410%" height="15" fill="rgb(250,160,47)" fg:x="451354050" fg:w="9027081"/><text x="2.3006%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (12,036,108 samples, 0.05%)</title><rect x="2.0916%" y="181" width="0.0547%" height="15" fill="rgb(216,222,40)" fg:x="460381131" fg:w="12036108"/><text x="2.3416%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,009,027 samples, 0.01%)</title><rect x="2.1463%" y="165" width="0.0137%" height="15" fill="rgb(234,217,39)" fg:x="472417239" fg:w="3009027"/><text x="2.3963%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6,018,054 samples, 0.03%)</title><rect x="2.1599%" y="165" width="0.0273%" height="15" fill="rgb(207,178,40)" fg:x="475426266" fg:w="6018054"/><text x="2.4099%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (10,030,090 samples, 0.05%)</title><rect x="2.1463%" y="181" width="0.0456%" height="15" fill="rgb(221,136,13)" fg:x="472417239" fg:w="10030090"/><text x="2.3963%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (24,072,216 samples, 0.11%)</title><rect x="2.0916%" y="245" width="0.1094%" height="15" fill="rgb(249,199,10)" fg:x="460381131" fg:w="24072216"/><text x="2.3416%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (24,072,216 samples, 0.11%)</title><rect x="2.0916%" y="229" width="0.1094%" height="15" fill="rgb(249,222,13)" fg:x="460381131" fg:w="24072216"/><text x="2.3416%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (24,072,216 samples, 0.11%)</title><rect x="2.0916%" y="213" width="0.1094%" height="15" fill="rgb(244,185,38)" fg:x="460381131" fg:w="24072216"/><text x="2.3416%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (24,072,216 samples, 0.11%)</title><rect x="2.0916%" y="197" width="0.1094%" height="15" fill="rgb(236,202,9)" fg:x="460381131" fg:w="24072216"/><text x="2.3416%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6,018,054 samples, 0.03%)</title><rect x="2.2101%" y="213" width="0.0273%" height="15" fill="rgb(250,229,37)" fg:x="486459365" fg:w="6018054"/><text x="2.4601%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6,018,054 samples, 0.03%)</title><rect x="2.2101%" y="197" width="0.0273%" height="15" fill="rgb(206,174,23)" fg:x="486459365" fg:w="6018054"/><text x="2.4601%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6,018,054 samples, 0.03%)</title><rect x="2.2101%" y="181" width="0.0273%" height="15" fill="rgb(211,33,43)" fg:x="486459365" fg:w="6018054"/><text x="2.4601%" y="191.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (13,039,117 samples, 0.06%)</title><rect x="2.2010%" y="245" width="0.0592%" height="15" fill="rgb(245,58,50)" fg:x="484453347" fg:w="13039117"/><text x="2.4510%" y="255.50"></text></g><g><title>core::hash::Hasher::write_usize (13,039,117 samples, 0.06%)</title><rect x="2.2010%" y="229" width="0.0592%" height="15" fill="rgb(244,68,36)" fg:x="484453347" fg:w="13039117"/><text x="2.4510%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for bool&gt;::hash (4,012,036 samples, 0.02%)</title><rect x="2.2602%" y="229" width="0.0182%" height="15" fill="rgb(232,229,15)" fg:x="497492464" fg:w="4012036"/><text x="2.5102%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u8 (4,012,036 samples, 0.02%)</title><rect x="2.2602%" y="213" width="0.0182%" height="15" fill="rgb(254,30,23)" fg:x="497492464" fg:w="4012036"/><text x="2.5102%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4,012,036 samples, 0.02%)</title><rect x="2.2602%" y="197" width="0.0182%" height="15" fill="rgb(235,160,14)" fg:x="497492464" fg:w="4012036"/><text x="2.5102%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4,012,036 samples, 0.02%)</title><rect x="2.2602%" y="181" width="0.0182%" height="15" fill="rgb(212,155,44)" fg:x="497492464" fg:w="4012036"/><text x="2.5102%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,012,036 samples, 0.02%)</title><rect x="2.2602%" y="165" width="0.0182%" height="15" fill="rgb(226,2,50)" fg:x="497492464" fg:w="4012036"/><text x="2.5102%" y="175.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (42,126,378 samples, 0.19%)</title><rect x="2.0916%" y="277" width="0.1914%" height="15" fill="rgb(234,177,6)" fg:x="460381131" fg:w="42126378"/><text x="2.3416%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (42,126,378 samples, 0.19%)</title><rect x="2.0916%" y="261" width="0.1914%" height="15" fill="rgb(217,24,9)" fg:x="460381131" fg:w="42126378"/><text x="2.3416%" y="271.50"></text></g><g><title>core::hash::Hash::hash_slice (5,015,045 samples, 0.02%)</title><rect x="2.2602%" y="245" width="0.0228%" height="15" fill="rgb(220,13,46)" fg:x="497492464" fg:w="5015045"/><text x="2.5102%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (4,012,036 samples, 0.02%)</title><rect x="2.2830%" y="261" width="0.0182%" height="15" fill="rgb(239,221,27)" fg:x="502507509" fg:w="4012036"/><text x="2.5330%" y="271.50"></text></g><g><title>core::hash::Hasher::write_isize (4,012,036 samples, 0.02%)</title><rect x="2.2830%" y="245" width="0.0182%" height="15" fill="rgb(222,198,25)" fg:x="502507509" fg:w="4012036"/><text x="2.5330%" y="255.50"></text></g><g><title>core::hash::Hasher::write_usize (4,012,036 samples, 0.02%)</title><rect x="2.2830%" y="229" width="0.0182%" height="15" fill="rgb(211,99,13)" fg:x="502507509" fg:w="4012036"/><text x="2.5330%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4,012,036 samples, 0.02%)</title><rect x="2.2830%" y="213" width="0.0182%" height="15" fill="rgb(232,111,31)" fg:x="502507509" fg:w="4012036"/><text x="2.5330%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4,012,036 samples, 0.02%)</title><rect x="2.2830%" y="197" width="0.0182%" height="15" fill="rgb(245,82,37)" fg:x="502507509" fg:w="4012036"/><text x="2.5330%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,012,036 samples, 0.02%)</title><rect x="2.2830%" y="181" width="0.0182%" height="15" fill="rgb(227,149,46)" fg:x="502507509" fg:w="4012036"/><text x="2.5330%" y="191.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (6,018,054 samples, 0.03%)</title><rect x="2.2830%" y="277" width="0.0273%" height="15" fill="rgb(218,36,50)" fg:x="502507509" fg:w="6018054"/><text x="2.5330%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (61,183,549 samples, 0.28%)</title><rect x="2.0415%" y="325" width="0.2780%" height="15" fill="rgb(226,80,48)" fg:x="449348032" fg:w="61183549"/><text x="2.2915%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (61,183,549 samples, 0.28%)</title><rect x="2.0415%" y="309" width="0.2780%" height="15" fill="rgb(238,224,15)" fg:x="449348032" fg:w="61183549"/><text x="2.2915%" y="319.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (59,177,531 samples, 0.27%)</title><rect x="2.0506%" y="293" width="0.2689%" height="15" fill="rgb(241,136,10)" fg:x="451354050" fg:w="59177531"/><text x="2.3006%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (68,204,612 samples, 0.31%)</title><rect x="2.0415%" y="389" width="0.3099%" height="15" fill="rgb(208,32,45)" fg:x="449348032" fg:w="68204612"/><text x="2.2915%" y="399.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (68,204,612 samples, 0.31%)</title><rect x="2.0415%" y="373" width="0.3099%" height="15" fill="rgb(207,135,9)" fg:x="449348032" fg:w="68204612"/><text x="2.2915%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (68,204,612 samples, 0.31%)</title><rect x="2.0415%" y="357" width="0.3099%" height="15" fill="rgb(206,86,44)" fg:x="449348032" fg:w="68204612"/><text x="2.2915%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (68,204,612 samples, 0.31%)</title><rect x="2.0415%" y="341" width="0.3099%" height="15" fill="rgb(245,177,15)" fg:x="449348032" fg:w="68204612"/><text x="2.2915%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7,021,063 samples, 0.03%)</title><rect x="2.3194%" y="325" width="0.0319%" height="15" fill="rgb(206,64,50)" fg:x="510531581" fg:w="7021063"/><text x="2.5694%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7,021,063 samples, 0.03%)</title><rect x="2.3194%" y="309" width="0.0319%" height="15" fill="rgb(234,36,40)" fg:x="510531581" fg:w="7021063"/><text x="2.5694%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7,021,063 samples, 0.03%)</title><rect x="2.3194%" y="293" width="0.0319%" height="15" fill="rgb(213,64,8)" fg:x="510531581" fg:w="7021063"/><text x="2.5694%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (77,231,693 samples, 0.35%)</title><rect x="2.0141%" y="469" width="0.3509%" height="15" fill="rgb(210,75,36)" fg:x="443329978" fg:w="77231693"/><text x="2.2641%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (77,231,693 samples, 0.35%)</title><rect x="2.0141%" y="453" width="0.3509%" height="15" fill="rgb(229,88,21)" fg:x="443329978" fg:w="77231693"/><text x="2.2641%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (77,231,693 samples, 0.35%)</title><rect x="2.0141%" y="437" width="0.3509%" height="15" fill="rgb(252,204,47)" fg:x="443329978" fg:w="77231693"/><text x="2.2641%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (77,231,693 samples, 0.35%)</title><rect x="2.0141%" y="421" width="0.3509%" height="15" fill="rgb(208,77,27)" fg:x="443329978" fg:w="77231693"/><text x="2.2641%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (77,231,693 samples, 0.35%)</title><rect x="2.0141%" y="405" width="0.3509%" height="15" fill="rgb(221,76,26)" fg:x="443329978" fg:w="77231693"/><text x="2.2641%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,009,027 samples, 0.01%)</title><rect x="2.3513%" y="389" width="0.0137%" height="15" fill="rgb(225,139,18)" fg:x="517552644" fg:w="3009027"/><text x="2.6013%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (135,406,215 samples, 0.62%)</title><rect x="1.7726%" y="501" width="0.6152%" height="15" fill="rgb(230,137,11)" fg:x="390170501" fg:w="135406215"/><text x="2.0226%" y="511.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (130,391,170 samples, 0.59%)</title><rect x="1.7954%" y="485" width="0.5924%" height="15" fill="rgb(212,28,1)" fg:x="395185546" fg:w="130391170"/><text x="2.0454%" y="495.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (58,174,522 samples, 0.26%)</title><rect x="2.3878%" y="501" width="0.2643%" height="15" fill="rgb(248,164,17)" fg:x="525576716" fg:w="58174522"/><text x="2.6378%" y="511.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (58,174,522 samples, 0.26%)</title><rect x="2.3878%" y="485" width="0.2643%" height="15" fill="rgb(222,171,42)" fg:x="525576716" fg:w="58174522"/><text x="2.6378%" y="495.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (58,174,522 samples, 0.26%)</title><rect x="2.3878%" y="469" width="0.2643%" height="15" fill="rgb(243,84,45)" fg:x="525576716" fg:w="58174522"/><text x="2.6378%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (58,174,522 samples, 0.26%)</title><rect x="2.3878%" y="453" width="0.2643%" height="15" fill="rgb(252,49,23)" fg:x="525576716" fg:w="58174522"/><text x="2.6378%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (57,171,513 samples, 0.26%)</title><rect x="2.3923%" y="437" width="0.2597%" height="15" fill="rgb(215,19,7)" fg:x="526579725" fg:w="57171513"/><text x="2.6423%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (57,171,513 samples, 0.26%)</title><rect x="2.3923%" y="421" width="0.2597%" height="15" fill="rgb(238,81,41)" fg:x="526579725" fg:w="57171513"/><text x="2.6423%" y="431.50"></text></g><g><title>core::ptr::write (57,171,513 samples, 0.26%)</title><rect x="2.3923%" y="405" width="0.2597%" height="15" fill="rgb(210,199,37)" fg:x="526579725" fg:w="57171513"/><text x="2.6423%" y="415.50"></text></g><g><title>chlang::board::Board::key (3,009,027 samples, 0.01%)</title><rect x="2.6521%" y="501" width="0.0137%" height="15" fill="rgb(244,192,49)" fg:x="583751238" fg:w="3009027"/><text x="2.9021%" y="511.50"></text></g><g><title>unlink_chunk (5,015,045 samples, 0.02%)</title><rect x="2.6703%" y="357" width="0.0228%" height="15" fill="rgb(226,211,11)" fg:x="587763274" fg:w="5015045"/><text x="2.9203%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (21,063,189 samples, 0.10%)</title><rect x="2.6658%" y="485" width="0.0957%" height="15" fill="rgb(236,162,54)" fg:x="586760265" fg:w="21063189"/><text x="2.9158%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (21,063,189 samples, 0.10%)</title><rect x="2.6658%" y="469" width="0.0957%" height="15" fill="rgb(220,229,9)" fg:x="586760265" fg:w="21063189"/><text x="2.9158%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21,063,189 samples, 0.10%)</title><rect x="2.6658%" y="453" width="0.0957%" height="15" fill="rgb(250,87,22)" fg:x="586760265" fg:w="21063189"/><text x="2.9158%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (21,063,189 samples, 0.10%)</title><rect x="2.6658%" y="437" width="0.0957%" height="15" fill="rgb(239,43,17)" fg:x="586760265" fg:w="21063189"/><text x="2.9158%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21,063,189 samples, 0.10%)</title><rect x="2.6658%" y="421" width="0.0957%" height="15" fill="rgb(231,177,25)" fg:x="586760265" fg:w="21063189"/><text x="2.9158%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (21,063,189 samples, 0.10%)</title><rect x="2.6658%" y="405" width="0.0957%" height="15" fill="rgb(219,179,1)" fg:x="586760265" fg:w="21063189"/><text x="2.9158%" y="415.50"></text></g><g><title>__GI___libc_free (20,060,180 samples, 0.09%)</title><rect x="2.6703%" y="389" width="0.0911%" height="15" fill="rgb(238,219,53)" fg:x="587763274" fg:w="20060180"/><text x="2.9203%" y="399.50"></text></g><g><title>_int_free (20,060,180 samples, 0.09%)</title><rect x="2.6703%" y="373" width="0.0911%" height="15" fill="rgb(232,167,36)" fg:x="587763274" fg:w="20060180"/><text x="2.9203%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new (3,009,027 samples, 0.01%)</title><rect x="2.7614%" y="469" width="0.0137%" height="15" fill="rgb(244,19,51)" fg:x="607823454" fg:w="3009027"/><text x="3.0114%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (3,009,027 samples, 0.01%)</title><rect x="2.7614%" y="453" width="0.0137%" height="15" fill="rgb(224,6,22)" fg:x="607823454" fg:w="3009027"/><text x="3.0114%" y="463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_hasher (3,009,027 samples, 0.01%)</title><rect x="2.7614%" y="437" width="0.0137%" height="15" fill="rgb(224,145,5)" fg:x="607823454" fg:w="3009027"/><text x="3.0114%" y="447.50"></text></g><g><title>std::collections::hash::map::map_entry (18,054,162 samples, 0.08%)</title><rect x="2.7751%" y="453" width="0.0820%" height="15" fill="rgb(234,130,49)" fg:x="610832481" fg:w="18054162"/><text x="3.0251%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (39,117,351 samples, 0.18%)</title><rect x="2.8571%" y="405" width="0.1777%" height="15" fill="rgb(254,6,2)" fg:x="628886643" fg:w="39117351"/><text x="3.1071%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (39,117,351 samples, 0.18%)</title><rect x="2.8571%" y="389" width="0.1777%" height="15" fill="rgb(208,96,46)" fg:x="628886643" fg:w="39117351"/><text x="3.1071%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (39,117,351 samples, 0.18%)</title><rect x="2.8571%" y="373" width="0.1777%" height="15" fill="rgb(239,3,39)" fg:x="628886643" fg:w="39117351"/><text x="3.1071%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4,012,036 samples, 0.02%)</title><rect x="3.0349%" y="405" width="0.0182%" height="15" fill="rgb(233,210,1)" fg:x="668003994" fg:w="4012036"/><text x="3.2849%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4,012,036 samples, 0.02%)</title><rect x="3.0349%" y="389" width="0.0182%" height="15" fill="rgb(244,137,37)" fg:x="668003994" fg:w="4012036"/><text x="3.2849%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5,015,045 samples, 0.02%)</title><rect x="3.0531%" y="405" width="0.0228%" height="15" fill="rgb(240,136,2)" fg:x="672016030" fg:w="5015045"/><text x="3.3031%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5,015,045 samples, 0.02%)</title><rect x="3.0531%" y="389" width="0.0228%" height="15" fill="rgb(239,18,37)" fg:x="672016030" fg:w="5015045"/><text x="3.3031%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,015,045 samples, 0.02%)</title><rect x="3.0531%" y="373" width="0.0228%" height="15" fill="rgb(218,185,22)" fg:x="672016030" fg:w="5015045"/><text x="3.3031%" y="383.50"></text></g><g><title>hashbrown::raw::h2 (6,018,054 samples, 0.03%)</title><rect x="3.0759%" y="405" width="0.0273%" height="15" fill="rgb(225,218,4)" fg:x="677031075" fg:w="6018054"/><text x="3.3259%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (120,361,080 samples, 0.55%)</title><rect x="3.1032%" y="405" width="0.5468%" height="15" fill="rgb(230,182,32)" fg:x="683049129" fg:w="120361080"/><text x="3.3532%" y="415.50"></text></g><g><title>__memcmp_avx2_movbe (13,039,117 samples, 0.06%)</title><rect x="3.6500%" y="309" width="0.0592%" height="15" fill="rgb(242,56,43)" fg:x="803410209" fg:w="13039117"/><text x="3.9000%" y="319.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (14,042,126 samples, 0.06%)</title><rect x="3.6500%" y="341" width="0.0638%" height="15" fill="rgb(233,99,24)" fg:x="803410209" fg:w="14042126"/><text x="3.9000%" y="351.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (14,042,126 samples, 0.06%)</title><rect x="3.6500%" y="325" width="0.0638%" height="15" fill="rgb(234,209,42)" fg:x="803410209" fg:w="14042126"/><text x="3.9000%" y="335.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (16,048,144 samples, 0.07%)</title><rect x="3.6500%" y="389" width="0.0729%" height="15" fill="rgb(227,7,12)" fg:x="803410209" fg:w="16048144"/><text x="3.9000%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (16,048,144 samples, 0.07%)</title><rect x="3.6500%" y="373" width="0.0729%" height="15" fill="rgb(245,203,43)" fg:x="803410209" fg:w="16048144"/><text x="3.9000%" y="383.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::cmp::PartialEq&gt;::eq (16,048,144 samples, 0.07%)</title><rect x="3.6500%" y="357" width="0.0729%" height="15" fill="rgb(238,205,33)" fg:x="803410209" fg:w="16048144"/><text x="3.9000%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (21,063,189 samples, 0.10%)</title><rect x="3.6500%" y="405" width="0.0957%" height="15" fill="rgb(231,56,7)" fg:x="803410209" fg:w="21063189"/><text x="3.9000%" y="415.50"></text></g><g><title>core::intrinsics::likely (53,159,477 samples, 0.24%)</title><rect x="3.7503%" y="405" width="0.2415%" height="15" fill="rgb(244,186,29)" fg:x="825476407" fg:w="53159477"/><text x="4.0003%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (9,027,081 samples, 0.04%)</title><rect x="3.9918%" y="373" width="0.0410%" height="15" fill="rgb(234,111,31)" fg:x="878635884" fg:w="9027081"/><text x="4.2418%" y="383.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (9,027,081 samples, 0.04%)</title><rect x="3.9918%" y="357" width="0.0410%" height="15" fill="rgb(241,149,10)" fg:x="878635884" fg:w="9027081"/><text x="4.2418%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (23,069,207 samples, 0.10%)</title><rect x="3.9918%" y="405" width="0.1048%" height="15" fill="rgb(249,206,44)" fg:x="878635884" fg:w="23069207"/><text x="4.2418%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (23,069,207 samples, 0.10%)</title><rect x="3.9918%" y="389" width="0.1048%" height="15" fill="rgb(251,153,30)" fg:x="878635884" fg:w="23069207"/><text x="4.2418%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (276,830,484 samples, 1.26%)</title><rect x="2.8571%" y="437" width="1.2577%" height="15" fill="rgb(239,152,38)" fg:x="628886643" fg:w="276830484"/><text x="3.1071%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (276,830,484 samples, 1.26%)</title><rect x="2.8571%" y="421" width="1.2577%" height="15" fill="rgb(249,139,47)" fg:x="628886643" fg:w="276830484"/><text x="3.1071%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_ne_bytes (11,033,099 samples, 0.05%)</title><rect x="4.1148%" y="325" width="0.0501%" height="15" fill="rgb(244,64,35)" fg:x="905717127" fg:w="11033099"/><text x="4.3648%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6,018,054 samples, 0.03%)</title><rect x="4.1650%" y="277" width="0.0273%" height="15" fill="rgb(216,46,15)" fg:x="916750226" fg:w="6018054"/><text x="4.4150%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (20,060,180 samples, 0.09%)</title><rect x="4.1923%" y="277" width="0.0911%" height="15" fill="rgb(250,74,19)" fg:x="922768280" fg:w="20060180"/><text x="4.4423%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (14,042,126 samples, 0.06%)</title><rect x="4.2834%" y="261" width="0.0638%" height="15" fill="rgb(249,42,33)" fg:x="942828460" fg:w="14042126"/><text x="4.5334%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (43,129,387 samples, 0.20%)</title><rect x="4.3472%" y="261" width="0.1959%" height="15" fill="rgb(242,149,17)" fg:x="956870586" fg:w="43129387"/><text x="4.5972%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (110,330,990 samples, 0.50%)</title><rect x="4.2834%" y="277" width="0.5013%" height="15" fill="rgb(244,29,21)" fg:x="942828460" fg:w="110330990"/><text x="4.5334%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (295,887,655 samples, 1.34%)</title><rect x="4.1650%" y="325" width="1.3443%" height="15" fill="rgb(220,130,37)" fg:x="916750226" fg:w="295887655"/><text x="4.4150%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (295,887,655 samples, 1.34%)</title><rect x="4.1650%" y="309" width="1.3443%" height="15" fill="rgb(211,67,2)" fg:x="916750226" fg:w="295887655"/><text x="4.4150%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (295,887,655 samples, 1.34%)</title><rect x="4.1650%" y="293" width="1.3443%" height="15" fill="rgb(235,68,52)" fg:x="916750226" fg:w="295887655"/><text x="4.4150%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (319,959,871 samples, 1.45%)</title><rect x="4.1148%" y="357" width="1.4536%" height="15" fill="rgb(246,142,3)" fg:x="905717127" fg:w="319959871"/><text x="4.3648%" y="367.50"></text></g><g><title>core::hash::Hasher::write_u64 (319,959,871 samples, 1.45%)</title><rect x="4.1148%" y="341" width="1.4536%" height="15" fill="rgb(241,25,7)" fg:x="905717127" fg:w="319959871"/><text x="4.3648%" y="351.50"></text></g><g><title>core::hash::sip::u8to64_le (17,051,153 samples, 0.08%)</title><rect x="5.5730%" y="261" width="0.0775%" height="15" fill="rgb(242,119,39)" fg:x="1226680007" fg:w="17051153"/><text x="5.8230%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (84,252,756 samples, 0.38%)</title><rect x="5.6505%" y="245" width="0.3828%" height="15" fill="rgb(241,98,45)" fg:x="1243731160" fg:w="84252756"/><text x="5.9005%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (215,646,935 samples, 0.98%)</title><rect x="6.0333%" y="245" width="0.9797%" height="15" fill="rgb(254,28,30)" fg:x="1327983916" fg:w="215646935"/><text x="6.2833%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (391,173,510 samples, 1.78%)</title><rect x="5.6505%" y="261" width="1.7772%" height="15" fill="rgb(241,142,54)" fg:x="1243731160" fg:w="391173510"/><text x="5.9005%" y="271.50">&lt;..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (512,537,599 samples, 2.33%)</title><rect x="5.5685%" y="309" width="2.3285%" height="15" fill="rgb(222,85,15)" fg:x="1225676998" fg:w="512537599"/><text x="5.8185%" y="319.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (512,537,599 samples, 2.33%)</title><rect x="5.5685%" y="293" width="2.3285%" height="15" fill="rgb(210,85,47)" fg:x="1225676998" fg:w="512537599"/><text x="5.8185%" y="303.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (512,537,599 samples, 2.33%)</title><rect x="5.5685%" y="277" width="2.3285%" height="15" fill="rgb(224,206,25)" fg:x="1225676998" fg:w="512537599"/><text x="5.8185%" y="287.50">&lt;..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (518,555,653 samples, 2.36%)</title><rect x="5.5685%" y="325" width="2.3559%" height="15" fill="rgb(243,201,19)" fg:x="1225676998" fg:w="518555653"/><text x="5.8185%" y="335.50">c..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (8,024,072 samples, 0.04%)</title><rect x="7.9244%" y="293" width="0.0365%" height="15" fill="rgb(236,59,4)" fg:x="1744232651" fg:w="8024072"/><text x="8.1744%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6,018,054 samples, 0.03%)</title><rect x="7.9699%" y="229" width="0.0273%" height="15" fill="rgb(254,179,45)" fg:x="1754262741" fg:w="6018054"/><text x="8.2199%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (68,204,612 samples, 0.31%)</title><rect x="7.9699%" y="245" width="0.3099%" height="15" fill="rgb(226,14,10)" fg:x="1754262741" fg:w="68204612"/><text x="8.2199%" y="255.50"></text></g><g><title>core::cmp::min (4,012,036 samples, 0.02%)</title><rect x="8.2798%" y="245" width="0.0182%" height="15" fill="rgb(244,27,41)" fg:x="1822467353" fg:w="4012036"/><text x="8.5298%" y="255.50"></text></g><g><title>core::cmp::Ord::min (4,012,036 samples, 0.02%)</title><rect x="8.2798%" y="229" width="0.0182%" height="15" fill="rgb(235,35,32)" fg:x="1822467353" fg:w="4012036"/><text x="8.5298%" y="239.50"></text></g><g><title>core::cmp::min_by (4,012,036 samples, 0.02%)</title><rect x="8.2798%" y="213" width="0.0182%" height="15" fill="rgb(218,68,31)" fg:x="1822467353" fg:w="4012036"/><text x="8.5298%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (25,075,225 samples, 0.11%)</title><rect x="8.2980%" y="229" width="0.1139%" height="15" fill="rgb(207,120,37)" fg:x="1826479389" fg:w="25075225"/><text x="8.5480%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (51,153,459 samples, 0.23%)</title><rect x="8.4119%" y="229" width="0.2324%" height="15" fill="rgb(227,98,0)" fg:x="1851554614" fg:w="51153459"/><text x="8.6619%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (119,358,071 samples, 0.54%)</title><rect x="8.2980%" y="245" width="0.5423%" height="15" fill="rgb(207,7,3)" fg:x="1826479389" fg:w="119358071"/><text x="8.5480%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (354,062,177 samples, 1.61%)</title><rect x="7.9608%" y="277" width="1.6086%" height="15" fill="rgb(206,98,19)" fg:x="1752256723" fg:w="354062177"/><text x="8.2108%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (354,062,177 samples, 1.61%)</title><rect x="7.9608%" y="261" width="1.6086%" height="15" fill="rgb(217,5,26)" fg:x="1752256723" fg:w="354062177"/><text x="8.2108%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (355,065,186 samples, 1.61%)</title><rect x="7.9608%" y="293" width="1.6131%" height="15" fill="rgb(235,190,38)" fg:x="1752256723" fg:w="355065186"/><text x="8.2108%" y="303.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (522,567,689 samples, 2.37%)</title><rect x="7.9244%" y="325" width="2.3741%" height="15" fill="rgb(247,86,24)" fg:x="1744232651" fg:w="522567689"/><text x="8.1744%" y="335.50">co..</text></g><g><title>core::hash::Hasher::write_usize (522,567,689 samples, 2.37%)</title><rect x="7.9244%" y="309" width="2.3741%" height="15" fill="rgb(205,101,16)" fg:x="1744232651" fg:w="522567689"/><text x="8.1744%" y="319.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for bool&gt;::hash (49,147,441 samples, 0.22%)</title><rect x="10.2985%" y="309" width="0.2233%" height="15" fill="rgb(246,168,33)" fg:x="2266800340" fg:w="49147441"/><text x="10.5485%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u8 (49,147,441 samples, 0.22%)</title><rect x="10.2985%" y="293" width="0.2233%" height="15" fill="rgb(231,114,1)" fg:x="2266800340" fg:w="49147441"/><text x="10.5485%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (49,147,441 samples, 0.22%)</title><rect x="10.2985%" y="277" width="0.2233%" height="15" fill="rgb(207,184,53)" fg:x="2266800340" fg:w="49147441"/><text x="10.5485%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (49,147,441 samples, 0.22%)</title><rect x="10.2985%" y="261" width="0.2233%" height="15" fill="rgb(224,95,51)" fg:x="2266800340" fg:w="49147441"/><text x="10.5485%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (49,147,441 samples, 0.22%)</title><rect x="10.2985%" y="245" width="0.2233%" height="15" fill="rgb(212,188,45)" fg:x="2266800340" fg:w="49147441"/><text x="10.5485%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,015,045 samples, 0.02%)</title><rect x="10.5218%" y="309" width="0.0228%" height="15" fill="rgb(223,154,38)" fg:x="2315947781" fg:w="5015045"/><text x="10.7718%" y="319.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (1,107,321,936 samples, 5.03%)</title><rect x="5.5685%" y="357" width="5.0308%" height="15" fill="rgb(251,22,52)" fg:x="1225676998" fg:w="1107321936"/><text x="5.8185%" y="367.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1,107,321,936 samples, 5.03%)</title><rect x="5.5685%" y="341" width="5.0308%" height="15" fill="rgb(229,209,22)" fg:x="1225676998" fg:w="1107321936"/><text x="5.8185%" y="351.50">core::..</text></g><g><title>core::hash::Hash::hash_slice (66,198,594 samples, 0.30%)</title><rect x="10.2985%" y="325" width="0.3008%" height="15" fill="rgb(234,138,34)" fg:x="2266800340" fg:w="66198594"/><text x="10.5485%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (6,018,054 samples, 0.03%)</title><rect x="10.5992%" y="293" width="0.0273%" height="15" fill="rgb(212,95,11)" fg:x="2332998934" fg:w="6018054"/><text x="10.8492%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,012,036 samples, 0.02%)</title><rect x="10.6266%" y="229" width="0.0182%" height="15" fill="rgb(240,179,47)" fg:x="2339016988" fg:w="4012036"/><text x="10.8766%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (43,129,387 samples, 0.20%)</title><rect x="10.6266%" y="245" width="0.1959%" height="15" fill="rgb(240,163,11)" fg:x="2339016988" fg:w="43129387"/><text x="10.8766%" y="255.50"></text></g><g><title>core::cmp::min (6,018,054 samples, 0.03%)</title><rect x="10.8225%" y="245" width="0.0273%" height="15" fill="rgb(236,37,12)" fg:x="2382146375" fg:w="6018054"/><text x="11.0725%" y="255.50"></text></g><g><title>core::cmp::Ord::min (6,018,054 samples, 0.03%)</title><rect x="10.8225%" y="229" width="0.0273%" height="15" fill="rgb(232,164,16)" fg:x="2382146375" fg:w="6018054"/><text x="11.0725%" y="239.50"></text></g><g><title>core::cmp::min_by (6,018,054 samples, 0.03%)</title><rect x="10.8225%" y="213" width="0.0273%" height="15" fill="rgb(244,205,15)" fg:x="2382146375" fg:w="6018054"/><text x="11.0725%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (10,030,090 samples, 0.05%)</title><rect x="10.8499%" y="229" width="0.0456%" height="15" fill="rgb(223,117,47)" fg:x="2388164429" fg:w="10030090"/><text x="11.0999%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (19,057,171 samples, 0.09%)</title><rect x="10.8954%" y="229" width="0.0866%" height="15" fill="rgb(244,107,35)" fg:x="2398194519" fg:w="19057171"/><text x="11.1454%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (82,246,738 samples, 0.37%)</title><rect x="10.8499%" y="245" width="0.3737%" height="15" fill="rgb(205,140,8)" fg:x="2388164429" fg:w="82246738"/><text x="11.0999%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (213,640,917 samples, 0.97%)</title><rect x="10.6266%" y="277" width="0.9706%" height="15" fill="rgb(228,84,46)" fg:x="2339016988" fg:w="213640917"/><text x="10.8766%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (213,640,917 samples, 0.97%)</title><rect x="10.6266%" y="261" width="0.9706%" height="15" fill="rgb(254,188,9)" fg:x="2339016988" fg:w="213640917"/><text x="10.8766%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (214,643,926 samples, 0.98%)</title><rect x="10.6266%" y="293" width="0.9752%" height="15" fill="rgb(206,112,54)" fg:x="2339016988" fg:w="214643926"/><text x="10.8766%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (225,677,025 samples, 1.03%)</title><rect x="10.5992%" y="341" width="1.0253%" height="15" fill="rgb(216,84,49)" fg:x="2332998934" fg:w="225677025"/><text x="10.8492%" y="351.50"></text></g><g><title>core::hash::Hasher::write_isize (225,677,025 samples, 1.03%)</title><rect x="10.5992%" y="325" width="1.0253%" height="15" fill="rgb(214,194,35)" fg:x="2332998934" fg:w="225677025"/><text x="10.8492%" y="335.50"></text></g><g><title>core::hash::Hasher::write_usize (225,677,025 samples, 1.03%)</title><rect x="10.5992%" y="309" width="1.0253%" height="15" fill="rgb(249,28,3)" fg:x="2332998934" fg:w="225677025"/><text x="10.8492%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_ne_bytes (7,021,063 samples, 0.03%)</title><rect x="11.6245%" y="277" width="0.0319%" height="15" fill="rgb(222,56,52)" fg:x="2558675959" fg:w="7021063"/><text x="11.8745%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (10,030,090 samples, 0.05%)</title><rect x="11.6564%" y="229" width="0.0456%" height="15" fill="rgb(245,217,50)" fg:x="2565697022" fg:w="10030090"/><text x="11.9064%" y="239.50"></text></g><g><title>core::cmp::min (4,012,036 samples, 0.02%)</title><rect x="11.7020%" y="229" width="0.0182%" height="15" fill="rgb(213,201,24)" fg:x="2575727112" fg:w="4012036"/><text x="11.9520%" y="239.50"></text></g><g><title>core::cmp::Ord::min (4,012,036 samples, 0.02%)</title><rect x="11.7020%" y="213" width="0.0182%" height="15" fill="rgb(248,116,28)" fg:x="2575727112" fg:w="4012036"/><text x="11.9520%" y="223.50"></text></g><g><title>core::cmp::min_by (4,012,036 samples, 0.02%)</title><rect x="11.7020%" y="197" width="0.0182%" height="15" fill="rgb(219,72,43)" fg:x="2575727112" fg:w="4012036"/><text x="11.9520%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,009,027 samples, 0.01%)</title><rect x="11.7293%" y="213" width="0.0137%" height="15" fill="rgb(209,138,14)" fg:x="2581745166" fg:w="3009027"/><text x="11.9793%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (12,036,108 samples, 0.05%)</title><rect x="11.7202%" y="229" width="0.0547%" height="15" fill="rgb(222,18,33)" fg:x="2579739148" fg:w="12036108"/><text x="11.9702%" y="239.50"></text></g><g><title>core::hash::Hasher::write_i64 (47,141,423 samples, 0.21%)</title><rect x="11.6245%" y="309" width="0.2142%" height="15" fill="rgb(213,199,7)" fg:x="2558675959" fg:w="47141423"/><text x="11.8745%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u64 (47,141,423 samples, 0.21%)</title><rect x="11.6245%" y="293" width="0.2142%" height="15" fill="rgb(250,110,10)" fg:x="2558675959" fg:w="47141423"/><text x="11.8745%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (40,120,360 samples, 0.18%)</title><rect x="11.6564%" y="277" width="0.1823%" height="15" fill="rgb(248,123,6)" fg:x="2565697022" fg:w="40120360"/><text x="11.9064%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (40,120,360 samples, 0.18%)</title><rect x="11.6564%" y="261" width="0.1823%" height="15" fill="rgb(206,91,31)" fg:x="2565697022" fg:w="40120360"/><text x="11.9064%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (40,120,360 samples, 0.18%)</title><rect x="11.6564%" y="245" width="0.1823%" height="15" fill="rgb(211,154,13)" fg:x="2565697022" fg:w="40120360"/><text x="11.9064%" y="255.50"></text></g><g><title>&lt;chlang::board::Position as core::hash::Hash&gt;::hash (48,144,432 samples, 0.22%)</title><rect x="11.6245%" y="341" width="0.2187%" height="15" fill="rgb(225,148,7)" fg:x="2558675959" fg:w="48144432"/><text x="11.8745%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (48,144,432 samples, 0.22%)</title><rect x="11.6245%" y="325" width="0.2187%" height="15" fill="rgb(220,160,43)" fg:x="2558675959" fg:w="48144432"/><text x="11.8745%" y="335.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (277,833,493 samples, 1.26%)</title><rect x="10.5992%" y="357" width="1.2622%" height="15" fill="rgb(213,52,39)" fg:x="2332998934" fg:w="277833493"/><text x="10.8492%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (5,015,045 samples, 0.02%)</title><rect x="11.8615%" y="293" width="0.0228%" height="15" fill="rgb(243,137,7)" fg:x="2610832427" fg:w="5015045"/><text x="12.1115%" y="303.50"></text></g><g><title>core::hash::sip::u8to64_le (22,066,198 samples, 0.10%)</title><rect x="11.8843%" y="245" width="0.1003%" height="15" fill="rgb(230,79,13)" fg:x="2615847472" fg:w="22066198"/><text x="12.1343%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (18,054,162 samples, 0.08%)</title><rect x="11.9845%" y="229" width="0.0820%" height="15" fill="rgb(247,105,23)" fg:x="2637913670" fg:w="18054162"/><text x="12.2345%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6,018,054 samples, 0.03%)</title><rect x="12.0665%" y="229" width="0.0273%" height="15" fill="rgb(223,179,41)" fg:x="2655967832" fg:w="6018054"/><text x="12.3165%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (38,114,342 samples, 0.17%)</title><rect x="11.9845%" y="245" width="0.1732%" height="15" fill="rgb(218,9,34)" fg:x="2637913670" fg:w="38114342"/><text x="12.2345%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (94,282,846 samples, 0.43%)</title><rect x="11.8843%" y="277" width="0.4283%" height="15" fill="rgb(222,106,8)" fg:x="2615847472" fg:w="94282846"/><text x="12.1343%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (94,282,846 samples, 0.43%)</title><rect x="11.8843%" y="261" width="0.4283%" height="15" fill="rgb(211,220,0)" fg:x="2615847472" fg:w="94282846"/><text x="12.1343%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (95,285,855 samples, 0.43%)</title><rect x="11.8843%" y="293" width="0.4329%" height="15" fill="rgb(229,52,16)" fg:x="2615847472" fg:w="95285855"/><text x="12.1343%" y="303.50"></text></g><g><title>&lt;chlang::board::Player as core::hash::Hash&gt;::hash (108,324,972 samples, 0.49%)</title><rect x="11.8615%" y="357" width="0.4921%" height="15" fill="rgb(212,155,18)" fg:x="2610832427" fg:w="108324972"/><text x="12.1115%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (108,324,972 samples, 0.49%)</title><rect x="11.8615%" y="341" width="0.4921%" height="15" fill="rgb(242,21,14)" fg:x="2610832427" fg:w="108324972"/><text x="12.1115%" y="351.50"></text></g><g><title>core::hash::Hasher::write_isize (108,324,972 samples, 0.49%)</title><rect x="11.8615%" y="325" width="0.4921%" height="15" fill="rgb(222,19,48)" fg:x="2610832427" fg:w="108324972"/><text x="12.1115%" y="335.50"></text></g><g><title>core::hash::Hasher::write_usize (108,324,972 samples, 0.49%)</title><rect x="11.8615%" y="309" width="0.4921%" height="15" fill="rgb(232,45,27)" fg:x="2610832427" fg:w="108324972"/><text x="12.1115%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,847,542,578 samples, 8.39%)</title><rect x="4.1148%" y="405" width="8.3937%" height="15" fill="rgb(249,103,42)" fg:x="905717127" fg:w="1847542578"/><text x="4.3648%" y="415.50">core::hash::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,847,542,578 samples, 8.39%)</title><rect x="4.1148%" y="389" width="8.3937%" height="15" fill="rgb(246,81,33)" fg:x="905717127" fg:w="1847542578"/><text x="4.3648%" y="399.50">core::hash::..</text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (1,847,542,578 samples, 8.39%)</title><rect x="4.1148%" y="373" width="8.3937%" height="15" fill="rgb(252,33,42)" fg:x="905717127" fg:w="1847542578"/><text x="4.3648%" y="383.50">&lt;chlang::boa..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (18,054,162 samples, 0.08%)</title><rect x="12.5085%" y="389" width="0.0820%" height="15" fill="rgb(209,212,41)" fg:x="2753259705" fg:w="18054162"/><text x="12.7585%" y="399.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (18,054,162 samples, 0.08%)</title><rect x="12.5085%" y="373" width="0.0820%" height="15" fill="rgb(207,154,6)" fg:x="2753259705" fg:w="18054162"/><text x="12.7585%" y="383.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (18,054,162 samples, 0.08%)</title><rect x="12.5085%" y="357" width="0.0820%" height="15" fill="rgb(223,64,47)" fg:x="2753259705" fg:w="18054162"/><text x="12.7585%" y="367.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (24,072,216 samples, 0.11%)</title><rect x="12.5085%" y="405" width="0.1094%" height="15" fill="rgb(211,161,38)" fg:x="2753259705" fg:w="24072216"/><text x="12.7585%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (52,156,468 samples, 0.24%)</title><rect x="12.6179%" y="341" width="0.2370%" height="15" fill="rgb(219,138,40)" fg:x="2777331921" fg:w="52156468"/><text x="12.8679%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (103,309,927 samples, 0.47%)</title><rect x="12.8549%" y="341" width="0.4694%" height="15" fill="rgb(241,228,46)" fg:x="2829488389" fg:w="103309927"/><text x="13.1049%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (185,556,665 samples, 0.84%)</title><rect x="12.6179%" y="357" width="0.8430%" height="15" fill="rgb(223,209,38)" fg:x="2777331921" fg:w="185556665"/><text x="12.8679%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (31,093,279 samples, 0.14%)</title><rect x="13.4609%" y="341" width="0.1413%" height="15" fill="rgb(236,164,45)" fg:x="2962888586" fg:w="31093279"/><text x="13.7109%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (25,075,225 samples, 0.11%)</title><rect x="13.6022%" y="341" width="0.1139%" height="15" fill="rgb(231,15,5)" fg:x="2993981865" fg:w="25075225"/><text x="13.8522%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (64,192,576 samples, 0.29%)</title><rect x="13.4609%" y="357" width="0.2916%" height="15" fill="rgb(252,35,15)" fg:x="2962888586" fg:w="64192576"/><text x="13.7109%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (327,983,943 samples, 1.49%)</title><rect x="12.6179%" y="405" width="1.4901%" height="15" fill="rgb(248,181,18)" fg:x="2777331921" fg:w="327983943"/><text x="12.8679%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (327,983,943 samples, 1.49%)</title><rect x="12.6179%" y="389" width="1.4901%" height="15" fill="rgb(233,39,42)" fg:x="2777331921" fg:w="327983943"/><text x="12.8679%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (327,983,943 samples, 1.49%)</title><rect x="12.6179%" y="373" width="1.4901%" height="15" fill="rgb(238,110,33)" fg:x="2777331921" fg:w="327983943"/><text x="12.8679%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (2,213,640,863 samples, 10.06%)</title><rect x="4.1148%" y="437" width="10.0570%" height="15" fill="rgb(233,195,10)" fg:x="905717127" fg:w="2213640863"/><text x="4.3648%" y="447.50">hashbrown::map:..</text></g><g><title>core::hash::BuildHasher::hash_one (2,213,640,863 samples, 10.06%)</title><rect x="4.1148%" y="421" width="10.0570%" height="15" fill="rgb(254,105,3)" fg:x="905717127" fg:w="2213640863"/><text x="4.3648%" y="431.50">core::hash::Bui..</text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (5,015,045 samples, 0.02%)</title><rect x="14.1718%" y="373" width="0.0228%" height="15" fill="rgb(221,225,9)" fg:x="3119357990" fg:w="5015045"/><text x="14.4218%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (14,042,126 samples, 0.06%)</title><rect x="14.1946%" y="309" width="0.0638%" height="15" fill="rgb(224,227,45)" fg:x="3124373035" fg:w="14042126"/><text x="14.4446%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (14,042,126 samples, 0.06%)</title><rect x="14.1946%" y="293" width="0.0638%" height="15" fill="rgb(229,198,43)" fg:x="3124373035" fg:w="14042126"/><text x="14.4446%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (3,009,027 samples, 0.01%)</title><rect x="14.2584%" y="309" width="0.0137%" height="15" fill="rgb(206,209,35)" fg:x="3138415161" fg:w="3009027"/><text x="14.5084%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (3,009,027 samples, 0.01%)</title><rect x="14.2584%" y="293" width="0.0137%" height="15" fill="rgb(245,195,53)" fg:x="3138415161" fg:w="3009027"/><text x="14.5084%" y="303.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (31,093,279 samples, 0.14%)</title><rect x="14.1946%" y="325" width="0.1413%" height="15" fill="rgb(240,92,26)" fg:x="3124373035" fg:w="31093279"/><text x="14.4446%" y="335.50"></text></g><g><title>__rdl_alloc (3,009,027 samples, 0.01%)</title><rect x="14.3541%" y="245" width="0.0137%" height="15" fill="rgb(207,40,23)" fg:x="3159478350" fg:w="3009027"/><text x="14.6041%" y="255.50"></text></g><g><title>tcache_get (17,051,153 samples, 0.08%)</title><rect x="14.3677%" y="229" width="0.0775%" height="15" fill="rgb(223,111,35)" fg:x="3162487377" fg:w="17051153"/><text x="14.6177%" y="239.50"></text></g><g><title>__GI___libc_malloc (41,123,369 samples, 0.19%)</title><rect x="14.3677%" y="245" width="0.1868%" height="15" fill="rgb(229,147,28)" fg:x="3162487377" fg:w="41123369"/><text x="14.6177%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (48,144,432 samples, 0.22%)</title><rect x="14.3450%" y="293" width="0.2187%" height="15" fill="rgb(211,29,28)" fg:x="3157472332" fg:w="48144432"/><text x="14.5950%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (48,144,432 samples, 0.22%)</title><rect x="14.3450%" y="277" width="0.2187%" height="15" fill="rgb(228,72,33)" fg:x="3157472332" fg:w="48144432"/><text x="14.5950%" y="287.50"></text></g><g><title>alloc::alloc::alloc (48,144,432 samples, 0.22%)</title><rect x="14.3450%" y="261" width="0.2187%" height="15" fill="rgb(205,214,31)" fg:x="3157472332" fg:w="48144432"/><text x="14.5950%" y="271.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (52,156,468 samples, 0.24%)</title><rect x="14.3450%" y="309" width="0.2370%" height="15" fill="rgb(224,111,15)" fg:x="3157472332" fg:w="52156468"/><text x="14.5950%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (3,009,027 samples, 0.01%)</title><rect x="14.5819%" y="293" width="0.0137%" height="15" fill="rgb(253,21,26)" fg:x="3209628800" fg:w="3009027"/><text x="14.8319%" y="303.50"></text></g><g><title>core::intrinsics::unlikely (3,009,027 samples, 0.01%)</title><rect x="14.5819%" y="277" width="0.0137%" height="15" fill="rgb(245,139,43)" fg:x="3209628800" fg:w="3009027"/><text x="14.8319%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (64,192,576 samples, 0.29%)</title><rect x="14.3358%" y="325" width="0.2916%" height="15" fill="rgb(252,170,7)" fg:x="3155466314" fg:w="64192576"/><text x="14.5858%" y="335.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (10,030,090 samples, 0.05%)</title><rect x="14.5819%" y="309" width="0.0456%" height="15" fill="rgb(231,118,14)" fg:x="3209628800" fg:w="10030090"/><text x="14.8319%" y="319.50"></text></g><g><title>__memset_avx2_unaligned (12,036,108 samples, 0.05%)</title><rect x="14.6320%" y="293" width="0.0547%" height="15" fill="rgb(238,83,0)" fg:x="3220661899" fg:w="12036108"/><text x="14.8820%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (110,330,990 samples, 0.50%)</title><rect x="14.1946%" y="357" width="0.5013%" height="15" fill="rgb(221,39,39)" fg:x="3124373035" fg:w="110330990"/><text x="14.4446%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (110,330,990 samples, 0.50%)</title><rect x="14.1946%" y="341" width="0.5013%" height="15" fill="rgb(222,119,46)" fg:x="3124373035" fg:w="110330990"/><text x="14.4446%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (15,045,135 samples, 0.07%)</title><rect x="14.6275%" y="325" width="0.0684%" height="15" fill="rgb(222,165,49)" fg:x="3219658890" fg:w="15045135"/><text x="14.8775%" y="335.50"></text></g><g><title>core::intrinsics::write_bytes (15,045,135 samples, 0.07%)</title><rect x="14.6275%" y="309" width="0.0684%" height="15" fill="rgb(219,113,52)" fg:x="3219658890" fg:w="15045135"/><text x="14.8775%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (40,120,360 samples, 0.18%)</title><rect x="14.6958%" y="341" width="0.1823%" height="15" fill="rgb(214,7,15)" fg:x="3234704025" fg:w="40120360"/><text x="14.9458%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (40,120,360 samples, 0.18%)</title><rect x="14.6958%" y="325" width="0.1823%" height="15" fill="rgb(235,32,4)" fg:x="3234704025" fg:w="40120360"/><text x="14.9458%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (11,033,099 samples, 0.05%)</title><rect x="14.8781%" y="325" width="0.0501%" height="15" fill="rgb(238,90,54)" fg:x="3274824385" fg:w="11033099"/><text x="15.1281%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (11,033,099 samples, 0.05%)</title><rect x="14.8781%" y="309" width="0.0501%" height="15" fill="rgb(213,208,19)" fg:x="3274824385" fg:w="11033099"/><text x="15.1281%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11,033,099 samples, 0.05%)</title><rect x="14.8781%" y="293" width="0.0501%" height="15" fill="rgb(233,156,4)" fg:x="3274824385" fg:w="11033099"/><text x="15.1281%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (14,042,126 samples, 0.06%)</title><rect x="14.9282%" y="309" width="0.0638%" height="15" fill="rgb(207,194,5)" fg:x="3285857484" fg:w="14042126"/><text x="15.1782%" y="319.50"></text></g><g><title>hashbrown::raw::is_full (14,042,126 samples, 0.06%)</title><rect x="14.9282%" y="293" width="0.0638%" height="15" fill="rgb(206,111,30)" fg:x="3285857484" fg:w="14042126"/><text x="15.1782%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (96,288,864 samples, 0.44%)</title><rect x="14.9282%" y="325" width="0.4375%" height="15" fill="rgb(243,70,54)" fg:x="3285857484" fg:w="96288864"/><text x="15.1782%" y="335.50"></text></g><g><title>core::intrinsics::unlikely (82,246,738 samples, 0.37%)</title><rect x="14.9920%" y="309" width="0.3737%" height="15" fill="rgb(242,28,8)" fg:x="3299899610" fg:w="82246738"/><text x="15.2420%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (61,183,549 samples, 0.28%)</title><rect x="15.3657%" y="309" width="0.2780%" height="15" fill="rgb(219,106,18)" fg:x="3382146348" fg:w="61183549"/><text x="15.6157%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (61,183,549 samples, 0.28%)</title><rect x="15.3657%" y="293" width="0.2780%" height="15" fill="rgb(244,222,10)" fg:x="3382146348" fg:w="61183549"/><text x="15.6157%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (75,225,675 samples, 0.34%)</title><rect x="15.6437%" y="309" width="0.3418%" height="15" fill="rgb(236,179,52)" fg:x="3443329897" fg:w="75225675"/><text x="15.8937%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (293,881,637 samples, 1.34%)</title><rect x="14.6958%" y="357" width="1.3352%" height="15" fill="rgb(213,23,39)" fg:x="3234704025" fg:w="293881637"/><text x="14.9458%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (253,761,277 samples, 1.15%)</title><rect x="14.8781%" y="341" width="1.1529%" height="15" fill="rgb(238,48,10)" fg:x="3274824385" fg:w="253761277"/><text x="15.1281%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (146,439,314 samples, 0.67%)</title><rect x="15.3657%" y="325" width="0.6653%" height="15" fill="rgb(251,196,23)" fg:x="3382146348" fg:w="146439314"/><text x="15.6157%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (10,030,090 samples, 0.05%)</title><rect x="15.9854%" y="309" width="0.0456%" height="15" fill="rgb(250,152,24)" fg:x="3518555572" fg:w="10030090"/><text x="16.2354%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (4,012,036 samples, 0.02%)</title><rect x="16.0310%" y="341" width="0.0182%" height="15" fill="rgb(209,150,17)" fg:x="3528585662" fg:w="4012036"/><text x="16.2810%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::full_buckets_indices (6,018,054 samples, 0.03%)</title><rect x="16.0310%" y="357" width="0.0273%" height="15" fill="rgb(234,202,34)" fg:x="3528585662" fg:w="6018054"/><text x="16.2810%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket (8,024,072 samples, 0.04%)</title><rect x="16.0583%" y="341" width="0.0365%" height="15" fill="rgb(253,148,53)" fg:x="3534603716" fg:w="8024072"/><text x="16.3083%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (8,024,072 samples, 0.04%)</title><rect x="16.0583%" y="325" width="0.0365%" height="15" fill="rgb(218,129,16)" fg:x="3534603716" fg:w="8024072"/><text x="16.3083%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (8,024,072 samples, 0.04%)</title><rect x="16.0583%" y="309" width="0.0365%" height="15" fill="rgb(216,85,19)" fg:x="3534603716" fg:w="8024072"/><text x="16.3083%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_ne_bytes (11,033,099 samples, 0.05%)</title><rect x="16.0948%" y="213" width="0.0501%" height="15" fill="rgb(235,228,7)" fg:x="3542627788" fg:w="11033099"/><text x="16.3448%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8,024,072 samples, 0.04%)</title><rect x="16.1449%" y="165" width="0.0365%" height="15" fill="rgb(245,175,0)" fg:x="3553660887" fg:w="8024072"/><text x="16.3949%" y="175.50"></text></g><g><title>core::hash::sip::u8to64_le (33,099,297 samples, 0.15%)</title><rect x="16.1814%" y="165" width="0.1504%" height="15" fill="rgb(208,168,36)" fg:x="3561684959" fg:w="33099297"/><text x="16.4314%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (17,051,153 samples, 0.08%)</title><rect x="16.3317%" y="149" width="0.0775%" height="15" fill="rgb(246,171,24)" fg:x="3594784256" fg:w="17051153"/><text x="16.5817%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (50,150,450 samples, 0.23%)</title><rect x="16.4092%" y="149" width="0.2278%" height="15" fill="rgb(215,142,24)" fg:x="3611835409" fg:w="50150450"/><text x="16.6592%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (144,433,296 samples, 0.66%)</title><rect x="16.3317%" y="165" width="0.6562%" height="15" fill="rgb(250,187,7)" fg:x="3594784256" fg:w="144433296"/><text x="16.5817%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (337,011,024 samples, 1.53%)</title><rect x="16.1449%" y="213" width="1.5311%" height="15" fill="rgb(228,66,33)" fg:x="3553660887" fg:w="337011024"/><text x="16.3949%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (337,011,024 samples, 1.53%)</title><rect x="16.1449%" y="197" width="1.5311%" height="15" fill="rgb(234,215,21)" fg:x="3553660887" fg:w="337011024"/><text x="16.3949%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (337,011,024 samples, 1.53%)</title><rect x="16.1449%" y="181" width="1.5311%" height="15" fill="rgb(222,191,20)" fg:x="3553660887" fg:w="337011024"/><text x="16.3949%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (354,062,177 samples, 1.61%)</title><rect x="16.0948%" y="245" width="1.6086%" height="15" fill="rgb(245,79,54)" fg:x="3542627788" fg:w="354062177"/><text x="16.3448%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u64 (354,062,177 samples, 1.61%)</title><rect x="16.0948%" y="229" width="1.6086%" height="15" fill="rgb(240,10,37)" fg:x="3542627788" fg:w="354062177"/><text x="16.3448%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,015,045 samples, 0.02%)</title><rect x="17.7033%" y="149" width="0.0228%" height="15" fill="rgb(214,192,32)" fg:x="3896689965" fg:w="5015045"/><text x="17.9533%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (15,045,135 samples, 0.07%)</title><rect x="17.7261%" y="149" width="0.0684%" height="15" fill="rgb(209,36,54)" fg:x="3901705010" fg:w="15045135"/><text x="17.9761%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (101,303,909 samples, 0.46%)</title><rect x="17.7945%" y="133" width="0.4602%" height="15" fill="rgb(220,10,11)" fg:x="3916750145" fg:w="101303909"/><text x="18.0445%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (183,550,647 samples, 0.83%)</title><rect x="18.2547%" y="133" width="0.8339%" height="15" fill="rgb(221,106,17)" fg:x="4018054054" fg:w="183550647"/><text x="18.5047%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (390,170,501 samples, 1.77%)</title><rect x="17.7945%" y="149" width="1.7726%" height="15" fill="rgb(251,142,44)" fg:x="3916750145" fg:w="390170501"/><text x="18.0445%" y="159.50">&lt;..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (534,603,797 samples, 2.43%)</title><rect x="17.7033%" y="197" width="2.4288%" height="15" fill="rgb(238,13,15)" fg:x="3896689965" fg:w="534603797"/><text x="17.9533%" y="207.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (534,603,797 samples, 2.43%)</title><rect x="17.7033%" y="181" width="2.4288%" height="15" fill="rgb(208,107,27)" fg:x="3896689965" fg:w="534603797"/><text x="17.9533%" y="191.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (534,603,797 samples, 2.43%)</title><rect x="17.7033%" y="165" width="2.4288%" height="15" fill="rgb(205,136,37)" fg:x="3896689965" fg:w="534603797"/><text x="17.9533%" y="175.50">&lt;c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (539,618,842 samples, 2.45%)</title><rect x="17.7033%" y="213" width="2.4516%" height="15" fill="rgb(250,205,27)" fg:x="3896689965" fg:w="539618842"/><text x="17.9533%" y="223.50">co..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (8,024,072 samples, 0.04%)</title><rect x="20.1549%" y="181" width="0.0365%" height="15" fill="rgb(210,80,43)" fg:x="4436308807" fg:w="8024072"/><text x="20.4049%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12,036,108 samples, 0.05%)</title><rect x="20.1914%" y="133" width="0.0547%" height="15" fill="rgb(247,160,36)" fg:x="4444332879" fg:w="12036108"/><text x="20.4414%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (75,225,675 samples, 0.34%)</title><rect x="20.2461%" y="133" width="0.3418%" height="15" fill="rgb(234,13,49)" fg:x="4456368987" fg:w="75225675"/><text x="20.4961%" y="143.50"></text></g><g><title>core::cmp::min (7,021,063 samples, 0.03%)</title><rect x="20.5878%" y="133" width="0.0319%" height="15" fill="rgb(234,122,0)" fg:x="4531594662" fg:w="7021063"/><text x="20.8378%" y="143.50"></text></g><g><title>core::cmp::Ord::min (7,021,063 samples, 0.03%)</title><rect x="20.5878%" y="117" width="0.0319%" height="15" fill="rgb(207,146,38)" fg:x="4531594662" fg:w="7021063"/><text x="20.8378%" y="127.50"></text></g><g><title>core::cmp::min_by (7,021,063 samples, 0.03%)</title><rect x="20.5878%" y="101" width="0.0319%" height="15" fill="rgb(207,177,25)" fg:x="4531594662" fg:w="7021063"/><text x="20.8378%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (35,105,315 samples, 0.16%)</title><rect x="20.6197%" y="117" width="0.1595%" height="15" fill="rgb(211,178,42)" fg:x="4538615725" fg:w="35105315"/><text x="20.8697%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (60,180,540 samples, 0.27%)</title><rect x="20.7792%" y="117" width="0.2734%" height="15" fill="rgb(230,69,54)" fg:x="4573721040" fg:w="60180540"/><text x="21.0292%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (163,490,467 samples, 0.74%)</title><rect x="20.6197%" y="133" width="0.7428%" height="15" fill="rgb(214,135,41)" fg:x="4538615725" fg:w="163490467"/><text x="20.8697%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (434,302,897 samples, 1.97%)</title><rect x="20.1914%" y="165" width="1.9731%" height="15" fill="rgb(237,67,25)" fg:x="4444332879" fg:w="434302897"/><text x="20.4414%" y="175.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (434,302,897 samples, 1.97%)</title><rect x="20.1914%" y="149" width="1.9731%" height="15" fill="rgb(222,189,50)" fg:x="4444332879" fg:w="434302897"/><text x="20.4414%" y="159.50">&lt;..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (438,314,933 samples, 1.99%)</title><rect x="20.1914%" y="181" width="1.9913%" height="15" fill="rgb(245,148,34)" fg:x="4444332879" fg:w="438314933"/><text x="20.4414%" y="191.50">&lt;..</text></g><g><title>core::hash::Hasher::write_length_prefix (610,832,481 samples, 2.78%)</title><rect x="20.1549%" y="213" width="2.7751%" height="15" fill="rgb(222,29,6)" fg:x="4436308807" fg:w="610832481"/><text x="20.4049%" y="223.50">co..</text></g><g><title>core::hash::Hasher::write_usize (610,832,481 samples, 2.78%)</title><rect x="20.1549%" y="197" width="2.7751%" height="15" fill="rgb(221,189,43)" fg:x="4436308807" fg:w="610832481"/><text x="20.4049%" y="207.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for bool&gt;::hash (66,198,594 samples, 0.30%)</title><rect x="22.9301%" y="197" width="0.3008%" height="15" fill="rgb(207,36,27)" fg:x="5047141288" fg:w="66198594"/><text x="23.1801%" y="207.50"></text></g><g><title>core::hash::Hasher::write_u8 (66,198,594 samples, 0.30%)</title><rect x="22.9301%" y="181" width="0.3008%" height="15" fill="rgb(217,90,24)" fg:x="5047141288" fg:w="66198594"/><text x="23.1801%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (66,198,594 samples, 0.30%)</title><rect x="22.9301%" y="165" width="0.3008%" height="15" fill="rgb(224,66,35)" fg:x="5047141288" fg:w="66198594"/><text x="23.1801%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (66,198,594 samples, 0.30%)</title><rect x="22.9301%" y="149" width="0.3008%" height="15" fill="rgb(221,13,50)" fg:x="5047141288" fg:w="66198594"/><text x="23.1801%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (66,198,594 samples, 0.30%)</title><rect x="22.9301%" y="133" width="0.3008%" height="15" fill="rgb(236,68,49)" fg:x="5047141288" fg:w="66198594"/><text x="23.1801%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,021,063 samples, 0.03%)</title><rect x="23.2308%" y="197" width="0.0319%" height="15" fill="rgb(229,146,28)" fg:x="5113339882" fg:w="7021063"/><text x="23.4808%" y="207.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (1,239,719,124 samples, 5.63%)</title><rect x="17.7033%" y="245" width="5.6323%" height="15" fill="rgb(225,31,38)" fg:x="3896689965" fg:w="1239719124"/><text x="17.9533%" y="255.50">core::a..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1,239,719,124 samples, 5.63%)</title><rect x="17.7033%" y="229" width="5.6323%" height="15" fill="rgb(250,208,3)" fg:x="3896689965" fg:w="1239719124"/><text x="17.9533%" y="239.50">core::h..</text></g><g><title>core::hash::Hash::hash_slice (89,267,801 samples, 0.41%)</title><rect x="22.9301%" y="213" width="0.4056%" height="15" fill="rgb(246,54,23)" fg:x="5047141288" fg:w="89267801"/><text x="23.1801%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (10,030,090 samples, 0.05%)</title><rect x="23.3356%" y="181" width="0.0456%" height="15" fill="rgb(243,76,11)" fg:x="5136409089" fg:w="10030090"/><text x="23.5856%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,009,027 samples, 0.01%)</title><rect x="23.3812%" y="117" width="0.0137%" height="15" fill="rgb(245,21,50)" fg:x="5146439179" fg:w="3009027"/><text x="23.6312%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (60,180,540 samples, 0.27%)</title><rect x="23.3812%" y="133" width="0.2734%" height="15" fill="rgb(228,9,43)" fg:x="5146439179" fg:w="60180540"/><text x="23.6312%" y="143.50"></text></g><g><title>core::cmp::min (8,024,072 samples, 0.04%)</title><rect x="23.6546%" y="133" width="0.0365%" height="15" fill="rgb(208,100,47)" fg:x="5206619719" fg:w="8024072"/><text x="23.9046%" y="143.50"></text></g><g><title>core::cmp::Ord::min (8,024,072 samples, 0.04%)</title><rect x="23.6546%" y="117" width="0.0365%" height="15" fill="rgb(232,26,8)" fg:x="5206619719" fg:w="8024072"/><text x="23.9046%" y="127.50"></text></g><g><title>core::cmp::min_by (8,024,072 samples, 0.04%)</title><rect x="23.6546%" y="101" width="0.0365%" height="15" fill="rgb(216,166,38)" fg:x="5206619719" fg:w="8024072"/><text x="23.9046%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5,015,045 samples, 0.02%)</title><rect x="23.6910%" y="117" width="0.0228%" height="15" fill="rgb(251,202,51)" fg:x="5214643791" fg:w="5015045"/><text x="23.9410%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (18,054,162 samples, 0.08%)</title><rect x="23.7138%" y="117" width="0.0820%" height="15" fill="rgb(254,216,34)" fg:x="5219658836" fg:w="18054162"/><text x="23.9638%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (60,180,540 samples, 0.27%)</title><rect x="23.6910%" y="133" width="0.2734%" height="15" fill="rgb(251,32,27)" fg:x="5214643791" fg:w="60180540"/><text x="23.9410%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (203,610,827 samples, 0.93%)</title><rect x="23.3812%" y="165" width="0.9250%" height="15" fill="rgb(208,127,28)" fg:x="5146439179" fg:w="203610827"/><text x="23.6312%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (203,610,827 samples, 0.93%)</title><rect x="23.3812%" y="149" width="0.9250%" height="15" fill="rgb(224,137,22)" fg:x="5146439179" fg:w="203610827"/><text x="23.6312%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (207,622,863 samples, 0.94%)</title><rect x="23.3812%" y="181" width="0.9433%" height="15" fill="rgb(254,70,32)" fg:x="5146439179" fg:w="207622863"/><text x="23.6312%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (221,664,989 samples, 1.01%)</title><rect x="23.3356%" y="229" width="1.0071%" height="15" fill="rgb(229,75,37)" fg:x="5136409089" fg:w="221664989"/><text x="23.5856%" y="239.50"></text></g><g><title>core::hash::Hasher::write_isize (221,664,989 samples, 1.01%)</title><rect x="23.3356%" y="213" width="1.0071%" height="15" fill="rgb(252,64,23)" fg:x="5136409089" fg:w="221664989"/><text x="23.5856%" y="223.50"></text></g><g><title>core::hash::Hasher::write_usize (221,664,989 samples, 1.01%)</title><rect x="23.3356%" y="197" width="1.0071%" height="15" fill="rgb(232,162,48)" fg:x="5136409089" fg:w="221664989"/><text x="23.5856%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_ne_bytes (18,054,162 samples, 0.08%)</title><rect x="24.3427%" y="165" width="0.0820%" height="15" fill="rgb(246,160,12)" fg:x="5358074078" fg:w="18054162"/><text x="24.5927%" y="175.50"></text></g><g><title>core::hash::sip::u8to64_le (6,018,054 samples, 0.03%)</title><rect x="24.4247%" y="117" width="0.0273%" height="15" fill="rgb(247,166,0)" fg:x="5376128240" fg:w="6018054"/><text x="24.6747%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9,027,081 samples, 0.04%)</title><rect x="24.4612%" y="117" width="0.0410%" height="15" fill="rgb(249,219,21)" fg:x="5384152312" fg:w="9027081"/><text x="24.7112%" y="127.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (278,836,502 samples, 1.27%)</title><rect x="23.3356%" y="245" width="1.2668%" height="15" fill="rgb(205,209,3)" fg:x="5136409089" fg:w="278836502"/><text x="23.5856%" y="255.50"></text></g><g><title>&lt;chlang::board::Position as core::hash::Hash&gt;::hash (57,171,513 samples, 0.26%)</title><rect x="24.3427%" y="229" width="0.2597%" height="15" fill="rgb(243,44,1)" fg:x="5358074078" fg:w="57171513"/><text x="24.5927%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (57,171,513 samples, 0.26%)</title><rect x="24.3427%" y="213" width="0.2597%" height="15" fill="rgb(206,159,16)" fg:x="5358074078" fg:w="57171513"/><text x="24.5927%" y="223.50"></text></g><g><title>core::hash::Hasher::write_i64 (57,171,513 samples, 0.26%)</title><rect x="24.3427%" y="197" width="0.2597%" height="15" fill="rgb(244,77,30)" fg:x="5358074078" fg:w="57171513"/><text x="24.5927%" y="207.50"></text></g><g><title>core::hash::Hasher::write_u64 (57,171,513 samples, 0.26%)</title><rect x="24.3427%" y="181" width="0.2597%" height="15" fill="rgb(218,69,12)" fg:x="5358074078" fg:w="57171513"/><text x="24.5927%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (39,117,351 samples, 0.18%)</title><rect x="24.4247%" y="165" width="0.1777%" height="15" fill="rgb(212,87,7)" fg:x="5376128240" fg:w="39117351"/><text x="24.6747%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (39,117,351 samples, 0.18%)</title><rect x="24.4247%" y="149" width="0.1777%" height="15" fill="rgb(245,114,25)" fg:x="5376128240" fg:w="39117351"/><text x="24.6747%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (39,117,351 samples, 0.18%)</title><rect x="24.4247%" y="133" width="0.1777%" height="15" fill="rgb(210,61,42)" fg:x="5376128240" fg:w="39117351"/><text x="24.6747%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (4,012,036 samples, 0.02%)</title><rect x="24.6024%" y="181" width="0.0182%" height="15" fill="rgb(211,52,33)" fg:x="5415245591" fg:w="4012036"/><text x="24.8524%" y="191.50"></text></g><g><title>core::hash::sip::u8to64_le (15,045,135 samples, 0.07%)</title><rect x="24.6206%" y="133" width="0.0684%" height="15" fill="rgb(234,58,33)" fg:x="5419257627" fg:w="15045135"/><text x="24.8706%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (12,036,108 samples, 0.05%)</title><rect x="24.6890%" y="117" width="0.0547%" height="15" fill="rgb(220,115,36)" fg:x="5434302762" fg:w="12036108"/><text x="24.9390%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6,018,054 samples, 0.03%)</title><rect x="24.7437%" y="117" width="0.0273%" height="15" fill="rgb(243,153,54)" fg:x="5446338870" fg:w="6018054"/><text x="24.9937%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (25,075,225 samples, 0.11%)</title><rect x="24.6890%" y="133" width="0.1139%" height="15" fill="rgb(251,47,18)" fg:x="5434302762" fg:w="25075225"/><text x="24.9390%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (105,315,945 samples, 0.48%)</title><rect x="24.6206%" y="165" width="0.4785%" height="15" fill="rgb(242,102,42)" fg:x="5419257627" fg:w="105315945"/><text x="24.8706%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (105,315,945 samples, 0.48%)</title><rect x="24.6206%" y="149" width="0.4785%" height="15" fill="rgb(234,31,38)" fg:x="5419257627" fg:w="105315945"/><text x="24.8706%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (120,361,080 samples, 0.55%)</title><rect x="24.6024%" y="229" width="0.5468%" height="15" fill="rgb(221,117,51)" fg:x="5415245591" fg:w="120361080"/><text x="24.8524%" y="239.50"></text></g><g><title>core::hash::Hasher::write_isize (120,361,080 samples, 0.55%)</title><rect x="24.6024%" y="213" width="0.5468%" height="15" fill="rgb(212,20,18)" fg:x="5415245591" fg:w="120361080"/><text x="24.8524%" y="223.50"></text></g><g><title>core::hash::Hasher::write_usize (120,361,080 samples, 0.55%)</title><rect x="24.6024%" y="197" width="0.5468%" height="15" fill="rgb(245,133,36)" fg:x="5415245591" fg:w="120361080"/><text x="24.8524%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (116,349,044 samples, 0.53%)</title><rect x="24.6206%" y="181" width="0.5286%" height="15" fill="rgb(212,6,19)" fg:x="5419257627" fg:w="116349044"/><text x="24.8706%" y="191.50"></text></g><g><title>&lt;chlang::board::Player as core::hash::Hash&gt;::hash (130,391,170 samples, 0.59%)</title><rect x="24.6024%" y="245" width="0.5924%" height="15" fill="rgb(218,1,36)" fg:x="5415245591" fg:w="130391170"/><text x="24.8524%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,030,090,216 samples, 9.22%)</title><rect x="16.0948%" y="277" width="9.2231%" height="15" fill="rgb(246,84,54)" fg:x="3542627788" fg:w="2030090216"/><text x="16.3448%" y="287.50">core::hash::i..</text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (2,030,090,216 samples, 9.22%)</title><rect x="16.0948%" y="261" width="9.2231%" height="15" fill="rgb(242,110,6)" fg:x="3542627788" fg:w="2030090216"/><text x="16.3448%" y="271.50">&lt;chlang::boar..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,037,111,279 samples, 9.25%)</title><rect x="16.0948%" y="293" width="9.2550%" height="15" fill="rgb(214,47,5)" fg:x="3542627788" fg:w="2037111279"/><text x="16.3448%" y="303.50">core::hash::i..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (4,012,036 samples, 0.02%)</title><rect x="25.3497%" y="277" width="0.0182%" height="15" fill="rgb(218,159,25)" fg:x="5579739067" fg:w="4012036"/><text x="25.5997%" y="287.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4,012,036 samples, 0.02%)</title><rect x="25.3497%" y="261" width="0.0182%" height="15" fill="rgb(215,211,28)" fg:x="5579739067" fg:w="4012036"/><text x="25.5997%" y="271.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (4,012,036 samples, 0.02%)</title><rect x="25.3497%" y="245" width="0.0182%" height="15" fill="rgb(238,59,32)" fg:x="5579739067" fg:w="4012036"/><text x="25.5997%" y="255.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (14,042,126 samples, 0.06%)</title><rect x="25.3497%" y="293" width="0.0638%" height="15" fill="rgb(226,82,3)" fg:x="5579739067" fg:w="14042126"/><text x="25.5997%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (53,159,477 samples, 0.24%)</title><rect x="25.4135%" y="229" width="0.2415%" height="15" fill="rgb(240,164,32)" fg:x="5593781193" fg:w="53159477"/><text x="25.6635%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (102,306,918 samples, 0.46%)</title><rect x="25.6550%" y="229" width="0.4648%" height="15" fill="rgb(232,46,7)" fg:x="5646940670" fg:w="102306918"/><text x="25.9050%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (196,589,764 samples, 0.89%)</title><rect x="25.4135%" y="245" width="0.8931%" height="15" fill="rgb(229,129,53)" fg:x="5593781193" fg:w="196589764"/><text x="25.6635%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (18,054,162 samples, 0.08%)</title><rect x="26.3067%" y="229" width="0.0820%" height="15" fill="rgb(234,188,29)" fg:x="5790370957" fg:w="18054162"/><text x="26.5567%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (23,069,207 samples, 0.10%)</title><rect x="26.3887%" y="229" width="0.1048%" height="15" fill="rgb(246,141,4)" fg:x="5808425119" fg:w="23069207"/><text x="26.6387%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (50,150,450 samples, 0.23%)</title><rect x="26.3067%" y="245" width="0.2278%" height="15" fill="rgb(229,23,39)" fg:x="5790370957" fg:w="50150450"/><text x="26.5567%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (329,989,961 samples, 1.50%)</title><rect x="25.4135%" y="293" width="1.4992%" height="15" fill="rgb(206,12,3)" fg:x="5593781193" fg:w="329989961"/><text x="25.6635%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (329,989,961 samples, 1.50%)</title><rect x="25.4135%" y="277" width="1.4992%" height="15" fill="rgb(252,226,20)" fg:x="5593781193" fg:w="329989961"/><text x="25.6635%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (329,989,961 samples, 1.50%)</title><rect x="25.4135%" y="261" width="1.4992%" height="15" fill="rgb(216,123,35)" fg:x="5593781193" fg:w="329989961"/><text x="25.6635%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (2,410,230,627 samples, 10.95%)</title><rect x="16.0583%" y="357" width="10.9501%" height="15" fill="rgb(212,68,40)" fg:x="3534603716" fg:w="2410230627"/><text x="16.3083%" y="367.50">hashbrown::raw::..</text></g><g><title>hashbrown::map::make_hasher::{{closure}} (2,402,206,555 samples, 10.91%)</title><rect x="16.0948%" y="341" width="10.9136%" height="15" fill="rgb(254,125,32)" fg:x="3542627788" fg:w="2402206555"/><text x="16.3448%" y="351.50">hashbrown::map::..</text></g><g><title>hashbrown::map::make_hash (2,402,206,555 samples, 10.91%)</title><rect x="16.0948%" y="325" width="10.9136%" height="15" fill="rgb(253,97,22)" fg:x="3542627788" fg:w="2402206555"/><text x="16.3448%" y="335.50">hashbrown::map::..</text></g><g><title>core::hash::BuildHasher::hash_one (2,402,206,555 samples, 10.91%)</title><rect x="16.0948%" y="309" width="10.9136%" height="15" fill="rgb(241,101,14)" fg:x="3542627788" fg:w="2402206555"/><text x="16.3448%" y="319.50">core::hash::Buil..</text></g><g><title>__rust_dealloc (4,012,036 samples, 0.02%)</title><rect x="27.0084%" y="261" width="0.0182%" height="15" fill="rgb(238,103,29)" fg:x="5944834343" fg:w="4012036"/><text x="27.2584%" y="271.50"></text></g><g><title>__rdl_dealloc (5,015,045 samples, 0.02%)</title><rect x="27.0267%" y="261" width="0.0228%" height="15" fill="rgb(233,195,47)" fg:x="5948846379" fg:w="5015045"/><text x="27.2767%" y="271.50"></text></g><g><title>tcache_put (3,009,027 samples, 0.01%)</title><rect x="27.0494%" y="229" width="0.0137%" height="15" fill="rgb(246,218,30)" fg:x="5953861424" fg:w="3009027"/><text x="27.2994%" y="239.50"></text></g><g><title>_int_free (32,096,288 samples, 0.15%)</title><rect x="27.0494%" y="245" width="0.1458%" height="15" fill="rgb(219,145,47)" fg:x="5953861424" fg:w="32096288"/><text x="27.2994%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (59,177,531 samples, 0.27%)</title><rect x="27.0084%" y="357" width="0.2689%" height="15" fill="rgb(243,12,26)" fg:x="5944834343" fg:w="59177531"/><text x="27.2584%" y="367.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (59,177,531 samples, 0.27%)</title><rect x="27.0084%" y="341" width="0.2689%" height="15" fill="rgb(214,87,16)" fg:x="5944834343" fg:w="59177531"/><text x="27.2584%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::{{closure}} (59,177,531 samples, 0.27%)</title><rect x="27.0084%" y="325" width="0.2689%" height="15" fill="rgb(208,99,42)" fg:x="5944834343" fg:w="59177531"/><text x="27.2584%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (59,177,531 samples, 0.27%)</title><rect x="27.0084%" y="309" width="0.2689%" height="15" fill="rgb(253,99,2)" fg:x="5944834343" fg:w="59177531"/><text x="27.2584%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (59,177,531 samples, 0.27%)</title><rect x="27.0084%" y="293" width="0.2689%" height="15" fill="rgb(220,168,23)" fg:x="5944834343" fg:w="59177531"/><text x="27.2584%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (59,177,531 samples, 0.27%)</title><rect x="27.0084%" y="277" width="0.2689%" height="15" fill="rgb(242,38,24)" fg:x="5944834343" fg:w="59177531"/><text x="27.2584%" y="287.50"></text></g><g><title>__GI___libc_free (50,150,450 samples, 0.23%)</title><rect x="27.0494%" y="261" width="0.2278%" height="15" fill="rgb(225,182,9)" fg:x="5953861424" fg:w="50150450"/><text x="27.2994%" y="271.50"></text></g><g><title>core::mem::swap (3,009,027 samples, 0.01%)</title><rect x="27.2773%" y="357" width="0.0137%" height="15" fill="rgb(243,178,37)" fg:x="6004011874" fg:w="3009027"/><text x="27.5273%" y="367.50"></text></g><g><title>core::intrinsics::typed_swap (3,009,027 samples, 0.01%)</title><rect x="27.2773%" y="341" width="0.0137%" height="15" fill="rgb(232,139,19)" fg:x="6004011874" fg:w="3009027"/><text x="27.5273%" y="351.50"></text></g><g><title>core::ptr::swap_nonoverlapping (3,009,027 samples, 0.01%)</title><rect x="27.2773%" y="325" width="0.0137%" height="15" fill="rgb(225,201,24)" fg:x="6004011874" fg:w="3009027"/><text x="27.5273%" y="335.50"></text></g><g><title>core::ptr::swap_nonoverlapping_simple_untyped (3,009,027 samples, 0.01%)</title><rect x="27.2773%" y="309" width="0.0137%" height="15" fill="rgb(221,47,46)" fg:x="6004011874" fg:w="3009027"/><text x="27.5273%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14,042,126 samples, 0.06%)</title><rect x="27.2910%" y="357" width="0.0638%" height="15" fill="rgb(249,23,13)" fg:x="6007020901" fg:w="14042126"/><text x="27.5410%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (4,012,036 samples, 0.02%)</title><rect x="27.3548%" y="293" width="0.0182%" height="15" fill="rgb(219,9,5)" fg:x="6021063027" fg:w="4012036"/><text x="27.6048%" y="303.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (4,012,036 samples, 0.02%)</title><rect x="27.3548%" y="277" width="0.0182%" height="15" fill="rgb(254,171,16)" fg:x="6021063027" fg:w="4012036"/><text x="27.6048%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8,024,072 samples, 0.04%)</title><rect x="27.3548%" y="325" width="0.0365%" height="15" fill="rgb(230,171,20)" fg:x="6021063027" fg:w="8024072"/><text x="27.6048%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (8,024,072 samples, 0.04%)</title><rect x="27.3548%" y="309" width="0.0365%" height="15" fill="rgb(210,71,41)" fg:x="6021063027" fg:w="8024072"/><text x="27.6048%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (10,030,090 samples, 0.05%)</title><rect x="27.3548%" y="357" width="0.0456%" height="15" fill="rgb(206,173,20)" fg:x="6021063027" fg:w="10030090"/><text x="27.6048%" y="367.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (10,030,090 samples, 0.05%)</title><rect x="27.3548%" y="341" width="0.0456%" height="15" fill="rgb(233,88,34)" fg:x="6021063027" fg:w="10030090"/><text x="27.6048%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (2,913,741,145 samples, 13.24%)</title><rect x="14.1946%" y="373" width="13.2376%" height="15" fill="rgb(223,209,46)" fg:x="3124373035" fg:w="2913741145"/><text x="14.4446%" y="383.50">hashbrown::raw::RawT..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (2,927,783,271 samples, 13.30%)</title><rect x="14.1718%" y="389" width="13.3014%" height="15" fill="rgb(250,43,18)" fg:x="3119357990" fg:w="2927783271"/><text x="14.4218%" y="399.50">hashbrown::raw::RawT..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,944,834,424 samples, 13.38%)</title><rect x="14.1718%" y="405" width="13.3789%" height="15" fill="rgb(208,13,10)" fg:x="3119357990" fg:w="2944834424"/><text x="14.4218%" y="415.50">hashbrown::raw::RawT..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2,949,849,469 samples, 13.40%)</title><rect x="14.1718%" y="437" width="13.4017%" height="15" fill="rgb(212,200,36)" fg:x="3119357990" fg:w="2949849469"/><text x="14.4218%" y="447.50">hashbrown::map::Hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2,949,849,469 samples, 13.40%)</title><rect x="14.1718%" y="421" width="13.4017%" height="15" fill="rgb(225,90,30)" fg:x="3119357990" fg:w="2949849469"/><text x="14.4218%" y="431.50">hashbrown::raw::RawT..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (5,514,543,482 samples, 25.05%)</title><rect x="2.8571%" y="453" width="25.0535%" height="15" fill="rgb(236,182,39)" fg:x="628886643" fg:w="5514543482"/><text x="3.1071%" y="463.50">hashbrown::rustc_entry::&lt;impl hashbrown:..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (5,545,636,761 samples, 25.19%)</title><rect x="2.7751%" y="469" width="25.1948%" height="15" fill="rgb(212,144,35)" fg:x="610832481" fg:w="5545636761"/><text x="3.0251%" y="479.50">std::collections::hash::map::HashMap&lt;K,V..</text></g><g><title>hashbrown::raw::sse2::Group::load (5,015,045 samples, 0.02%)</title><rect x="27.9745%" y="373" width="0.0228%" height="15" fill="rgb(228,63,44)" fg:x="6157472251" fg:w="5015045"/><text x="28.2245%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5,015,045 samples, 0.02%)</title><rect x="27.9745%" y="357" width="0.0228%" height="15" fill="rgb(228,109,6)" fg:x="6157472251" fg:w="5015045"/><text x="28.2245%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,015,045 samples, 0.02%)</title><rect x="27.9745%" y="341" width="0.0228%" height="15" fill="rgb(238,117,24)" fg:x="6157472251" fg:w="5015045"/><text x="28.2245%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (7,021,063 samples, 0.03%)</title><rect x="27.9973%" y="357" width="0.0319%" height="15" fill="rgb(242,26,26)" fg:x="6162487296" fg:w="7021063"/><text x="28.2473%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7,021,063 samples, 0.03%)</title><rect x="27.9973%" y="341" width="0.0319%" height="15" fill="rgb(221,92,48)" fg:x="6162487296" fg:w="7021063"/><text x="28.2473%" y="351.50"></text></g><g><title>hashbrown::raw::is_full (53,159,477 samples, 0.24%)</title><rect x="28.0292%" y="341" width="0.2415%" height="15" fill="rgb(209,209,32)" fg:x="6169508359" fg:w="53159477"/><text x="28.2792%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (65,195,585 samples, 0.30%)</title><rect x="27.9973%" y="373" width="0.2962%" height="15" fill="rgb(221,70,22)" fg:x="6162487296" fg:w="65195585"/><text x="28.2473%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (58,174,522 samples, 0.26%)</title><rect x="28.0292%" y="357" width="0.2643%" height="15" fill="rgb(248,145,5)" fg:x="6169508359" fg:w="58174522"/><text x="28.2792%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (29,087,261 samples, 0.13%)</title><rect x="28.2935%" y="357" width="0.1321%" height="15" fill="rgb(226,116,26)" fg:x="6227682881" fg:w="29087261"/><text x="28.5435%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (29,087,261 samples, 0.13%)</title><rect x="28.2935%" y="341" width="0.1321%" height="15" fill="rgb(244,5,17)" fg:x="6227682881" fg:w="29087261"/><text x="28.5435%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (40,120,360 samples, 0.18%)</title><rect x="28.4256%" y="357" width="0.1823%" height="15" fill="rgb(252,159,33)" fg:x="6256770142" fg:w="40120360"/><text x="28.6756%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (96,288,864 samples, 0.44%)</title><rect x="28.2935%" y="373" width="0.4375%" height="15" fill="rgb(206,71,0)" fg:x="6227682881" fg:w="96288864"/><text x="28.5435%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (27,081,243 samples, 0.12%)</title><rect x="28.6079%" y="357" width="0.1230%" height="15" fill="rgb(233,118,54)" fg:x="6296890502" fg:w="27081243"/><text x="28.8579%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (167,502,503 samples, 0.76%)</title><rect x="27.9745%" y="389" width="0.7610%" height="15" fill="rgb(234,83,48)" fg:x="6157472251" fg:w="167502503"/><text x="28.2245%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (181,544,629 samples, 0.82%)</title><rect x="27.9699%" y="405" width="0.8248%" height="15" fill="rgb(228,3,54)" fg:x="6156469242" fg:w="181544629"/><text x="28.2199%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket (25,075,225 samples, 0.11%)</title><rect x="28.7947%" y="405" width="0.1139%" height="15" fill="rgb(226,155,13)" fg:x="6338013871" fg:w="25075225"/><text x="29.0447%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (25,075,225 samples, 0.11%)</title><rect x="28.7947%" y="389" width="0.1139%" height="15" fill="rgb(241,28,37)" fg:x="6338013871" fg:w="25075225"/><text x="29.0447%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (25,075,225 samples, 0.11%)</title><rect x="28.7947%" y="373" width="0.1139%" height="15" fill="rgb(233,93,10)" fg:x="6338013871" fg:w="25075225"/><text x="29.0447%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (22,066,198 samples, 0.10%)</title><rect x="28.9086%" y="405" width="0.1003%" height="15" fill="rgb(225,113,19)" fg:x="6363089096" fg:w="22066198"/><text x="29.1586%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (22,066,198 samples, 0.10%)</title><rect x="28.9086%" y="389" width="0.1003%" height="15" fill="rgb(241,2,18)" fg:x="6363089096" fg:w="22066198"/><text x="29.1586%" y="399.50"></text></g><g><title>core::ptr::write (22,066,198 samples, 0.10%)</title><rect x="28.9086%" y="373" width="0.1003%" height="15" fill="rgb(228,207,21)" fg:x="6363089096" fg:w="22066198"/><text x="29.1586%" y="383.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (233,701,097 samples, 1.06%)</title><rect x="27.9699%" y="469" width="1.0617%" height="15" fill="rgb(213,211,35)" fg:x="6156469242" fg:w="233701097"/><text x="28.2199%" y="479.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (233,701,097 samples, 1.06%)</title><rect x="27.9699%" y="453" width="1.0617%" height="15" fill="rgb(209,83,10)" fg:x="6156469242" fg:w="233701097"/><text x="28.2199%" y="463.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (233,701,097 samples, 1.06%)</title><rect x="27.9699%" y="437" width="1.0617%" height="15" fill="rgb(209,164,1)" fg:x="6156469242" fg:w="233701097"/><text x="28.2199%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (233,701,097 samples, 1.06%)</title><rect x="27.9699%" y="421" width="1.0617%" height="15" fill="rgb(213,184,43)" fg:x="6156469242" fg:w="233701097"/><text x="28.2199%" y="431.50"></text></g><g><title>tcache_put (4,012,036 samples, 0.02%)</title><rect x="29.0545%" y="309" width="0.0182%" height="15" fill="rgb(231,61,34)" fg:x="6395185384" fg:w="4012036"/><text x="29.3045%" y="319.50"></text></g><g><title>_int_free (24,072,216 samples, 0.11%)</title><rect x="29.0545%" y="325" width="0.1094%" height="15" fill="rgb(235,75,3)" fg:x="6395185384" fg:w="24072216"/><text x="29.3045%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;&amp;chlang::board::KeyStruct,i32&gt;&gt; (37,111,333 samples, 0.17%)</title><rect x="29.0317%" y="469" width="0.1686%" height="15" fill="rgb(220,106,47)" fg:x="6390170339" fg:w="37111333"/><text x="29.2817%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;&amp;chlang::board::KeyStruct,i32,std::hash::random::RandomState&gt;&gt; (37,111,333 samples, 0.17%)</title><rect x="29.0317%" y="453" width="0.1686%" height="15" fill="rgb(210,196,33)" fg:x="6390170339" fg:w="37111333"/><text x="29.2817%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(&amp;chlang::board::KeyStruct,i32)&gt;&gt; (37,111,333 samples, 0.17%)</title><rect x="29.0317%" y="437" width="0.1686%" height="15" fill="rgb(229,154,42)" fg:x="6390170339" fg:w="37111333"/><text x="29.2817%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37,111,333 samples, 0.17%)</title><rect x="29.0317%" y="421" width="0.1686%" height="15" fill="rgb(228,114,26)" fg:x="6390170339" fg:w="37111333"/><text x="29.2817%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (37,111,333 samples, 0.17%)</title><rect x="29.0317%" y="405" width="0.1686%" height="15" fill="rgb(208,144,1)" fg:x="6390170339" fg:w="37111333"/><text x="29.2817%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (37,111,333 samples, 0.17%)</title><rect x="29.0317%" y="389" width="0.1686%" height="15" fill="rgb(239,112,37)" fg:x="6390170339" fg:w="37111333"/><text x="29.2817%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (36,108,324 samples, 0.16%)</title><rect x="29.0362%" y="373" width="0.1640%" height="15" fill="rgb(210,96,50)" fg:x="6391173348" fg:w="36108324"/><text x="29.2862%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (36,108,324 samples, 0.16%)</title><rect x="29.0362%" y="357" width="0.1640%" height="15" fill="rgb(222,178,2)" fg:x="6391173348" fg:w="36108324"/><text x="29.2862%" y="367.50"></text></g><g><title>__GI___libc_free (32,096,288 samples, 0.15%)</title><rect x="29.0545%" y="341" width="0.1458%" height="15" fill="rgb(226,74,18)" fg:x="6395185384" fg:w="32096288"/><text x="29.3045%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (23,069,207 samples, 0.10%)</title><rect x="29.2003%" y="469" width="0.1048%" height="15" fill="rgb(225,67,54)" fg:x="6427281672" fg:w="23069207"/><text x="29.4503%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_hasher (4,012,036 samples, 0.02%)</title><rect x="29.3051%" y="437" width="0.0182%" height="15" fill="rgb(251,92,32)" fg:x="6450350879" fg:w="4012036"/><text x="29.5551%" y="447.50"></text></g><g><title>std::hash::random::RandomState::new::KEYS::{{constant}}::{{closure}} (7,021,063 samples, 0.03%)</title><rect x="29.3370%" y="357" width="0.0319%" height="15" fill="rgb(228,149,22)" fg:x="6457371942" fg:w="7021063"/><text x="29.5870%" y="367.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (7,021,063 samples, 0.03%)</title><rect x="29.3370%" y="341" width="0.0319%" height="15" fill="rgb(243,54,13)" fg:x="6457371942" fg:w="7021063"/><text x="29.5870%" y="351.50"></text></g><g><title>core::ops::function::FnOnce::call_once (14,042,126 samples, 0.06%)</title><rect x="29.3370%" y="373" width="0.0638%" height="15" fill="rgb(243,180,28)" fg:x="6457371942" fg:w="14042126"/><text x="29.5870%" y="383.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (20,060,180 samples, 0.09%)</title><rect x="29.3233%" y="437" width="0.0911%" height="15" fill="rgb(208,167,24)" fg:x="6454362915" fg:w="20060180"/><text x="29.5733%" y="447.50"></text></g><g><title>std::hash::random::RandomState::new (20,060,180 samples, 0.09%)</title><rect x="29.3233%" y="421" width="0.0911%" height="15" fill="rgb(245,73,45)" fg:x="6454362915" fg:w="20060180"/><text x="29.5733%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20,060,180 samples, 0.09%)</title><rect x="29.3233%" y="405" width="0.0911%" height="15" fill="rgb(237,203,48)" fg:x="6454362915" fg:w="20060180"/><text x="29.5733%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20,060,180 samples, 0.09%)</title><rect x="29.3233%" y="389" width="0.0911%" height="15" fill="rgb(211,197,16)" fg:x="6454362915" fg:w="20060180"/><text x="29.5733%" y="399.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (4,012,036 samples, 0.02%)</title><rect x="29.4144%" y="341" width="0.0182%" height="15" fill="rgb(243,99,51)" fg:x="6474423095" fg:w="4012036"/><text x="29.6644%" y="351.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (7,021,063 samples, 0.03%)</title><rect x="29.4327%" y="293" width="0.0319%" height="15" fill="rgb(215,123,29)" fg:x="6478435131" fg:w="7021063"/><text x="29.6827%" y="303.50"></text></g><g><title>__rust_alloc (5,015,045 samples, 0.02%)</title><rect x="29.4737%" y="213" width="0.0228%" height="15" fill="rgb(239,186,37)" fg:x="6487462212" fg:w="5015045"/><text x="29.7237%" y="223.50"></text></g><g><title>tcache_get (14,042,126 samples, 0.06%)</title><rect x="29.4965%" y="197" width="0.0638%" height="15" fill="rgb(252,136,39)" fg:x="6492477257" fg:w="14042126"/><text x="29.7465%" y="207.50"></text></g><g><title>__GI___libc_malloc (38,114,342 samples, 0.17%)</title><rect x="29.4965%" y="213" width="0.1732%" height="15" fill="rgb(223,213,32)" fg:x="6492477257" fg:w="38114342"/><text x="29.7465%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (44,132,396 samples, 0.20%)</title><rect x="29.4737%" y="261" width="0.2005%" height="15" fill="rgb(233,115,5)" fg:x="6487462212" fg:w="44132396"/><text x="29.7237%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (44,132,396 samples, 0.20%)</title><rect x="29.4737%" y="245" width="0.2005%" height="15" fill="rgb(207,226,44)" fg:x="6487462212" fg:w="44132396"/><text x="29.7237%" y="255.50"></text></g><g><title>alloc::alloc::alloc (44,132,396 samples, 0.20%)</title><rect x="29.4737%" y="229" width="0.2005%" height="15" fill="rgb(208,126,0)" fg:x="6487462212" fg:w="44132396"/><text x="29.7237%" y="239.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (50,150,450 samples, 0.23%)</title><rect x="29.4737%" y="277" width="0.2278%" height="15" fill="rgb(244,66,21)" fg:x="6487462212" fg:w="50150450"/><text x="29.7237%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (6,018,054 samples, 0.03%)</title><rect x="29.7015%" y="261" width="0.0273%" height="15" fill="rgb(222,97,12)" fg:x="6537612662" fg:w="6018054"/><text x="29.9515%" y="271.50"></text></g><g><title>core::intrinsics::unlikely (5,015,045 samples, 0.02%)</title><rect x="29.7061%" y="245" width="0.0228%" height="15" fill="rgb(219,213,19)" fg:x="6538615671" fg:w="5015045"/><text x="29.9561%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3,009,027 samples, 0.01%)</title><rect x="29.7289%" y="261" width="0.0137%" height="15" fill="rgb(252,169,30)" fg:x="6543630716" fg:w="3009027"/><text x="29.9789%" y="271.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (13,039,117 samples, 0.06%)</title><rect x="29.7015%" y="277" width="0.0592%" height="15" fill="rgb(206,32,51)" fg:x="6537612662" fg:w="13039117"/><text x="29.9515%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (68,204,612 samples, 0.31%)</title><rect x="29.4646%" y="293" width="0.3099%" height="15" fill="rgb(250,172,42)" fg:x="6485456194" fg:w="68204612"/><text x="29.7146%" y="303.50"></text></g><g><title>__memset_avx2_unaligned (15,045,135 samples, 0.07%)</title><rect x="29.7835%" y="261" width="0.0684%" height="15" fill="rgb(209,34,43)" fg:x="6555666824" fg:w="15045135"/><text x="30.0335%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (97,291,873 samples, 0.44%)</title><rect x="29.4327%" y="325" width="0.4420%" height="15" fill="rgb(223,11,35)" fg:x="6478435131" fg:w="97291873"/><text x="29.6827%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (97,291,873 samples, 0.44%)</title><rect x="29.4327%" y="309" width="0.4420%" height="15" fill="rgb(251,219,26)" fg:x="6478435131" fg:w="97291873"/><text x="29.6827%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (22,066,198 samples, 0.10%)</title><rect x="29.7744%" y="293" width="0.1003%" height="15" fill="rgb(231,119,3)" fg:x="6553660806" fg:w="22066198"/><text x="30.0244%" y="303.50"></text></g><g><title>core::intrinsics::write_bytes (22,066,198 samples, 0.10%)</title><rect x="29.7744%" y="277" width="0.1003%" height="15" fill="rgb(216,97,11)" fg:x="6553660806" fg:w="22066198"/><text x="30.0244%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (4,012,036 samples, 0.02%)</title><rect x="29.8747%" y="325" width="0.0182%" height="15" fill="rgb(223,59,9)" fg:x="6575727004" fg:w="4012036"/><text x="30.1247%" y="335.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (4,012,036 samples, 0.02%)</title><rect x="29.8747%" y="309" width="0.0182%" height="15" fill="rgb(233,93,31)" fg:x="6575727004" fg:w="4012036"/><text x="30.1247%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::{{closure}} (4,012,036 samples, 0.02%)</title><rect x="29.8747%" y="293" width="0.0182%" height="15" fill="rgb(239,81,33)" fg:x="6575727004" fg:w="4012036"/><text x="30.1247%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (130,391,170 samples, 0.59%)</title><rect x="29.4327%" y="341" width="0.5924%" height="15" fill="rgb(213,120,34)" fg:x="6478435131" fg:w="130391170"/><text x="29.6827%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (137,412,233 samples, 0.62%)</title><rect x="29.4144%" y="357" width="0.6243%" height="15" fill="rgb(243,49,53)" fg:x="6474423095" fg:w="137412233"/><text x="29.6644%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (148,445,332 samples, 0.67%)</title><rect x="29.4144%" y="373" width="0.6744%" height="15" fill="rgb(247,216,33)" fg:x="6474423095" fg:w="148445332"/><text x="29.6644%" y="383.50"></text></g><g><title>core::intrinsics::unlikely (3,009,027 samples, 0.01%)</title><rect x="30.0889%" y="373" width="0.0137%" height="15" fill="rgb(226,26,14)" fg:x="6622868427" fg:w="3009027"/><text x="30.3389%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (155,466,395 samples, 0.71%)</title><rect x="29.4144%" y="405" width="0.7063%" height="15" fill="rgb(215,49,53)" fg:x="6474423095" fg:w="155466395"/><text x="29.6644%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (155,466,395 samples, 0.71%)</title><rect x="29.4144%" y="389" width="0.7063%" height="15" fill="rgb(245,162,40)" fg:x="6474423095" fg:w="155466395"/><text x="29.6644%" y="399.50"></text></g><g><title>hashbrown::raw::special_is_empty (3,009,027 samples, 0.01%)</title><rect x="30.1208%" y="229" width="0.0137%" height="15" fill="rgb(229,68,17)" fg:x="6629889490" fg:w="3009027"/><text x="30.3708%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (3,009,027 samples, 0.01%)</title><rect x="30.1344%" y="197" width="0.0137%" height="15" fill="rgb(213,182,10)" fg:x="6632898517" fg:w="3009027"/><text x="30.3844%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (6,018,054 samples, 0.03%)</title><rect x="30.1344%" y="229" width="0.0273%" height="15" fill="rgb(245,125,30)" fg:x="6632898517" fg:w="6018054"/><text x="30.3844%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (6,018,054 samples, 0.03%)</title><rect x="30.1344%" y="213" width="0.0273%" height="15" fill="rgb(232,202,2)" fg:x="6632898517" fg:w="6018054"/><text x="30.3844%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (12,036,108 samples, 0.05%)</title><rect x="30.1208%" y="245" width="0.0547%" height="15" fill="rgb(237,140,51)" fg:x="6629889490" fg:w="12036108"/><text x="30.3708%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (15,045,135 samples, 0.07%)</title><rect x="30.1208%" y="261" width="0.0684%" height="15" fill="rgb(236,157,25)" fg:x="6629889490" fg:w="15045135"/><text x="30.3708%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (3,009,027 samples, 0.01%)</title><rect x="30.1754%" y="245" width="0.0137%" height="15" fill="rgb(219,209,0)" fg:x="6641925598" fg:w="3009027"/><text x="30.4254%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (3,009,027 samples, 0.01%)</title><rect x="30.1754%" y="229" width="0.0137%" height="15" fill="rgb(240,116,54)" fg:x="6641925598" fg:w="3009027"/><text x="30.4254%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3,009,027 samples, 0.01%)</title><rect x="30.1754%" y="213" width="0.0137%" height="15" fill="rgb(216,10,36)" fg:x="6641925598" fg:w="3009027"/><text x="30.4254%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,009,027 samples, 0.01%)</title><rect x="30.1937%" y="101" width="0.0137%" height="15" fill="rgb(222,72,44)" fg:x="6645937634" fg:w="3009027"/><text x="30.4437%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,009,027 samples, 0.01%)</title><rect x="30.2119%" y="85" width="0.0137%" height="15" fill="rgb(232,159,9)" fg:x="6649949670" fg:w="3009027"/><text x="30.4619%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (10,030,090 samples, 0.05%)</title><rect x="30.2256%" y="85" width="0.0456%" height="15" fill="rgb(210,39,32)" fg:x="6652958697" fg:w="10030090"/><text x="30.4756%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (22,066,198 samples, 0.10%)</title><rect x="30.2119%" y="101" width="0.1003%" height="15" fill="rgb(216,194,45)" fg:x="6649949670" fg:w="22066198"/><text x="30.4619%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (48,144,432 samples, 0.22%)</title><rect x="30.1937%" y="133" width="0.2187%" height="15" fill="rgb(218,18,35)" fg:x="6645937634" fg:w="48144432"/><text x="30.4437%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (48,144,432 samples, 0.22%)</title><rect x="30.1937%" y="117" width="0.2187%" height="15" fill="rgb(207,83,51)" fg:x="6645937634" fg:w="48144432"/><text x="30.4437%" y="127.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (50,150,450 samples, 0.23%)</title><rect x="30.1937%" y="149" width="0.2278%" height="15" fill="rgb(225,63,43)" fg:x="6645937634" fg:w="50150450"/><text x="30.4437%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (52,156,468 samples, 0.24%)</title><rect x="30.1891%" y="181" width="0.2370%" height="15" fill="rgb(207,57,36)" fg:x="6644934625" fg:w="52156468"/><text x="30.4391%" y="191.50"></text></g><g><title>core::hash::Hasher::write_u64 (52,156,468 samples, 0.24%)</title><rect x="30.1891%" y="165" width="0.2370%" height="15" fill="rgb(216,99,33)" fg:x="6644934625" fg:w="52156468"/><text x="30.4391%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (10,030,090 samples, 0.05%)</title><rect x="30.4397%" y="69" width="0.0456%" height="15" fill="rgb(225,42,16)" fg:x="6700100120" fg:w="10030090"/><text x="30.6897%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (38,114,342 samples, 0.17%)</title><rect x="30.4853%" y="69" width="0.1732%" height="15" fill="rgb(220,201,45)" fg:x="6710130210" fg:w="38114342"/><text x="30.7353%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (68,204,612 samples, 0.31%)</title><rect x="30.4397%" y="85" width="0.3099%" height="15" fill="rgb(225,33,4)" fg:x="6700100120" fg:w="68204612"/><text x="30.6897%" y="95.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (99,297,891 samples, 0.45%)</title><rect x="30.4261%" y="133" width="0.4511%" height="15" fill="rgb(224,33,50)" fg:x="6697091093" fg:w="99297891"/><text x="30.6761%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (99,297,891 samples, 0.45%)</title><rect x="30.4261%" y="117" width="0.4511%" height="15" fill="rgb(246,198,51)" fg:x="6697091093" fg:w="99297891"/><text x="30.6761%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (99,297,891 samples, 0.45%)</title><rect x="30.4261%" y="101" width="0.4511%" height="15" fill="rgb(205,22,4)" fg:x="6697091093" fg:w="99297891"/><text x="30.6761%" y="111.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (100,300,900 samples, 0.46%)</title><rect x="30.4261%" y="149" width="0.4557%" height="15" fill="rgb(206,3,8)" fg:x="6697091093" fg:w="100300900"/><text x="30.6761%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (5,015,045 samples, 0.02%)</title><rect x="30.8817%" y="117" width="0.0228%" height="15" fill="rgb(251,23,15)" fg:x="6797391993" fg:w="5015045"/><text x="31.1317%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (13,039,117 samples, 0.06%)</title><rect x="30.9091%" y="69" width="0.0592%" height="15" fill="rgb(252,88,28)" fg:x="6803410047" fg:w="13039117"/><text x="31.1591%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6,018,054 samples, 0.03%)</title><rect x="30.9774%" y="53" width="0.0273%" height="15" fill="rgb(212,127,14)" fg:x="6818455182" fg:w="6018054"/><text x="31.2274%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8,024,072 samples, 0.04%)</title><rect x="31.0048%" y="53" width="0.0365%" height="15" fill="rgb(247,145,37)" fg:x="6824473236" fg:w="8024072"/><text x="31.2548%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (23,069,207 samples, 0.10%)</title><rect x="30.9774%" y="69" width="0.1048%" height="15" fill="rgb(209,117,53)" fg:x="6818455182" fg:w="23069207"/><text x="31.2274%" y="79.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (84,252,756 samples, 0.38%)</title><rect x="30.9045%" y="101" width="0.3828%" height="15" fill="rgb(212,90,42)" fg:x="6802407038" fg:w="84252756"/><text x="31.1545%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (84,252,756 samples, 0.38%)</title><rect x="30.9045%" y="85" width="0.3828%" height="15" fill="rgb(218,164,37)" fg:x="6802407038" fg:w="84252756"/><text x="31.1545%" y="95.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (86,258,774 samples, 0.39%)</title><rect x="30.9045%" y="117" width="0.3919%" height="15" fill="rgb(246,65,34)" fg:x="6802407038" fg:w="86258774"/><text x="31.1545%" y="127.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (115,346,035 samples, 0.52%)</title><rect x="30.8817%" y="149" width="0.5240%" height="15" fill="rgb(231,100,33)" fg:x="6797391993" fg:w="115346035"/><text x="31.1317%" y="159.50"></text></g><g><title>core::hash::Hasher::write_usize (115,346,035 samples, 0.52%)</title><rect x="30.8817%" y="133" width="0.5240%" height="15" fill="rgb(228,126,14)" fg:x="6797391993" fg:w="115346035"/><text x="31.1317%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for bool&gt;::hash (20,060,180 samples, 0.09%)</title><rect x="31.4058%" y="133" width="0.0911%" height="15" fill="rgb(215,173,21)" fg:x="6912738028" fg:w="20060180"/><text x="31.6558%" y="143.50"></text></g><g><title>core::hash::Hasher::write_u8 (20,060,180 samples, 0.09%)</title><rect x="31.4058%" y="117" width="0.0911%" height="15" fill="rgb(210,6,40)" fg:x="6912738028" fg:w="20060180"/><text x="31.6558%" y="127.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (20,060,180 samples, 0.09%)</title><rect x="31.4058%" y="101" width="0.0911%" height="15" fill="rgb(212,48,18)" fg:x="6912738028" fg:w="20060180"/><text x="31.6558%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (20,060,180 samples, 0.09%)</title><rect x="31.4058%" y="85" width="0.0911%" height="15" fill="rgb(230,214,11)" fg:x="6912738028" fg:w="20060180"/><text x="31.6558%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20,060,180 samples, 0.09%)</title><rect x="31.4058%" y="69" width="0.0911%" height="15" fill="rgb(254,105,39)" fg:x="6912738028" fg:w="20060180"/><text x="31.6558%" y="79.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (236,710,124 samples, 1.08%)</title><rect x="30.4261%" y="181" width="1.0754%" height="15" fill="rgb(245,158,5)" fg:x="6697091093" fg:w="236710124"/><text x="30.6761%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (236,710,124 samples, 1.08%)</title><rect x="30.4261%" y="165" width="1.0754%" height="15" fill="rgb(249,208,11)" fg:x="6697091093" fg:w="236710124"/><text x="30.6761%" y="175.50"></text></g><g><title>core::hash::Hash::hash_slice (21,063,189 samples, 0.10%)</title><rect x="31.4058%" y="149" width="0.0957%" height="15" fill="rgb(210,39,28)" fg:x="6912738028" fg:w="21063189"/><text x="31.6558%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (13,039,117 samples, 0.06%)</title><rect x="31.5015%" y="69" width="0.0592%" height="15" fill="rgb(211,56,53)" fg:x="6933801217" fg:w="13039117"/><text x="31.7515%" y="79.50"></text></g><g><title>core::cmp::min (4,012,036 samples, 0.02%)</title><rect x="31.5607%" y="69" width="0.0182%" height="15" fill="rgb(226,201,30)" fg:x="6946840334" fg:w="4012036"/><text x="31.8107%" y="79.50"></text></g><g><title>core::cmp::Ord::min (4,012,036 samples, 0.02%)</title><rect x="31.5607%" y="53" width="0.0182%" height="15" fill="rgb(239,101,34)" fg:x="6946840334" fg:w="4012036"/><text x="31.8107%" y="63.50"></text></g><g><title>core::cmp::min_by (4,012,036 samples, 0.02%)</title><rect x="31.5607%" y="37" width="0.0182%" height="15" fill="rgb(226,209,5)" fg:x="6946840334" fg:w="4012036"/><text x="31.8107%" y="47.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7,021,063 samples, 0.03%)</title><rect x="31.5789%" y="69" width="0.0319%" height="15" fill="rgb(250,105,47)" fg:x="6950852370" fg:w="7021063"/><text x="31.8289%" y="79.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (37,111,333 samples, 0.17%)</title><rect x="31.5015%" y="101" width="0.1686%" height="15" fill="rgb(230,72,3)" fg:x="6933801217" fg:w="37111333"/><text x="31.7515%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (37,111,333 samples, 0.17%)</title><rect x="31.5015%" y="85" width="0.1686%" height="15" fill="rgb(232,218,39)" fg:x="6933801217" fg:w="37111333"/><text x="31.7515%" y="95.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (38,114,342 samples, 0.17%)</title><rect x="31.5015%" y="165" width="0.1732%" height="15" fill="rgb(248,166,6)" fg:x="6933801217" fg:w="38114342"/><text x="31.7515%" y="175.50"></text></g><g><title>core::hash::Hasher::write_isize (38,114,342 samples, 0.17%)</title><rect x="31.5015%" y="149" width="0.1732%" height="15" fill="rgb(247,89,20)" fg:x="6933801217" fg:w="38114342"/><text x="31.7515%" y="159.50"></text></g><g><title>core::hash::Hasher::write_usize (38,114,342 samples, 0.17%)</title><rect x="31.5015%" y="133" width="0.1732%" height="15" fill="rgb(248,130,54)" fg:x="6933801217" fg:w="38114342"/><text x="31.7515%" y="143.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (38,114,342 samples, 0.17%)</title><rect x="31.5015%" y="117" width="0.1732%" height="15" fill="rgb(234,196,4)" fg:x="6933801217" fg:w="38114342"/><text x="31.7515%" y="127.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (40,120,360 samples, 0.18%)</title><rect x="31.5015%" y="181" width="0.1823%" height="15" fill="rgb(250,143,31)" fg:x="6933801217" fg:w="40120360"/><text x="31.7515%" y="191.50"></text></g><g><title>core::hash::sip::u8to64_le (4,012,036 samples, 0.02%)</title><rect x="31.7020%" y="69" width="0.0182%" height="15" fill="rgb(211,110,34)" fg:x="6977933613" fg:w="4012036"/><text x="31.9520%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5,015,045 samples, 0.02%)</title><rect x="31.7202%" y="53" width="0.0228%" height="15" fill="rgb(215,124,48)" fg:x="6981945649" fg:w="5015045"/><text x="31.9702%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8,024,072 samples, 0.04%)</title><rect x="31.7202%" y="69" width="0.0365%" height="15" fill="rgb(216,46,13)" fg:x="6981945649" fg:w="8024072"/><text x="31.9702%" y="79.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (25,075,225 samples, 0.11%)</title><rect x="31.6929%" y="101" width="0.1139%" height="15" fill="rgb(205,184,25)" fg:x="6975927595" fg:w="25075225"/><text x="31.9429%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (25,075,225 samples, 0.11%)</title><rect x="31.6929%" y="85" width="0.1139%" height="15" fill="rgb(228,1,10)" fg:x="6975927595" fg:w="25075225"/><text x="31.9429%" y="95.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (26,078,234 samples, 0.12%)</title><rect x="31.6929%" y="117" width="0.1185%" height="15" fill="rgb(213,116,27)" fg:x="6975927595" fg:w="26078234"/><text x="31.9429%" y="127.50"></text></g><g><title>&lt;chlang::board::Player as core::hash::Hash&gt;::hash (29,087,261 samples, 0.13%)</title><rect x="31.6838%" y="181" width="0.1321%" height="15" fill="rgb(241,95,50)" fg:x="6973921577" fg:w="29087261"/><text x="31.9338%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (29,087,261 samples, 0.13%)</title><rect x="31.6838%" y="165" width="0.1321%" height="15" fill="rgb(238,48,32)" fg:x="6973921577" fg:w="29087261"/><text x="31.9338%" y="175.50"></text></g><g><title>core::hash::Hasher::write_isize (29,087,261 samples, 0.13%)</title><rect x="31.6838%" y="149" width="0.1321%" height="15" fill="rgb(235,113,49)" fg:x="6973921577" fg:w="29087261"/><text x="31.9338%" y="159.50"></text></g><g><title>core::hash::Hasher::write_usize (29,087,261 samples, 0.13%)</title><rect x="31.6838%" y="133" width="0.1321%" height="15" fill="rgb(205,127,43)" fg:x="6973921577" fg:w="29087261"/><text x="31.9338%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (362,086,249 samples, 1.65%)</title><rect x="30.1891%" y="229" width="1.6450%" height="15" fill="rgb(250,162,2)" fg:x="6644934625" fg:w="362086249"/><text x="30.4391%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (362,086,249 samples, 1.65%)</title><rect x="30.1891%" y="213" width="1.6450%" height="15" fill="rgb(220,13,41)" fg:x="6644934625" fg:w="362086249"/><text x="30.4391%" y="223.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (362,086,249 samples, 1.65%)</title><rect x="30.1891%" y="197" width="1.6450%" height="15" fill="rgb(249,221,25)" fg:x="6644934625" fg:w="362086249"/><text x="30.4391%" y="207.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (12,036,108 samples, 0.05%)</title><rect x="31.8341%" y="213" width="0.0547%" height="15" fill="rgb(215,208,19)" fg:x="7007020874" fg:w="12036108"/><text x="32.0841%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (12,036,108 samples, 0.05%)</title><rect x="31.8341%" y="197" width="0.0547%" height="15" fill="rgb(236,175,2)" fg:x="7007020874" fg:w="12036108"/><text x="32.0841%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (12,036,108 samples, 0.05%)</title><rect x="31.8341%" y="181" width="0.0547%" height="15" fill="rgb(241,52,2)" fg:x="7007020874" fg:w="12036108"/><text x="32.0841%" y="191.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (18,054,162 samples, 0.08%)</title><rect x="31.8341%" y="229" width="0.0820%" height="15" fill="rgb(248,140,14)" fg:x="7007020874" fg:w="18054162"/><text x="32.0841%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (13,039,117 samples, 0.06%)</title><rect x="31.9162%" y="165" width="0.0592%" height="15" fill="rgb(253,22,42)" fg:x="7025075036" fg:w="13039117"/><text x="32.1662%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (19,057,171 samples, 0.09%)</title><rect x="31.9754%" y="165" width="0.0866%" height="15" fill="rgb(234,61,47)" fg:x="7038114153" fg:w="19057171"/><text x="32.2254%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (45,135,405 samples, 0.21%)</title><rect x="31.9162%" y="181" width="0.2051%" height="15" fill="rgb(208,226,15)" fg:x="7025075036" fg:w="45135405"/><text x="32.1662%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5,015,045 samples, 0.02%)</title><rect x="32.1303%" y="165" width="0.0228%" height="15" fill="rgb(217,221,4)" fg:x="7072216459" fg:w="5015045"/><text x="32.3803%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9,027,081 samples, 0.04%)</title><rect x="32.1212%" y="181" width="0.0410%" height="15" fill="rgb(212,174,34)" fg:x="7070210441" fg:w="9027081"/><text x="32.3712%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (73,219,657 samples, 0.33%)</title><rect x="31.9162%" y="229" width="0.3326%" height="15" fill="rgb(253,83,4)" fg:x="7025075036" fg:w="73219657"/><text x="32.1662%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (73,219,657 samples, 0.33%)</title><rect x="31.9162%" y="213" width="0.3326%" height="15" fill="rgb(250,195,49)" fg:x="7025075036" fg:w="73219657"/><text x="32.1662%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (73,219,657 samples, 0.33%)</title><rect x="31.9162%" y="197" width="0.3326%" height="15" fill="rgb(241,192,25)" fg:x="7025075036" fg:w="73219657"/><text x="32.1662%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (457,372,104 samples, 2.08%)</title><rect x="30.1891%" y="261" width="2.0779%" height="15" fill="rgb(208,124,10)" fg:x="6644934625" fg:w="457372104"/><text x="30.4391%" y="271.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (457,372,104 samples, 2.08%)</title><rect x="30.1891%" y="245" width="2.0779%" height="15" fill="rgb(222,33,0)" fg:x="6644934625" fg:w="457372104"/><text x="30.4391%" y="255.50">c..</text></g><g><title>hashbrown::raw::h2 (21,063,189 samples, 0.10%)</title><rect x="32.2761%" y="213" width="0.0957%" height="15" fill="rgb(234,209,28)" fg:x="7104312747" fg:w="21063189"/><text x="32.5261%" y="223.50"></text></g><g><title>hashbrown::raw::is_full (14,042,126 samples, 0.06%)</title><rect x="32.3718%" y="181" width="0.0638%" height="15" fill="rgb(224,11,23)" fg:x="7125375936" fg:w="14042126"/><text x="32.6218%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (15,045,135 samples, 0.07%)</title><rect x="32.3718%" y="213" width="0.0684%" height="15" fill="rgb(232,99,1)" fg:x="7125375936" fg:w="15045135"/><text x="32.6218%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (15,045,135 samples, 0.07%)</title><rect x="32.3718%" y="197" width="0.0684%" height="15" fill="rgb(237,95,45)" fg:x="7125375936" fg:w="15045135"/><text x="32.6218%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (3,009,027 samples, 0.01%)</title><rect x="32.4402%" y="213" width="0.0137%" height="15" fill="rgb(208,109,11)" fg:x="7140421071" fg:w="3009027"/><text x="32.6902%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (3,009,027 samples, 0.01%)</title><rect x="32.4402%" y="197" width="0.0137%" height="15" fill="rgb(216,190,48)" fg:x="7140421071" fg:w="3009027"/><text x="32.6902%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (5,015,045 samples, 0.02%)</title><rect x="32.4539%" y="213" width="0.0228%" height="15" fill="rgb(251,171,36)" fg:x="7143430098" fg:w="5015045"/><text x="32.7039%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (5,015,045 samples, 0.02%)</title><rect x="32.4539%" y="197" width="0.0228%" height="15" fill="rgb(230,62,22)" fg:x="7143430098" fg:w="5015045"/><text x="32.7039%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (522,567,689 samples, 2.37%)</title><rect x="30.1208%" y="405" width="2.3741%" height="15" fill="rgb(225,114,35)" fg:x="6629889490" fg:w="522567689"/><text x="30.3708%" y="415.50">co..</text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (522,567,689 samples, 2.37%)</title><rect x="30.1208%" y="389" width="2.3741%" height="15" fill="rgb(215,118,42)" fg:x="6629889490" fg:w="522567689"/><text x="30.3708%" y="399.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (522,567,689 samples, 2.37%)</title><rect x="30.1208%" y="373" width="2.3741%" height="15" fill="rgb(243,119,21)" fg:x="6629889490" fg:w="522567689"/><text x="30.3708%" y="383.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (522,567,689 samples, 2.37%)</title><rect x="30.1208%" y="357" width="2.3741%" height="15" fill="rgb(252,177,53)" fg:x="6629889490" fg:w="522567689"/><text x="30.3708%" y="367.50">co..</text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (522,567,689 samples, 2.37%)</title><rect x="30.1208%" y="341" width="2.3741%" height="15" fill="rgb(237,209,29)" fg:x="6629889490" fg:w="522567689"/><text x="30.3708%" y="351.50">co..</text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (522,567,689 samples, 2.37%)</title><rect x="30.1208%" y="325" width="2.3741%" height="15" fill="rgb(212,65,23)" fg:x="6629889490" fg:w="522567689"/><text x="30.3708%" y="335.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (522,567,689 samples, 2.37%)</title><rect x="30.1208%" y="309" width="2.3741%" height="15" fill="rgb(230,222,46)" fg:x="6629889490" fg:w="522567689"/><text x="30.3708%" y="319.50">co..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (522,567,689 samples, 2.37%)</title><rect x="30.1208%" y="293" width="2.3741%" height="15" fill="rgb(215,135,32)" fg:x="6629889490" fg:w="522567689"/><text x="30.3708%" y="303.50">&lt;h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (522,567,689 samples, 2.37%)</title><rect x="30.1208%" y="277" width="2.3741%" height="15" fill="rgb(246,101,22)" fg:x="6629889490" fg:w="522567689"/><text x="30.3708%" y="287.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (50,150,450 samples, 0.23%)</title><rect x="32.2670%" y="261" width="0.2278%" height="15" fill="rgb(206,107,13)" fg:x="7102306729" fg:w="50150450"/><text x="32.5170%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (50,150,450 samples, 0.23%)</title><rect x="32.2670%" y="245" width="0.2278%" height="15" fill="rgb(250,100,44)" fg:x="7102306729" fg:w="50150450"/><text x="32.5170%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (50,150,450 samples, 0.23%)</title><rect x="32.2670%" y="229" width="0.2278%" height="15" fill="rgb(231,147,38)" fg:x="7102306729" fg:w="50150450"/><text x="32.5170%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4,012,036 samples, 0.02%)</title><rect x="32.4766%" y="213" width="0.0182%" height="15" fill="rgb(229,8,40)" fg:x="7148445143" fg:w="4012036"/><text x="32.7266%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4,012,036 samples, 0.02%)</title><rect x="32.4766%" y="197" width="0.0182%" height="15" fill="rgb(221,135,30)" fg:x="7148445143" fg:w="4012036"/><text x="32.7266%" y="207.50"></text></g><g><title>core::array::iter::&lt;impl core::iter::traits::collect::IntoIterator for [T: N]&gt;::into_iter (3,009,027 samples, 0.01%)</title><rect x="32.4949%" y="405" width="0.0137%" height="15" fill="rgb(249,193,18)" fg:x="7152457179" fg:w="3009027"/><text x="32.7449%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (692,076,210 samples, 3.14%)</title><rect x="29.4144%" y="437" width="3.1442%" height="15" fill="rgb(209,133,39)" fg:x="6474423095" fg:w="692076210"/><text x="29.6644%" y="447.50">&lt;st..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (692,076,210 samples, 3.14%)</title><rect x="29.4144%" y="421" width="3.1442%" height="15" fill="rgb(232,100,14)" fg:x="6474423095" fg:w="692076210"/><text x="29.6644%" y="431.50">&lt;ha..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V&gt; as core::convert::From&lt;[(K,V): N]&gt;&gt;::from (746,238,696 samples, 3.39%)</title><rect x="29.3051%" y="469" width="3.3903%" height="15" fill="rgb(224,185,1)" fg:x="6450350879" fg:w="746238696"/><text x="29.5551%" y="479.50">&lt;st..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (746,238,696 samples, 3.39%)</title><rect x="29.3051%" y="453" width="3.3903%" height="15" fill="rgb(223,139,8)" fg:x="6450350879" fg:w="746238696"/><text x="29.5551%" y="463.50">&lt;st..</text></g><g><title>chlang::board::Board::is_threefold_rep (6,706,118,174 samples, 30.47%)</title><rect x="2.7614%" y="485" width="30.4671%" height="15" fill="rgb(232,213,38)" fg:x="607823454" fg:w="6706118174"/><text x="3.0114%" y="495.50">chlang::board::Board::is_threefold_rep</text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (5,015,045 samples, 0.02%)</title><rect x="33.2285%" y="469" width="0.0228%" height="15" fill="rgb(207,94,22)" fg:x="7313941628" fg:w="5015045"/><text x="33.4785%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (19,057,171 samples, 0.09%)</title><rect x="33.2513%" y="469" width="0.0866%" height="15" fill="rgb(219,183,54)" fg:x="7318956673" fg:w="19057171"/><text x="33.5013%" y="479.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19,057,171 samples, 0.09%)</title><rect x="33.2513%" y="453" width="0.0866%" height="15" fill="rgb(216,185,54)" fg:x="7318956673" fg:w="19057171"/><text x="33.5013%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (19,057,171 samples, 0.09%)</title><rect x="33.2513%" y="437" width="0.0866%" height="15" fill="rgb(254,217,39)" fg:x="7318956673" fg:w="19057171"/><text x="33.5013%" y="447.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19,057,171 samples, 0.09%)</title><rect x="33.2513%" y="421" width="0.0866%" height="15" fill="rgb(240,178,23)" fg:x="7318956673" fg:w="19057171"/><text x="33.5013%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (19,057,171 samples, 0.09%)</title><rect x="33.2513%" y="405" width="0.0866%" height="15" fill="rgb(218,11,47)" fg:x="7318956673" fg:w="19057171"/><text x="33.5013%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19,057,171 samples, 0.09%)</title><rect x="33.2513%" y="389" width="0.0866%" height="15" fill="rgb(218,51,51)" fg:x="7318956673" fg:w="19057171"/><text x="33.5013%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (19,057,171 samples, 0.09%)</title><rect x="33.2513%" y="373" width="0.0866%" height="15" fill="rgb(238,126,27)" fg:x="7318956673" fg:w="19057171"/><text x="33.5013%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19,057,171 samples, 0.09%)</title><rect x="33.2513%" y="357" width="0.0866%" height="15" fill="rgb(249,202,22)" fg:x="7318956673" fg:w="19057171"/><text x="33.5013%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (19,057,171 samples, 0.09%)</title><rect x="33.2513%" y="341" width="0.0866%" height="15" fill="rgb(254,195,49)" fg:x="7318956673" fg:w="19057171"/><text x="33.5013%" y="351.50"></text></g><g><title>__GI___libc_free (17,051,153 samples, 0.08%)</title><rect x="33.2604%" y="325" width="0.0775%" height="15" fill="rgb(208,123,14)" fg:x="7320962691" fg:w="17051153"/><text x="33.5104%" y="335.50"></text></g><g><title>_int_free (17,051,153 samples, 0.08%)</title><rect x="33.2604%" y="309" width="0.0775%" height="15" fill="rgb(224,200,8)" fg:x="7320962691" fg:w="17051153"/><text x="33.5104%" y="319.50"></text></g><g><title>core::ptr::read (61,183,549 samples, 0.28%)</title><rect x="33.3379%" y="437" width="0.2780%" height="15" fill="rgb(217,61,36)" fg:x="7338013844" fg:w="61183549"/><text x="33.5879%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (74,222,666 samples, 0.34%)</title><rect x="33.3379%" y="453" width="0.3372%" height="15" fill="rgb(206,35,45)" fg:x="7338013844" fg:w="74222666"/><text x="33.5879%" y="463.50"></text></g><g><title>chlang::board::Board::unmake_last (120,361,080 samples, 0.55%)</title><rect x="33.3379%" y="469" width="0.5468%" height="15" fill="rgb(217,65,33)" fg:x="7338013844" fg:w="120361080"/><text x="33.5879%" y="479.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (23,069,207 samples, 0.10%)</title><rect x="33.8847%" y="389" width="0.1048%" height="15" fill="rgb(222,158,48)" fg:x="7458374924" fg:w="23069207"/><text x="34.1347%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (49,147,441 samples, 0.22%)</title><rect x="33.8847%" y="405" width="0.2233%" height="15" fill="rgb(254,2,54)" fg:x="7458374924" fg:w="49147441"/><text x="34.1347%" y="415.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (56,168,504 samples, 0.26%)</title><rect x="34.1080%" y="405" width="0.2552%" height="15" fill="rgb(250,143,38)" fg:x="7507522365" fg:w="56168504"/><text x="34.3580%" y="415.50"></text></g><g><title>&lt;chlang::cmove::Move as core::cmp::PartialEq&gt;::eq (56,168,504 samples, 0.26%)</title><rect x="34.1080%" y="389" width="0.2552%" height="15" fill="rgb(248,25,0)" fg:x="7507522365" fg:w="56168504"/><text x="34.3580%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (110,330,990 samples, 0.50%)</title><rect x="33.8847%" y="453" width="0.5013%" height="15" fill="rgb(206,152,27)" fg:x="7458374924" fg:w="110330990"/><text x="34.1347%" y="463.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (110,330,990 samples, 0.50%)</title><rect x="33.8847%" y="437" width="0.5013%" height="15" fill="rgb(240,77,30)" fg:x="7458374924" fg:w="110330990"/><text x="34.1347%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (110,330,990 samples, 0.50%)</title><rect x="33.8847%" y="421" width="0.5013%" height="15" fill="rgb(231,5,3)" fg:x="7458374924" fg:w="110330990"/><text x="34.1347%" y="431.50"></text></g><g><title>__rust_dealloc (41,123,369 samples, 0.19%)</title><rect x="34.3905%" y="357" width="0.1868%" height="15" fill="rgb(207,226,32)" fg:x="7569708923" fg:w="41123369"/><text x="34.6405%" y="367.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (37,111,333 samples, 0.17%)</title><rect x="34.5774%" y="341" width="0.1686%" height="15" fill="rgb(222,207,47)" fg:x="7610832292" fg:w="37111333"/><text x="34.8274%" y="351.50"></text></g><g><title>__rdl_dealloc (43,129,387 samples, 0.20%)</title><rect x="34.5774%" y="357" width="0.1959%" height="15" fill="rgb(229,115,45)" fg:x="7610832292" fg:w="43129387"/><text x="34.8274%" y="367.50"></text></g><g><title>tcache_put (19,057,171 samples, 0.09%)</title><rect x="34.7733%" y="325" width="0.0866%" height="15" fill="rgb(224,191,6)" fg:x="7653961679" fg:w="19057171"/><text x="35.0233%" y="335.50"></text></g><g><title>_int_free (137,412,233 samples, 0.62%)</title><rect x="34.7733%" y="341" width="0.6243%" height="15" fill="rgb(230,227,24)" fg:x="7653961679" fg:w="137412233"/><text x="35.0233%" y="351.50"></text></g><g><title>__GI___libc_free (183,550,647 samples, 0.83%)</title><rect x="34.7733%" y="357" width="0.8339%" height="15" fill="rgb(228,80,19)" fg:x="7653961679" fg:w="183550647"/><text x="35.0233%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (270,812,430 samples, 1.23%)</title><rect x="34.3860%" y="405" width="1.2303%" height="15" fill="rgb(247,229,0)" fg:x="7568705914" fg:w="270812430"/><text x="34.6360%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (269,809,421 samples, 1.23%)</title><rect x="34.3905%" y="389" width="1.2258%" height="15" fill="rgb(237,194,15)" fg:x="7569708923" fg:w="269809421"/><text x="34.6405%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (269,809,421 samples, 1.23%)</title><rect x="34.3905%" y="373" width="1.2258%" height="15" fill="rgb(219,203,20)" fg:x="7569708923" fg:w="269809421"/><text x="34.6405%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (272,818,448 samples, 1.24%)</title><rect x="34.3860%" y="453" width="1.2395%" height="15" fill="rgb(234,128,8)" fg:x="7568705914" fg:w="272818448"/><text x="34.6360%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (272,818,448 samples, 1.24%)</title><rect x="34.3860%" y="437" width="1.2395%" height="15" fill="rgb(248,202,8)" fg:x="7568705914" fg:w="272818448"/><text x="34.6360%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (272,818,448 samples, 1.24%)</title><rect x="34.3860%" y="421" width="1.2395%" height="15" fill="rgb(206,104,37)" fg:x="7568705914" fg:w="272818448"/><text x="34.6360%" y="431.50"></text></g><g><title>chlang::cmove::Move::to (13,039,117 samples, 0.06%)</title><rect x="35.6254%" y="453" width="0.0592%" height="15" fill="rgb(223,8,27)" fg:x="7841524362" fg:w="13039117"/><text x="35.8754%" y="463.50"></text></g><g><title>chlang::cmove::Move::from (6,018,054 samples, 0.03%)</title><rect x="35.6847%" y="453" width="0.0273%" height="15" fill="rgb(216,217,28)" fg:x="7854563479" fg:w="6018054"/><text x="35.9347%" y="463.50"></text></g><g><title>chlang::board::Position::bitboard (15,045,135 samples, 0.07%)</title><rect x="35.7120%" y="453" width="0.0684%" height="15" fill="rgb(249,199,1)" fg:x="7860581533" fg:w="15045135"/><text x="35.9620%" y="463.50"></text></g><g><title>core::ptr::read (8,024,072 samples, 0.04%)</title><rect x="35.7804%" y="421" width="0.0365%" height="15" fill="rgb(240,85,17)" fg:x="7875626668" fg:w="8024072"/><text x="36.0304%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (9,027,081 samples, 0.04%)</title><rect x="35.7804%" y="437" width="0.0410%" height="15" fill="rgb(206,108,45)" fg:x="7875626668" fg:w="9027081"/><text x="36.0304%" y="447.50"></text></g><g><title>chlang::board::Board::unmake_last (14,042,126 samples, 0.06%)</title><rect x="35.7804%" y="453" width="0.0638%" height="15" fill="rgb(245,210,41)" fg:x="7875626668" fg:w="14042126"/><text x="36.0304%" y="463.50"></text></g><g><title>chlang::board::Position::bitboard (5,015,045 samples, 0.02%)</title><rect x="35.8442%" y="437" width="0.0228%" height="15" fill="rgb(206,13,37)" fg:x="7889668794" fg:w="5015045"/><text x="36.0942%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,030,090 samples, 0.05%)</title><rect x="35.8669%" y="437" width="0.0456%" height="15" fill="rgb(250,61,18)" fg:x="7894683839" fg:w="10030090"/><text x="36.1169%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (10,030,090 samples, 0.05%)</title><rect x="35.8669%" y="421" width="0.0456%" height="15" fill="rgb(235,172,48)" fg:x="7894683839" fg:w="10030090"/><text x="36.1169%" y="431.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,030,090 samples, 0.05%)</title><rect x="35.8669%" y="405" width="0.0456%" height="15" fill="rgb(249,201,17)" fg:x="7894683839" fg:w="10030090"/><text x="36.1169%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (10,030,090 samples, 0.05%)</title><rect x="35.8669%" y="389" width="0.0456%" height="15" fill="rgb(219,208,6)" fg:x="7894683839" fg:w="10030090"/><text x="36.1169%" y="399.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (10,030,090 samples, 0.05%)</title><rect x="35.8669%" y="373" width="0.0456%" height="15" fill="rgb(248,31,23)" fg:x="7894683839" fg:w="10030090"/><text x="36.1169%" y="383.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (10,030,090 samples, 0.05%)</title><rect x="35.8669%" y="357" width="0.0456%" height="15" fill="rgb(245,15,42)" fg:x="7894683839" fg:w="10030090"/><text x="36.1169%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (10,030,090 samples, 0.05%)</title><rect x="35.8669%" y="341" width="0.0456%" height="15" fill="rgb(222,217,39)" fg:x="7894683839" fg:w="10030090"/><text x="36.1169%" y="351.50"></text></g><g><title>core::ptr::read (10,030,090 samples, 0.05%)</title><rect x="35.8669%" y="325" width="0.0456%" height="15" fill="rgb(210,219,27)" fg:x="7894683839" fg:w="10030090"/><text x="36.1169%" y="335.50"></text></g><g><title>&lt;&amp;u64 as core::ops::bit::BitAnd&lt;u64&gt;&gt;::bitand (6,018,054 samples, 0.03%)</title><rect x="35.9125%" y="437" width="0.0273%" height="15" fill="rgb(252,166,36)" fg:x="7904713929" fg:w="6018054"/><text x="36.1625%" y="447.50"></text></g><g><title>chlang::board::Board::piece_type (202,607,818 samples, 0.92%)</title><rect x="35.8442%" y="453" width="0.9205%" height="15" fill="rgb(245,132,34)" fg:x="7889668794" fg:w="202607818"/><text x="36.0942%" y="463.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (5,015,045 samples, 0.02%)</title><rect x="36.7646%" y="437" width="0.0228%" height="15" fill="rgb(236,54,3)" fg:x="8092276612" fg:w="5015045"/><text x="37.0146%" y="447.50"></text></g><g><title>&lt;chlang::board::Player as core::clone::Clone&gt;::clone (57,171,513 samples, 0.26%)</title><rect x="36.7874%" y="437" width="0.2597%" height="15" fill="rgb(241,173,43)" fg:x="8097291657" fg:w="57171513"/><text x="37.0374%" y="447.50"></text></g><g><title>chlang::board::Board::key (103,309,927 samples, 0.47%)</title><rect x="36.7646%" y="453" width="0.4694%" height="15" fill="rgb(215,190,9)" fg:x="8092276612" fg:w="103309927"/><text x="37.0146%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (13,039,117 samples, 0.06%)</title><rect x="37.2340%" y="309" width="0.0592%" height="15" fill="rgb(242,101,16)" fg:x="8195586539" fg:w="13039117"/><text x="37.4840%" y="319.50"></text></g><g><title>__rust_dealloc (156,469,404 samples, 0.71%)</title><rect x="37.2932%" y="277" width="0.7109%" height="15" fill="rgb(223,190,21)" fg:x="8208625656" fg:w="156469404"/><text x="37.5432%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (130,391,170 samples, 0.59%)</title><rect x="38.0041%" y="261" width="0.5924%" height="15" fill="rgb(215,228,25)" fg:x="8365095060" fg:w="130391170"/><text x="38.2541%" y="271.50"></text></g><g><title>__rdl_dealloc (160,481,440 samples, 0.73%)</title><rect x="38.0041%" y="277" width="0.7291%" height="15" fill="rgb(225,36,22)" fg:x="8365095060" fg:w="160481440"/><text x="38.2541%" y="287.50"></text></g><g><title>tcache_put (107,321,963 samples, 0.49%)</title><rect x="38.7423%" y="245" width="0.4876%" height="15" fill="rgb(251,106,46)" fg:x="8527582518" fg:w="107321963"/><text x="38.9923%" y="255.50"></text></g><g><title>_int_free (523,570,698 samples, 2.38%)</title><rect x="38.7423%" y="261" width="2.3787%" height="15" fill="rgb(208,90,1)" fg:x="8527582518" fg:w="523570698"/><text x="38.9923%" y="271.50">_i..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (1,039,117,324 samples, 4.72%)</title><rect x="37.2340%" y="421" width="4.7209%" height="15" fill="rgb(243,10,4)" fg:x="8195586539" fg:w="1039117324"/><text x="37.4840%" y="431.50">core::..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,039,117,324 samples, 4.72%)</title><rect x="37.2340%" y="405" width="4.7209%" height="15" fill="rgb(212,137,27)" fg:x="8195586539" fg:w="1039117324"/><text x="37.4840%" y="415.50">&lt;alloc..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (1,039,117,324 samples, 4.72%)</title><rect x="37.2340%" y="389" width="4.7209%" height="15" fill="rgb(231,220,49)" fg:x="8195586539" fg:w="1039117324"/><text x="37.4840%" y="399.50">core::..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,039,117,324 samples, 4.72%)</title><rect x="37.2340%" y="373" width="4.7209%" height="15" fill="rgb(237,96,20)" fg:x="8195586539" fg:w="1039117324"/><text x="37.4840%" y="383.50">&lt;&lt;allo..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (1,039,117,324 samples, 4.72%)</title><rect x="37.2340%" y="357" width="4.7209%" height="15" fill="rgb(239,229,30)" fg:x="8195586539" fg:w="1039117324"/><text x="37.4840%" y="367.50">core::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,039,117,324 samples, 4.72%)</title><rect x="37.2340%" y="341" width="4.7209%" height="15" fill="rgb(219,65,33)" fg:x="8195586539" fg:w="1039117324"/><text x="37.4840%" y="351.50">&lt;alloc..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,039,117,324 samples, 4.72%)</title><rect x="37.2340%" y="325" width="4.7209%" height="15" fill="rgb(243,134,7)" fg:x="8195586539" fg:w="1039117324"/><text x="37.4840%" y="335.50">alloc:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,026,078,207 samples, 4.66%)</title><rect x="37.2932%" y="309" width="4.6617%" height="15" fill="rgb(216,177,54)" fg:x="8208625656" fg:w="1026078207"/><text x="37.5432%" y="319.50">&lt;allo..</text></g><g><title>alloc::alloc::dealloc (1,026,078,207 samples, 4.66%)</title><rect x="37.2932%" y="293" width="4.6617%" height="15" fill="rgb(211,160,20)" fg:x="8208625656" fg:w="1026078207"/><text x="37.5432%" y="303.50">alloc..</text></g><g><title>__GI___libc_free (709,127,363 samples, 3.22%)</title><rect x="38.7332%" y="277" width="3.2217%" height="15" fill="rgb(239,85,39)" fg:x="8525576500" fg:w="709127363"/><text x="38.9832%" y="287.50">__G..</text></g><g><title>core::option::Option&lt;T&gt;::is_some_and (31,093,279 samples, 0.14%)</title><rect x="41.9549%" y="421" width="0.1413%" height="15" fill="rgb(232,125,22)" fg:x="9234703863" fg:w="31093279"/><text x="42.2049%" y="431.50"></text></g><g><title>chlang::cmove::Move::to (88,264,792 samples, 0.40%)</title><rect x="42.0961%" y="421" width="0.4010%" height="15" fill="rgb(244,57,34)" fg:x="9265797142" fg:w="88264792"/><text x="42.3461%" y="431.50"></text></g><g><title>chlang::board::Position::bitboard (10,030,090 samples, 0.05%)</title><rect x="42.4972%" y="405" width="0.0456%" height="15" fill="rgb(214,203,32)" fg:x="9354061934" fg:w="10030090"/><text x="42.7472%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,012,036 samples, 0.02%)</title><rect x="42.5427%" y="405" width="0.0182%" height="15" fill="rgb(207,58,43)" fg:x="9364092024" fg:w="4012036"/><text x="42.7927%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (4,012,036 samples, 0.02%)</title><rect x="42.5427%" y="389" width="0.0182%" height="15" fill="rgb(215,193,15)" fg:x="9364092024" fg:w="4012036"/><text x="42.7927%" y="399.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,012,036 samples, 0.02%)</title><rect x="42.5427%" y="373" width="0.0182%" height="15" fill="rgb(232,15,44)" fg:x="9364092024" fg:w="4012036"/><text x="42.7927%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4,012,036 samples, 0.02%)</title><rect x="42.5427%" y="357" width="0.0182%" height="15" fill="rgb(212,3,48)" fg:x="9364092024" fg:w="4012036"/><text x="42.7927%" y="367.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (4,012,036 samples, 0.02%)</title><rect x="42.5427%" y="341" width="0.0182%" height="15" fill="rgb(218,128,7)" fg:x="9364092024" fg:w="4012036"/><text x="42.7927%" y="351.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (4,012,036 samples, 0.02%)</title><rect x="42.5427%" y="325" width="0.0182%" height="15" fill="rgb(226,216,39)" fg:x="9364092024" fg:w="4012036"/><text x="42.7927%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (4,012,036 samples, 0.02%)</title><rect x="42.5427%" y="309" width="0.0182%" height="15" fill="rgb(243,47,51)" fg:x="9364092024" fg:w="4012036"/><text x="42.7927%" y="319.50"></text></g><g><title>core::ptr::read (4,012,036 samples, 0.02%)</title><rect x="42.5427%" y="293" width="0.0182%" height="15" fill="rgb(241,183,40)" fg:x="9364092024" fg:w="4012036"/><text x="42.7927%" y="303.50"></text></g><g><title>chlang::board::Board::piece_type (259,779,331 samples, 1.18%)</title><rect x="42.4972%" y="421" width="1.1802%" height="15" fill="rgb(231,217,32)" fg:x="9354061934" fg:w="259779331"/><text x="42.7472%" y="431.50"></text></g><g><title>chlang::board::Position::valid (62,186,558 samples, 0.28%)</title><rect x="43.6774%" y="405" width="0.2825%" height="15" fill="rgb(229,61,38)" fg:x="9613841265" fg:w="62186558"/><text x="43.9274%" y="415.50"></text></g><g><title>chlang::board::Position::bitboard (36,108,324 samples, 0.16%)</title><rect x="43.9599%" y="405" width="0.1640%" height="15" fill="rgb(225,210,5)" fg:x="9676027823" fg:w="36108324"/><text x="44.2099%" y="415.50"></text></g><g><title>__rust_alloc (13,039,117 samples, 0.06%)</title><rect x="44.1239%" y="277" width="0.0592%" height="15" fill="rgb(231,79,45)" fg:x="9712136147" fg:w="13039117"/><text x="44.3739%" y="287.50"></text></g><g><title>__rdl_alloc (7,021,063 samples, 0.03%)</title><rect x="44.1832%" y="277" width="0.0319%" height="15" fill="rgb(224,100,7)" fg:x="9725175264" fg:w="7021063"/><text x="44.4332%" y="287.50"></text></g><g><title>tcache_get (30,090,270 samples, 0.14%)</title><rect x="44.2151%" y="261" width="0.1367%" height="15" fill="rgb(241,198,18)" fg:x="9732196327" fg:w="30090270"/><text x="44.4651%" y="271.50"></text></g><g><title>checked_request2size (3,009,027 samples, 0.01%)</title><rect x="44.3518%" y="261" width="0.0137%" height="15" fill="rgb(252,97,53)" fg:x="9762286597" fg:w="3009027"/><text x="44.6018%" y="271.50"></text></g><g><title>__GI___libc_malloc (127,382,143 samples, 0.58%)</title><rect x="44.2151%" y="277" width="0.5787%" height="15" fill="rgb(220,88,7)" fg:x="9732196327" fg:w="127382143"/><text x="44.4651%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (148,445,332 samples, 0.67%)</title><rect x="44.1239%" y="325" width="0.6744%" height="15" fill="rgb(213,176,14)" fg:x="9712136147" fg:w="148445332"/><text x="44.3739%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (148,445,332 samples, 0.67%)</title><rect x="44.1239%" y="309" width="0.6744%" height="15" fill="rgb(246,73,7)" fg:x="9712136147" fg:w="148445332"/><text x="44.3739%" y="319.50"></text></g><g><title>alloc::alloc::alloc (148,445,332 samples, 0.67%)</title><rect x="44.1239%" y="293" width="0.6744%" height="15" fill="rgb(245,64,36)" fg:x="9712136147" fg:w="148445332"/><text x="44.3739%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (173,520,557 samples, 0.79%)</title><rect x="44.1239%" y="373" width="0.7883%" height="15" fill="rgb(245,80,10)" fg:x="9712136147" fg:w="173520557"/><text x="44.3739%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (173,520,557 samples, 0.79%)</title><rect x="44.1239%" y="357" width="0.7883%" height="15" fill="rgb(232,107,50)" fg:x="9712136147" fg:w="173520557"/><text x="44.3739%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (173,520,557 samples, 0.79%)</title><rect x="44.1239%" y="341" width="0.7883%" height="15" fill="rgb(253,3,0)" fg:x="9712136147" fg:w="173520557"/><text x="44.3739%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (175,526,575 samples, 0.80%)</title><rect x="44.1239%" y="405" width="0.7974%" height="15" fill="rgb(212,99,53)" fg:x="9712136147" fg:w="175526575"/><text x="44.3739%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (175,526,575 samples, 0.80%)</title><rect x="44.1239%" y="389" width="0.7974%" height="15" fill="rgb(249,111,54)" fg:x="9712136147" fg:w="175526575"/><text x="44.3739%" y="399.50"></text></g><g><title>core::ptr::write (13,039,117 samples, 0.06%)</title><rect x="44.9214%" y="389" width="0.0592%" height="15" fill="rgb(249,55,30)" fg:x="9887662722" fg:w="13039117"/><text x="45.1714%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (5,015,045 samples, 0.02%)</title><rect x="44.9806%" y="389" width="0.0228%" height="15" fill="rgb(237,47,42)" fg:x="9900701839" fg:w="5015045"/><text x="45.2306%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5,015,045 samples, 0.02%)</title><rect x="44.9806%" y="373" width="0.0228%" height="15" fill="rgb(211,20,18)" fg:x="9900701839" fg:w="5015045"/><text x="45.2306%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (5,015,045 samples, 0.02%)</title><rect x="44.9806%" y="357" width="0.0228%" height="15" fill="rgb(231,203,46)" fg:x="9900701839" fg:w="5015045"/><text x="45.2306%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (5,015,045 samples, 0.02%)</title><rect x="44.9806%" y="341" width="0.0228%" height="15" fill="rgb(237,142,3)" fg:x="9900701839" fg:w="5015045"/><text x="45.2306%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (148,445,332 samples, 0.67%)</title><rect x="44.9214%" y="405" width="0.6744%" height="15" fill="rgb(241,107,1)" fg:x="9887662722" fg:w="148445332"/><text x="45.1714%" y="415.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&lt;&amp;i64&gt;&gt;::add (9,027,081 samples, 0.04%)</title><rect x="45.5958%" y="405" width="0.0410%" height="15" fill="rgb(229,83,13)" fg:x="10036108054" fg:w="9027081"/><text x="45.8458%" y="415.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (9,027,081 samples, 0.04%)</title><rect x="45.5958%" y="389" width="0.0410%" height="15" fill="rgb(241,91,40)" fg:x="10036108054" fg:w="9027081"/><text x="45.8458%" y="399.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (638,916,733 samples, 2.90%)</title><rect x="43.6774%" y="421" width="2.9027%" height="15" fill="rgb(225,3,45)" fg:x="9613841265" fg:w="638916733"/><text x="43.9274%" y="431.50">ch..</text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (9,027,081 samples, 0.04%)</title><rect x="46.5801%" y="309" width="0.0410%" height="15" fill="rgb(244,223,14)" fg:x="10252757998" fg:w="9027081"/><text x="46.8301%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (10,030,090 samples, 0.05%)</title><rect x="46.5801%" y="325" width="0.0456%" height="15" fill="rgb(224,124,37)" fg:x="10252757998" fg:w="10030090"/><text x="46.8301%" y="335.50"></text></g><g><title>__rust_dealloc (31,093,279 samples, 0.14%)</title><rect x="46.6257%" y="293" width="0.1413%" height="15" fill="rgb(251,171,30)" fg:x="10262788088" fg:w="31093279"/><text x="46.8757%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (26,078,234 samples, 0.12%)</title><rect x="46.7669%" y="277" width="0.1185%" height="15" fill="rgb(236,46,54)" fg:x="10293881367" fg:w="26078234"/><text x="47.0169%" y="287.50"></text></g><g><title>__rdl_dealloc (32,096,288 samples, 0.15%)</title><rect x="46.7669%" y="293" width="0.1458%" height="15" fill="rgb(245,213,5)" fg:x="10293881367" fg:w="32096288"/><text x="47.0169%" y="303.50"></text></g><g><title>tcache_put (28,084,252 samples, 0.13%)</title><rect x="46.9173%" y="261" width="0.1276%" height="15" fill="rgb(230,144,27)" fg:x="10326980664" fg:w="28084252"/><text x="47.1673%" y="271.50"></text></g><g><title>_int_free (105,315,945 samples, 0.48%)</title><rect x="46.9173%" y="277" width="0.4785%" height="15" fill="rgb(220,86,6)" fg:x="10326980664" fg:w="105315945"/><text x="47.1673%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (225,677,025 samples, 1.03%)</title><rect x="46.5801%" y="341" width="1.0253%" height="15" fill="rgb(240,20,13)" fg:x="10252757998" fg:w="225677025"/><text x="46.8301%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (215,646,935 samples, 0.98%)</title><rect x="46.6257%" y="325" width="0.9797%" height="15" fill="rgb(217,89,34)" fg:x="10262788088" fg:w="215646935"/><text x="46.8757%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (215,646,935 samples, 0.98%)</title><rect x="46.6257%" y="309" width="0.9797%" height="15" fill="rgb(229,13,5)" fg:x="10262788088" fg:w="215646935"/><text x="46.8757%" y="319.50"></text></g><g><title>__GI___libc_free (152,457,368 samples, 0.69%)</title><rect x="46.9127%" y="293" width="0.6926%" height="15" fill="rgb(244,67,35)" fg:x="10325977655" fg:w="152457368"/><text x="47.1627%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (241,725,169 samples, 1.10%)</title><rect x="46.5801%" y="405" width="1.0982%" height="15" fill="rgb(221,40,2)" fg:x="10252757998" fg:w="241725169"/><text x="46.8301%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (241,725,169 samples, 1.10%)</title><rect x="46.5801%" y="389" width="1.0982%" height="15" fill="rgb(237,157,21)" fg:x="10252757998" fg:w="241725169"/><text x="46.8301%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (241,725,169 samples, 1.10%)</title><rect x="46.5801%" y="373" width="1.0982%" height="15" fill="rgb(222,94,11)" fg:x="10252757998" fg:w="241725169"/><text x="46.8301%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (241,725,169 samples, 1.10%)</title><rect x="46.5801%" y="357" width="1.0982%" height="15" fill="rgb(249,113,6)" fg:x="10252757998" fg:w="241725169"/><text x="46.8301%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some_and (18,054,162 samples, 0.08%)</title><rect x="47.6783%" y="405" width="0.0820%" height="15" fill="rgb(238,137,36)" fg:x="10494483167" fg:w="18054162"/><text x="47.9283%" y="415.50"></text></g><g><title>chlang::board::Position::valid (9,027,081 samples, 0.04%)</title><rect x="47.7649%" y="405" width="0.0410%" height="15" fill="rgb(210,102,26)" fg:x="10513540338" fg:w="9027081"/><text x="48.0149%" y="415.50"></text></g><g><title>chlang::board::Position::bitboard (9,027,081 samples, 0.04%)</title><rect x="47.8059%" y="405" width="0.0410%" height="15" fill="rgb(218,30,30)" fg:x="10522567419" fg:w="9027081"/><text x="48.0559%" y="415.50"></text></g><g><title>__rust_alloc (30,090,270 samples, 0.14%)</title><rect x="47.8469%" y="277" width="0.1367%" height="15" fill="rgb(214,67,26)" fg:x="10531594500" fg:w="30090270"/><text x="48.0969%" y="287.50"></text></g><g><title>__rdl_alloc (15,045,135 samples, 0.07%)</title><rect x="47.9836%" y="277" width="0.0684%" height="15" fill="rgb(251,9,53)" fg:x="10561684770" fg:w="15045135"/><text x="48.2336%" y="287.50"></text></g><g><title>tcache_get (40,120,360 samples, 0.18%)</title><rect x="48.0519%" y="261" width="0.1823%" height="15" fill="rgb(228,204,25)" fg:x="10576729905" fg:w="40120360"/><text x="48.3019%" y="271.50"></text></g><g><title>checked_request2size (7,021,063 samples, 0.03%)</title><rect x="48.2342%" y="261" width="0.0319%" height="15" fill="rgb(207,153,8)" fg:x="10616850265" fg:w="7021063"/><text x="48.4842%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (186,559,674 samples, 0.85%)</title><rect x="47.8469%" y="325" width="0.8476%" height="15" fill="rgb(242,9,16)" fg:x="10531594500" fg:w="186559674"/><text x="48.0969%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (186,559,674 samples, 0.85%)</title><rect x="47.8469%" y="309" width="0.8476%" height="15" fill="rgb(217,211,10)" fg:x="10531594500" fg:w="186559674"/><text x="48.0969%" y="319.50"></text></g><g><title>alloc::alloc::alloc (186,559,674 samples, 0.85%)</title><rect x="47.8469%" y="293" width="0.8476%" height="15" fill="rgb(219,228,52)" fg:x="10531594500" fg:w="186559674"/><text x="48.0969%" y="303.50"></text></g><g><title>__GI___libc_malloc (141,424,269 samples, 0.64%)</title><rect x="48.0519%" y="277" width="0.6425%" height="15" fill="rgb(231,92,29)" fg:x="10576729905" fg:w="141424269"/><text x="48.3019%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (196,589,764 samples, 0.89%)</title><rect x="47.8469%" y="405" width="0.8931%" height="15" fill="rgb(232,8,23)" fg:x="10531594500" fg:w="196589764"/><text x="48.0969%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (196,589,764 samples, 0.89%)</title><rect x="47.8469%" y="389" width="0.8931%" height="15" fill="rgb(216,211,34)" fg:x="10531594500" fg:w="196589764"/><text x="48.0969%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (196,589,764 samples, 0.89%)</title><rect x="47.8469%" y="373" width="0.8931%" height="15" fill="rgb(236,151,0)" fg:x="10531594500" fg:w="196589764"/><text x="48.0969%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (196,589,764 samples, 0.89%)</title><rect x="47.8469%" y="357" width="0.8931%" height="15" fill="rgb(209,168,3)" fg:x="10531594500" fg:w="196589764"/><text x="48.0969%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (196,589,764 samples, 0.89%)</title><rect x="47.8469%" y="341" width="0.8931%" height="15" fill="rgb(208,129,28)" fg:x="10531594500" fg:w="196589764"/><text x="48.0969%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (12,036,108 samples, 0.05%)</title><rect x="48.7400%" y="405" width="0.0547%" height="15" fill="rgb(229,78,22)" fg:x="10728184264" fg:w="12036108"/><text x="48.9900%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,012,036 samples, 0.02%)</title><rect x="48.7947%" y="405" width="0.0182%" height="15" fill="rgb(228,187,13)" fg:x="10740220372" fg:w="4012036"/><text x="49.0447%" y="415.50"></text></g><g><title>core::ptr::write (4,012,036 samples, 0.02%)</title><rect x="48.7947%" y="389" width="0.0182%" height="15" fill="rgb(240,119,24)" fg:x="10740220372" fg:w="4012036"/><text x="49.0447%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (30,090,270 samples, 0.14%)</title><rect x="48.8129%" y="373" width="0.1367%" height="15" fill="rgb(209,194,42)" fg:x="10744232408" fg:w="30090270"/><text x="49.0629%" y="383.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (30,090,270 samples, 0.14%)</title><rect x="48.8129%" y="357" width="0.1367%" height="15" fill="rgb(247,200,46)" fg:x="10744232408" fg:w="30090270"/><text x="49.0629%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (30,090,270 samples, 0.14%)</title><rect x="48.8129%" y="341" width="0.1367%" height="15" fill="rgb(218,76,16)" fg:x="10744232408" fg:w="30090270"/><text x="49.0629%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (30,090,270 samples, 0.14%)</title><rect x="48.8129%" y="325" width="0.1367%" height="15" fill="rgb(225,21,48)" fg:x="10744232408" fg:w="30090270"/><text x="49.0629%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (14,042,126 samples, 0.06%)</title><rect x="48.9496%" y="261" width="0.0638%" height="15" fill="rgb(239,223,50)" fg:x="10774322678" fg:w="14042126"/><text x="49.1996%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (14,042,126 samples, 0.06%)</title><rect x="48.9496%" y="245" width="0.0638%" height="15" fill="rgb(244,45,21)" fg:x="10774322678" fg:w="14042126"/><text x="49.1996%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (14,042,126 samples, 0.06%)</title><rect x="48.9496%" y="229" width="0.0638%" height="15" fill="rgb(232,33,43)" fg:x="10774322678" fg:w="14042126"/><text x="49.1996%" y="239.50"></text></g><g><title>alloc::raw_vec::layout_array (25,075,225 samples, 0.11%)</title><rect x="48.9496%" y="293" width="0.1139%" height="15" fill="rgb(209,8,3)" fg:x="10774322678" fg:w="25075225"/><text x="49.1996%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::repeat (25,075,225 samples, 0.11%)</title><rect x="48.9496%" y="277" width="0.1139%" height="15" fill="rgb(214,25,53)" fg:x="10774322678" fg:w="25075225"/><text x="49.1996%" y="287.50"></text></g><g><title>__rust_alloc (33,099,297 samples, 0.15%)</title><rect x="49.0636%" y="245" width="0.1504%" height="15" fill="rgb(254,186,54)" fg:x="10799397903" fg:w="33099297"/><text x="49.3136%" y="255.50"></text></g><g><title>__rdl_alloc (8,024,072 samples, 0.04%)</title><rect x="49.2139%" y="245" width="0.0365%" height="15" fill="rgb(208,174,49)" fg:x="10832497200" fg:w="8024072"/><text x="49.4639%" y="255.50"></text></g><g><title>tcache_get (26,078,234 samples, 0.12%)</title><rect x="49.2504%" y="229" width="0.1185%" height="15" fill="rgb(233,191,51)" fg:x="10840521272" fg:w="26078234"/><text x="49.5004%" y="239.50"></text></g><g><title>checked_request2size (5,015,045 samples, 0.02%)</title><rect x="49.3689%" y="229" width="0.0228%" height="15" fill="rgb(222,134,10)" fg:x="10866599506" fg:w="5015045"/><text x="49.6189%" y="239.50"></text></g><g><title>__GI___libc_malloc (85,255,765 samples, 0.39%)</title><rect x="49.2504%" y="245" width="0.3873%" height="15" fill="rgb(230,226,20)" fg:x="10840521272" fg:w="85255765"/><text x="49.5004%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (129,388,161 samples, 0.59%)</title><rect x="49.0636%" y="293" width="0.5878%" height="15" fill="rgb(251,111,25)" fg:x="10799397903" fg:w="129388161"/><text x="49.3136%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (129,388,161 samples, 0.59%)</title><rect x="49.0636%" y="277" width="0.5878%" height="15" fill="rgb(224,40,46)" fg:x="10799397903" fg:w="129388161"/><text x="49.3136%" y="287.50"></text></g><g><title>alloc::alloc::alloc (129,388,161 samples, 0.59%)</title><rect x="49.0636%" y="261" width="0.5878%" height="15" fill="rgb(236,108,47)" fg:x="10799397903" fg:w="129388161"/><text x="49.3136%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (160,481,440 samples, 0.73%)</title><rect x="48.9496%" y="341" width="0.7291%" height="15" fill="rgb(234,93,0)" fg:x="10774322678" fg:w="160481440"/><text x="49.1996%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (160,481,440 samples, 0.73%)</title><rect x="48.9496%" y="325" width="0.7291%" height="15" fill="rgb(224,213,32)" fg:x="10774322678" fg:w="160481440"/><text x="49.1996%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (160,481,440 samples, 0.73%)</title><rect x="48.9496%" y="309" width="0.7291%" height="15" fill="rgb(251,11,48)" fg:x="10774322678" fg:w="160481440"/><text x="49.1996%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (164,493,476 samples, 0.75%)</title><rect x="48.9496%" y="373" width="0.7473%" height="15" fill="rgb(236,173,5)" fg:x="10774322678" fg:w="164493476"/><text x="49.1996%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (164,493,476 samples, 0.75%)</title><rect x="48.9496%" y="357" width="0.7473%" height="15" fill="rgb(230,95,12)" fg:x="10774322678" fg:w="164493476"/><text x="49.1996%" y="367.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (3,009,027 samples, 0.01%)</title><rect x="49.7015%" y="245" width="0.0137%" height="15" fill="rgb(232,209,1)" fg:x="10939819163" fg:w="3009027"/><text x="49.9515%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3,009,027 samples, 0.01%)</title><rect x="49.7015%" y="229" width="0.0137%" height="15" fill="rgb(232,6,1)" fg:x="10939819163" fg:w="3009027"/><text x="49.9515%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (3,009,027 samples, 0.01%)</title><rect x="49.7015%" y="213" width="0.0137%" height="15" fill="rgb(210,224,50)" fg:x="10939819163" fg:w="3009027"/><text x="49.9515%" y="223.50"></text></g><g><title>core::ptr::write (3,009,027 samples, 0.01%)</title><rect x="49.7015%" y="197" width="0.0137%" height="15" fill="rgb(228,127,35)" fg:x="10939819163" fg:w="3009027"/><text x="49.9515%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (11,033,099 samples, 0.05%)</title><rect x="49.6970%" y="309" width="0.0501%" height="15" fill="rgb(245,102,45)" fg:x="10938816154" fg:w="11033099"/><text x="49.9470%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11,033,099 samples, 0.05%)</title><rect x="49.6970%" y="293" width="0.0501%" height="15" fill="rgb(214,1,49)" fg:x="10938816154" fg:w="11033099"/><text x="49.9470%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11,033,099 samples, 0.05%)</title><rect x="49.6970%" y="277" width="0.0501%" height="15" fill="rgb(226,163,40)" fg:x="10938816154" fg:w="11033099"/><text x="49.9470%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11,033,099 samples, 0.05%)</title><rect x="49.6970%" y="261" width="0.0501%" height="15" fill="rgb(239,212,28)" fg:x="10938816154" fg:w="11033099"/><text x="49.9470%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (11,033,099 samples, 0.05%)</title><rect x="49.7471%" y="245" width="0.0501%" height="15" fill="rgb(220,20,13)" fg:x="10949849253" fg:w="11033099"/><text x="49.9971%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (25,075,225 samples, 0.11%)</title><rect x="49.6970%" y="373" width="0.1139%" height="15" fill="rgb(210,164,35)" fg:x="10938816154" fg:w="25075225"/><text x="49.9470%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (25,075,225 samples, 0.11%)</title><rect x="49.6970%" y="357" width="0.1139%" height="15" fill="rgb(248,109,41)" fg:x="10938816154" fg:w="25075225"/><text x="49.9470%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (25,075,225 samples, 0.11%)</title><rect x="49.6970%" y="341" width="0.1139%" height="15" fill="rgb(238,23,50)" fg:x="10938816154" fg:w="25075225"/><text x="49.9470%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (25,075,225 samples, 0.11%)</title><rect x="49.6970%" y="325" width="0.1139%" height="15" fill="rgb(211,48,49)" fg:x="10938816154" fg:w="25075225"/><text x="49.9470%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (14,042,126 samples, 0.06%)</title><rect x="49.7471%" y="309" width="0.0638%" height="15" fill="rgb(223,36,21)" fg:x="10949849253" fg:w="14042126"/><text x="49.9971%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14,042,126 samples, 0.06%)</title><rect x="49.7471%" y="293" width="0.0638%" height="15" fill="rgb(207,123,46)" fg:x="10949849253" fg:w="14042126"/><text x="49.9971%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (14,042,126 samples, 0.06%)</title><rect x="49.7471%" y="277" width="0.0638%" height="15" fill="rgb(240,218,32)" fg:x="10949849253" fg:w="14042126"/><text x="49.9971%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (14,042,126 samples, 0.06%)</title><rect x="49.7471%" y="261" width="0.0638%" height="15" fill="rgb(252,5,43)" fg:x="10949849253" fg:w="14042126"/><text x="49.9971%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,030,090 samples, 0.05%)</title><rect x="49.8109%" y="373" width="0.0456%" height="15" fill="rgb(252,84,19)" fg:x="10963891379" fg:w="10030090"/><text x="50.0609%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (10,030,090 samples, 0.05%)</title><rect x="49.8109%" y="357" width="0.0456%" height="15" fill="rgb(243,152,39)" fg:x="10963891379" fg:w="10030090"/><text x="50.0609%" y="367.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (319,959,871 samples, 1.45%)</title><rect x="48.8129%" y="389" width="1.4536%" height="15" fill="rgb(234,160,15)" fg:x="10744232408" fg:w="319959871"/><text x="49.0629%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (325,977,925 samples, 1.48%)</title><rect x="48.8129%" y="405" width="1.4810%" height="15" fill="rgb(237,34,20)" fg:x="10744232408" fg:w="325977925"/><text x="49.0629%" y="415.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (8,024,072 samples, 0.04%)</title><rect x="50.2939%" y="389" width="0.0365%" height="15" fill="rgb(229,97,13)" fg:x="11070210333" fg:w="8024072"/><text x="50.5439%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14,042,126 samples, 0.06%)</title><rect x="50.2939%" y="405" width="0.0638%" height="15" fill="rgb(234,71,50)" fg:x="11070210333" fg:w="14042126"/><text x="50.5439%" y="415.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (968,906,694 samples, 4.40%)</title><rect x="46.5801%" y="421" width="4.4019%" height="15" fill="rgb(253,155,4)" fg:x="10252757998" fg:w="968906694"/><text x="46.8301%" y="431.50">chlan..</text></g><g><title>chlang::cmove::Move::new (3,009,027 samples, 0.01%)</title><rect x="50.9820%" y="405" width="0.0137%" height="15" fill="rgb(222,185,37)" fg:x="11221664692" fg:w="3009027"/><text x="51.2320%" y="415.50"></text></g><g><title>chlang::board::Position::valid (41,123,369 samples, 0.19%)</title><rect x="50.9957%" y="405" width="0.1868%" height="15" fill="rgb(251,177,13)" fg:x="11224673719" fg:w="41123369"/><text x="51.2457%" y="415.50"></text></g><g><title>__rust_alloc (21,063,189 samples, 0.10%)</title><rect x="51.1825%" y="277" width="0.0957%" height="15" fill="rgb(250,179,40)" fg:x="11265797088" fg:w="21063189"/><text x="51.4325%" y="287.50"></text></g><g><title>__rdl_alloc (7,021,063 samples, 0.03%)</title><rect x="51.2782%" y="277" width="0.0319%" height="15" fill="rgb(242,44,2)" fg:x="11286860277" fg:w="7021063"/><text x="51.5282%" y="287.50"></text></g><g><title>tcache_get (30,090,270 samples, 0.14%)</title><rect x="51.3101%" y="261" width="0.1367%" height="15" fill="rgb(216,177,13)" fg:x="11293881340" fg:w="30090270"/><text x="51.5601%" y="271.50"></text></g><g><title>checked_request2size (9,027,081 samples, 0.04%)</title><rect x="51.4468%" y="261" width="0.0410%" height="15" fill="rgb(216,106,43)" fg:x="11323971610" fg:w="9027081"/><text x="51.6968%" y="271.50"></text></g><g><title>__GI___libc_malloc (117,352,053 samples, 0.53%)</title><rect x="51.3101%" y="277" width="0.5332%" height="15" fill="rgb(216,183,2)" fg:x="11293881340" fg:w="117352053"/><text x="51.5601%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (151,454,359 samples, 0.69%)</title><rect x="51.1825%" y="325" width="0.6881%" height="15" fill="rgb(249,75,3)" fg:x="11265797088" fg:w="151454359"/><text x="51.4325%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (151,454,359 samples, 0.69%)</title><rect x="51.1825%" y="309" width="0.6881%" height="15" fill="rgb(219,67,39)" fg:x="11265797088" fg:w="151454359"/><text x="51.4325%" y="319.50"></text></g><g><title>alloc::alloc::alloc (151,454,359 samples, 0.69%)</title><rect x="51.1825%" y="293" width="0.6881%" height="15" fill="rgb(253,228,2)" fg:x="11265797088" fg:w="151454359"/><text x="51.4325%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (169,508,521 samples, 0.77%)</title><rect x="51.1825%" y="405" width="0.7701%" height="15" fill="rgb(235,138,27)" fg:x="11265797088" fg:w="169508521"/><text x="51.4325%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (169,508,521 samples, 0.77%)</title><rect x="51.1825%" y="389" width="0.7701%" height="15" fill="rgb(236,97,51)" fg:x="11265797088" fg:w="169508521"/><text x="51.4325%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (169,508,521 samples, 0.77%)</title><rect x="51.1825%" y="373" width="0.7701%" height="15" fill="rgb(240,80,30)" fg:x="11265797088" fg:w="169508521"/><text x="51.4325%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (169,508,521 samples, 0.77%)</title><rect x="51.1825%" y="357" width="0.7701%" height="15" fill="rgb(230,178,19)" fg:x="11265797088" fg:w="169508521"/><text x="51.4325%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (169,508,521 samples, 0.77%)</title><rect x="51.1825%" y="341" width="0.7701%" height="15" fill="rgb(210,190,27)" fg:x="11265797088" fg:w="169508521"/><text x="51.4325%" y="351.50"></text></g><g><title>core::ptr::write (22,066,198 samples, 0.10%)</title><rect x="51.9526%" y="389" width="0.1003%" height="15" fill="rgb(222,107,31)" fg:x="11435305609" fg:w="22066198"/><text x="52.2026%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (81,243,729 samples, 0.37%)</title><rect x="51.9526%" y="405" width="0.3691%" height="15" fill="rgb(216,127,34)" fg:x="11435305609" fg:w="81243729"/><text x="52.2026%" y="415.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&lt;&amp;i64&gt;&gt;::add (15,045,135 samples, 0.07%)</title><rect x="52.3217%" y="405" width="0.0684%" height="15" fill="rgb(234,116,52)" fg:x="11516549338" fg:w="15045135"/><text x="52.5717%" y="415.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (15,045,135 samples, 0.07%)</title><rect x="52.3217%" y="389" width="0.0684%" height="15" fill="rgb(222,124,15)" fg:x="11516549338" fg:w="15045135"/><text x="52.5717%" y="399.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (409,227,672 samples, 1.86%)</title><rect x="50.9820%" y="421" width="1.8592%" height="15" fill="rgb(231,179,28)" fg:x="11221664692" fg:w="409227672"/><text x="51.2320%" y="431.50">c..</text></g><g><title>chlang::cmove::Move::new (12,036,108 samples, 0.05%)</title><rect x="52.8412%" y="405" width="0.0547%" height="15" fill="rgb(226,93,45)" fg:x="11630892364" fg:w="12036108"/><text x="53.0912%" y="415.50"></text></g><g><title>chlang::board::Position::valid (51,153,459 samples, 0.23%)</title><rect x="52.8959%" y="405" width="0.2324%" height="15" fill="rgb(215,8,51)" fg:x="11642928472" fg:w="51153459"/><text x="53.1459%" y="415.50"></text></g><g><title>__rust_alloc (25,075,225 samples, 0.11%)</title><rect x="53.1283%" y="277" width="0.1139%" height="15" fill="rgb(223,106,5)" fg:x="11694081931" fg:w="25075225"/><text x="53.3783%" y="287.50"></text></g><g><title>__rdl_alloc (4,012,036 samples, 0.02%)</title><rect x="53.2422%" y="277" width="0.0182%" height="15" fill="rgb(250,191,5)" fg:x="11719157156" fg:w="4012036"/><text x="53.4922%" y="287.50"></text></g><g><title>tcache_get (30,090,270 samples, 0.14%)</title><rect x="53.2604%" y="261" width="0.1367%" height="15" fill="rgb(242,132,44)" fg:x="11723169192" fg:w="30090270"/><text x="53.5104%" y="271.50"></text></g><g><title>__GI___libc_malloc (97,291,873 samples, 0.44%)</title><rect x="53.2604%" y="277" width="0.4420%" height="15" fill="rgb(251,152,29)" fg:x="11723169192" fg:w="97291873"/><text x="53.5104%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (131,394,179 samples, 0.60%)</title><rect x="53.1283%" y="325" width="0.5969%" height="15" fill="rgb(218,179,5)" fg:x="11694081931" fg:w="131394179"/><text x="53.3783%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (131,394,179 samples, 0.60%)</title><rect x="53.1283%" y="309" width="0.5969%" height="15" fill="rgb(227,67,19)" fg:x="11694081931" fg:w="131394179"/><text x="53.3783%" y="319.50"></text></g><g><title>alloc::alloc::alloc (131,394,179 samples, 0.60%)</title><rect x="53.1283%" y="293" width="0.5969%" height="15" fill="rgb(233,119,31)" fg:x="11694081931" fg:w="131394179"/><text x="53.3783%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (144,433,296 samples, 0.66%)</title><rect x="53.1283%" y="373" width="0.6562%" height="15" fill="rgb(241,120,22)" fg:x="11694081931" fg:w="144433296"/><text x="53.3783%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (144,433,296 samples, 0.66%)</title><rect x="53.1283%" y="357" width="0.6562%" height="15" fill="rgb(224,102,30)" fg:x="11694081931" fg:w="144433296"/><text x="53.3783%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (144,433,296 samples, 0.66%)</title><rect x="53.1283%" y="341" width="0.6562%" height="15" fill="rgb(210,164,37)" fg:x="11694081931" fg:w="144433296"/><text x="53.3783%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (149,448,341 samples, 0.68%)</title><rect x="53.1283%" y="405" width="0.6790%" height="15" fill="rgb(226,191,16)" fg:x="11694081931" fg:w="149448341"/><text x="53.3783%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (149,448,341 samples, 0.68%)</title><rect x="53.1283%" y="389" width="0.6790%" height="15" fill="rgb(214,40,45)" fg:x="11694081931" fg:w="149448341"/><text x="53.3783%" y="399.50"></text></g><g><title>core::ptr::write (14,042,126 samples, 0.06%)</title><rect x="53.8072%" y="389" width="0.0638%" height="15" fill="rgb(244,29,26)" fg:x="11843530272" fg:w="14042126"/><text x="54.0572%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (7,021,063 samples, 0.03%)</title><rect x="53.8710%" y="389" width="0.0319%" height="15" fill="rgb(216,16,5)" fg:x="11857572398" fg:w="7021063"/><text x="54.1210%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (7,021,063 samples, 0.03%)</title><rect x="53.8710%" y="373" width="0.0319%" height="15" fill="rgb(249,76,35)" fg:x="11857572398" fg:w="7021063"/><text x="54.1210%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (7,021,063 samples, 0.03%)</title><rect x="53.8710%" y="357" width="0.0319%" height="15" fill="rgb(207,11,44)" fg:x="11857572398" fg:w="7021063"/><text x="54.1210%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (7,021,063 samples, 0.03%)</title><rect x="53.8710%" y="341" width="0.0319%" height="15" fill="rgb(228,190,49)" fg:x="11857572398" fg:w="7021063"/><text x="54.1210%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (95,285,855 samples, 0.43%)</title><rect x="53.8072%" y="405" width="0.4329%" height="15" fill="rgb(214,173,12)" fg:x="11843530272" fg:w="95285855"/><text x="54.0572%" y="415.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (519,558,662 samples, 2.36%)</title><rect x="52.8412%" y="421" width="2.3604%" height="15" fill="rgb(218,26,35)" fg:x="11630892364" fg:w="519558662"/><text x="53.0912%" y="431.50">ch..</text></g><g><title>chlang::board::Position::valid (120,361,080 samples, 0.55%)</title><rect x="55.2016%" y="405" width="0.5468%" height="15" fill="rgb(220,200,19)" fg:x="12150451026" fg:w="120361080"/><text x="55.4516%" y="415.50"></text></g><g><title>chlang::board::Position::bitboard (10,030,090 samples, 0.05%)</title><rect x="55.7485%" y="405" width="0.0456%" height="15" fill="rgb(239,95,49)" fg:x="12270812106" fg:w="10030090"/><text x="55.9985%" y="415.50"></text></g><g><title>__rust_alloc (13,039,117 samples, 0.06%)</title><rect x="55.7940%" y="277" width="0.0592%" height="15" fill="rgb(235,85,53)" fg:x="12280842196" fg:w="13039117"/><text x="56.0440%" y="287.50"></text></g><g><title>__rdl_alloc (9,027,081 samples, 0.04%)</title><rect x="55.8533%" y="277" width="0.0410%" height="15" fill="rgb(233,133,31)" fg:x="12293881313" fg:w="9027081"/><text x="56.1033%" y="287.50"></text></g><g><title>tcache_get (36,108,324 samples, 0.16%)</title><rect x="55.8943%" y="261" width="0.1640%" height="15" fill="rgb(218,25,20)" fg:x="12302908394" fg:w="36108324"/><text x="56.1443%" y="271.50"></text></g><g><title>checked_request2size (5,015,045 samples, 0.02%)</title><rect x="56.0583%" y="261" width="0.0228%" height="15" fill="rgb(252,210,38)" fg:x="12339016718" fg:w="5015045"/><text x="56.3083%" y="271.50"></text></g><g><title>__GI___libc_malloc (122,367,098 samples, 0.56%)</title><rect x="55.8943%" y="277" width="0.5559%" height="15" fill="rgb(242,134,21)" fg:x="12302908394" fg:w="122367098"/><text x="56.1443%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (147,442,323 samples, 0.67%)</title><rect x="55.7940%" y="325" width="0.6699%" height="15" fill="rgb(213,28,48)" fg:x="12280842196" fg:w="147442323"/><text x="56.0440%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (147,442,323 samples, 0.67%)</title><rect x="55.7940%" y="309" width="0.6699%" height="15" fill="rgb(250,196,2)" fg:x="12280842196" fg:w="147442323"/><text x="56.0440%" y="319.50"></text></g><g><title>alloc::alloc::alloc (147,442,323 samples, 0.67%)</title><rect x="55.7940%" y="293" width="0.6699%" height="15" fill="rgb(227,5,17)" fg:x="12280842196" fg:w="147442323"/><text x="56.0440%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (156,469,404 samples, 0.71%)</title><rect x="55.7940%" y="373" width="0.7109%" height="15" fill="rgb(221,226,24)" fg:x="12280842196" fg:w="156469404"/><text x="56.0440%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (156,469,404 samples, 0.71%)</title><rect x="55.7940%" y="357" width="0.7109%" height="15" fill="rgb(211,5,48)" fg:x="12280842196" fg:w="156469404"/><text x="56.0440%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (156,469,404 samples, 0.71%)</title><rect x="55.7940%" y="341" width="0.7109%" height="15" fill="rgb(219,150,6)" fg:x="12280842196" fg:w="156469404"/><text x="56.0440%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (159,478,431 samples, 0.72%)</title><rect x="55.7940%" y="405" width="0.7245%" height="15" fill="rgb(251,46,16)" fg:x="12280842196" fg:w="159478431"/><text x="56.0440%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (159,478,431 samples, 0.72%)</title><rect x="55.7940%" y="389" width="0.7245%" height="15" fill="rgb(220,204,40)" fg:x="12280842196" fg:w="159478431"/><text x="56.0440%" y="399.50"></text></g><g><title>core::ptr::write (7,021,063 samples, 0.03%)</title><rect x="56.5186%" y="389" width="0.0319%" height="15" fill="rgb(211,85,2)" fg:x="12440320627" fg:w="7021063"/><text x="56.7686%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (97,291,873 samples, 0.44%)</title><rect x="56.5186%" y="405" width="0.4420%" height="15" fill="rgb(229,17,7)" fg:x="12440320627" fg:w="97291873"/><text x="56.7686%" y="415.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&lt;&amp;i64&gt;&gt;::add (18,054,162 samples, 0.08%)</title><rect x="56.9651%" y="405" width="0.0820%" height="15" fill="rgb(239,72,28)" fg:x="12538615509" fg:w="18054162"/><text x="57.2151%" y="415.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (18,054,162 samples, 0.08%)</title><rect x="56.9651%" y="389" width="0.0820%" height="15" fill="rgb(230,47,54)" fg:x="12538615509" fg:w="18054162"/><text x="57.2151%" y="399.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (574,724,157 samples, 2.61%)</title><rect x="55.2016%" y="421" width="2.6111%" height="15" fill="rgb(214,50,8)" fg:x="12150451026" fg:w="574724157"/><text x="55.4516%" y="431.50">ch..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (9,027,081 samples, 0.04%)</title><rect x="57.8127%" y="405" width="0.0410%" height="15" fill="rgb(216,198,43)" fg:x="12725175183" fg:w="9027081"/><text x="58.0627%" y="415.50"></text></g><g><title>core::ptr::read (9,027,081 samples, 0.04%)</title><rect x="57.8127%" y="389" width="0.0410%" height="15" fill="rgb(234,20,35)" fg:x="12725175183" fg:w="9027081"/><text x="58.0627%" y="399.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (41,123,369 samples, 0.19%)</title><rect x="57.8537%" y="405" width="0.1868%" height="15" fill="rgb(254,45,19)" fg:x="12734202264" fg:w="41123369"/><text x="58.1037%" y="415.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (96,288,864 samples, 0.44%)</title><rect x="57.8127%" y="421" width="0.4375%" height="15" fill="rgb(219,14,44)" fg:x="12725175183" fg:w="96288864"/><text x="58.0627%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (214,643,926 samples, 0.98%)</title><rect x="58.2502%" y="421" width="0.9752%" height="15" fill="rgb(217,220,26)" fg:x="12821464047" fg:w="214643926"/><text x="58.5002%" y="431.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (214,643,926 samples, 0.98%)</title><rect x="58.2502%" y="405" width="0.9752%" height="15" fill="rgb(213,158,28)" fg:x="12821464047" fg:w="214643926"/><text x="58.5002%" y="415.50"></text></g><g><title>chlang::board::Board::attacked_by_color (5,009,026,946 samples, 22.76%)</title><rect x="37.2340%" y="437" width="22.7569%" height="15" fill="rgb(252,51,52)" fg:x="8195586539" fg:w="5009026946"/><text x="37.4840%" y="447.50">chlang::board::Board::attacked_by_co..</text></g><g><title>core::num::&lt;impl u64&gt;::ilog2 (5,015,045 samples, 0.02%)</title><rect x="59.9909%" y="421" width="0.0228%" height="15" fill="rgb(246,89,16)" fg:x="13204613485" fg:w="5015045"/><text x="60.2409%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_ilog2 (5,015,045 samples, 0.02%)</title><rect x="59.9909%" y="405" width="0.0228%" height="15" fill="rgb(216,158,49)" fg:x="13204613485" fg:w="5015045"/><text x="60.2409%" y="415.50"></text></g><g><title>&lt;chlang::board::Position as core::convert::From&lt;u64&gt;&gt;::from (20,060,180 samples, 0.09%)</title><rect x="59.9909%" y="437" width="0.0911%" height="15" fill="rgb(236,107,19)" fg:x="13204613485" fg:w="20060180"/><text x="60.2409%" y="447.50"></text></g><g><title>chlang::board::Board::is_valid (5,063,189,432 samples, 23.00%)</title><rect x="37.2340%" y="453" width="23.0030%" height="15" fill="rgb(228,185,30)" fg:x="8195586539" fg:w="5063189432"/><text x="37.4840%" y="463.50">chlang::board::Board::is_valid</text></g><g><title>__rust_dealloc (8,024,072 samples, 0.04%)</title><rect x="60.2370%" y="325" width="0.0365%" height="15" fill="rgb(246,134,8)" fg:x="13258775971" fg:w="8024072"/><text x="60.4870%" y="335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (7,021,063 samples, 0.03%)</title><rect x="60.2734%" y="309" width="0.0319%" height="15" fill="rgb(214,143,50)" fg:x="13266800043" fg:w="7021063"/><text x="60.5234%" y="319.50"></text></g><g><title>__rdl_dealloc (9,027,081 samples, 0.04%)</title><rect x="60.2734%" y="325" width="0.0410%" height="15" fill="rgb(228,75,8)" fg:x="13266800043" fg:w="9027081"/><text x="60.5234%" y="335.50"></text></g><g><title>_int_free (25,075,225 samples, 0.11%)</title><rect x="60.3144%" y="309" width="0.1139%" height="15" fill="rgb(207,175,4)" fg:x="13275827124" fg:w="25075225"/><text x="60.5644%" y="319.50"></text></g><g><title>__GI___libc_free (37,111,333 samples, 0.17%)</title><rect x="60.3144%" y="325" width="0.1686%" height="15" fill="rgb(205,108,24)" fg:x="13275827124" fg:w="37111333"/><text x="60.5644%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (56,168,504 samples, 0.26%)</title><rect x="60.2370%" y="373" width="0.2552%" height="15" fill="rgb(244,120,49)" fg:x="13258775971" fg:w="56168504"/><text x="60.4870%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (56,168,504 samples, 0.26%)</title><rect x="60.2370%" y="357" width="0.2552%" height="15" fill="rgb(223,47,38)" fg:x="13258775971" fg:w="56168504"/><text x="60.4870%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (56,168,504 samples, 0.26%)</title><rect x="60.2370%" y="341" width="0.2552%" height="15" fill="rgb(229,179,11)" fg:x="13258775971" fg:w="56168504"/><text x="60.4870%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (58,174,522 samples, 0.26%)</title><rect x="60.2370%" y="437" width="0.2643%" height="15" fill="rgb(231,122,1)" fg:x="13258775971" fg:w="58174522"/><text x="60.4870%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (58,174,522 samples, 0.26%)</title><rect x="60.2370%" y="421" width="0.2643%" height="15" fill="rgb(245,119,9)" fg:x="13258775971" fg:w="58174522"/><text x="60.4870%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (58,174,522 samples, 0.26%)</title><rect x="60.2370%" y="405" width="0.2643%" height="15" fill="rgb(241,163,25)" fg:x="13258775971" fg:w="58174522"/><text x="60.4870%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (58,174,522 samples, 0.26%)</title><rect x="60.2370%" y="389" width="0.2643%" height="15" fill="rgb(217,214,3)" fg:x="13258775971" fg:w="58174522"/><text x="60.4870%" y="399.50"></text></g><g><title>chlang::board::Position::bitboard (16,048,144 samples, 0.07%)</title><rect x="60.5013%" y="421" width="0.0729%" height="15" fill="rgb(240,86,28)" fg:x="13316950493" fg:w="16048144"/><text x="60.7513%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (22,066,198 samples, 0.10%)</title><rect x="60.5742%" y="421" width="0.1003%" height="15" fill="rgb(215,47,9)" fg:x="13332998637" fg:w="22066198"/><text x="60.8242%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (22,066,198 samples, 0.10%)</title><rect x="60.5742%" y="405" width="0.1003%" height="15" fill="rgb(252,25,45)" fg:x="13332998637" fg:w="22066198"/><text x="60.8242%" y="415.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (22,066,198 samples, 0.10%)</title><rect x="60.5742%" y="389" width="0.1003%" height="15" fill="rgb(251,164,9)" fg:x="13332998637" fg:w="22066198"/><text x="60.8242%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (22,066,198 samples, 0.10%)</title><rect x="60.5742%" y="373" width="0.1003%" height="15" fill="rgb(233,194,0)" fg:x="13332998637" fg:w="22066198"/><text x="60.8242%" y="383.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (22,066,198 samples, 0.10%)</title><rect x="60.5742%" y="357" width="0.1003%" height="15" fill="rgb(249,111,24)" fg:x="13332998637" fg:w="22066198"/><text x="60.8242%" y="367.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (22,066,198 samples, 0.10%)</title><rect x="60.5742%" y="341" width="0.1003%" height="15" fill="rgb(250,223,3)" fg:x="13332998637" fg:w="22066198"/><text x="60.8242%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (22,066,198 samples, 0.10%)</title><rect x="60.5742%" y="325" width="0.1003%" height="15" fill="rgb(236,178,37)" fg:x="13332998637" fg:w="22066198"/><text x="60.8242%" y="335.50"></text></g><g><title>core::ptr::read (22,066,198 samples, 0.10%)</title><rect x="60.5742%" y="309" width="0.1003%" height="15" fill="rgb(241,158,50)" fg:x="13332998637" fg:w="22066198"/><text x="60.8242%" y="319.50"></text></g><g><title>chlang::board::Board::piece_type (79,237,711 samples, 0.36%)</title><rect x="60.5013%" y="437" width="0.3600%" height="15" fill="rgb(213,121,41)" fg:x="13316950493" fg:w="79237711"/><text x="60.7513%" y="447.50"></text></g><g><title>chlang::board::Position::valid (13,039,117 samples, 0.06%)</title><rect x="60.8612%" y="421" width="0.0592%" height="15" fill="rgb(240,92,3)" fg:x="13396188204" fg:w="13039117"/><text x="61.1112%" y="431.50"></text></g><g><title>chlang::board::Position::bitboard (11,033,099 samples, 0.05%)</title><rect x="60.9205%" y="421" width="0.0501%" height="15" fill="rgb(205,123,3)" fg:x="13409227321" fg:w="11033099"/><text x="61.1705%" y="431.50"></text></g><g><title>__rust_alloc (4,012,036 samples, 0.02%)</title><rect x="60.9706%" y="293" width="0.0182%" height="15" fill="rgb(205,97,47)" fg:x="13420260420" fg:w="4012036"/><text x="61.2206%" y="303.50"></text></g><g><title>__rdl_alloc (5,015,045 samples, 0.02%)</title><rect x="60.9888%" y="293" width="0.0228%" height="15" fill="rgb(247,152,14)" fg:x="13424272456" fg:w="5015045"/><text x="61.2388%" y="303.50"></text></g><g><title>tcache_get (13,039,117 samples, 0.06%)</title><rect x="61.0116%" y="277" width="0.0592%" height="15" fill="rgb(248,195,53)" fg:x="13429287501" fg:w="13039117"/><text x="61.2616%" y="287.50"></text></g><g><title>__GI___libc_malloc (36,108,324 samples, 0.16%)</title><rect x="61.0116%" y="293" width="0.1640%" height="15" fill="rgb(226,201,16)" fg:x="13429287501" fg:w="36108324"/><text x="61.2616%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (49,147,441 samples, 0.22%)</title><rect x="60.9706%" y="341" width="0.2233%" height="15" fill="rgb(205,98,0)" fg:x="13420260420" fg:w="49147441"/><text x="61.2206%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (49,147,441 samples, 0.22%)</title><rect x="60.9706%" y="325" width="0.2233%" height="15" fill="rgb(214,191,48)" fg:x="13420260420" fg:w="49147441"/><text x="61.2206%" y="335.50"></text></g><g><title>alloc::alloc::alloc (49,147,441 samples, 0.22%)</title><rect x="60.9706%" y="309" width="0.2233%" height="15" fill="rgb(237,112,39)" fg:x="13420260420" fg:w="49147441"/><text x="61.2206%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (57,171,513 samples, 0.26%)</title><rect x="60.9706%" y="421" width="0.2597%" height="15" fill="rgb(247,203,27)" fg:x="13420260420" fg:w="57171513"/><text x="61.2206%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (57,171,513 samples, 0.26%)</title><rect x="60.9706%" y="405" width="0.2597%" height="15" fill="rgb(235,124,28)" fg:x="13420260420" fg:w="57171513"/><text x="61.2206%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (57,171,513 samples, 0.26%)</title><rect x="60.9706%" y="389" width="0.2597%" height="15" fill="rgb(208,207,46)" fg:x="13420260420" fg:w="57171513"/><text x="61.2206%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (57,171,513 samples, 0.26%)</title><rect x="60.9706%" y="373" width="0.2597%" height="15" fill="rgb(234,176,4)" fg:x="13420260420" fg:w="57171513"/><text x="61.2206%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (57,171,513 samples, 0.26%)</title><rect x="60.9706%" y="357" width="0.2597%" height="15" fill="rgb(230,133,28)" fg:x="13420260420" fg:w="57171513"/><text x="61.2206%" y="367.50"></text></g><g><title>core::ptr::write (10,030,090 samples, 0.05%)</title><rect x="61.2303%" y="405" width="0.0456%" height="15" fill="rgb(211,137,40)" fg:x="13477431933" fg:w="10030090"/><text x="61.4803%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (54,162,486 samples, 0.25%)</title><rect x="61.2303%" y="421" width="0.2461%" height="15" fill="rgb(254,35,13)" fg:x="13477431933" fg:w="54162486"/><text x="61.4803%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&lt;&amp;i64&gt;&gt;::add (3,009,027 samples, 0.01%)</title><rect x="61.4764%" y="421" width="0.0137%" height="15" fill="rgb(225,49,51)" fg:x="13531594419" fg:w="3009027"/><text x="61.7264%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (3,009,027 samples, 0.01%)</title><rect x="61.4764%" y="405" width="0.0137%" height="15" fill="rgb(251,10,15)" fg:x="13531594419" fg:w="3009027"/><text x="61.7264%" y="415.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (209,628,881 samples, 0.95%)</title><rect x="60.8612%" y="437" width="0.9524%" height="15" fill="rgb(228,207,15)" fg:x="13396188204" fg:w="209628881"/><text x="61.1112%" y="447.50"></text></g><g><title>__rust_dealloc (3,009,027 samples, 0.01%)</title><rect x="61.8136%" y="309" width="0.0137%" height="15" fill="rgb(241,99,19)" fg:x="13605817085" fg:w="3009027"/><text x="62.0636%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4,012,036 samples, 0.02%)</title><rect x="61.8273%" y="293" width="0.0182%" height="15" fill="rgb(207,104,49)" fg:x="13608826112" fg:w="4012036"/><text x="62.0773%" y="303.50"></text></g><g><title>__rdl_dealloc (6,018,054 samples, 0.03%)</title><rect x="61.8273%" y="309" width="0.0273%" height="15" fill="rgb(234,99,18)" fg:x="13608826112" fg:w="6018054"/><text x="62.0773%" y="319.50"></text></g><g><title>tcache_put (7,021,063 samples, 0.03%)</title><rect x="61.8592%" y="277" width="0.0319%" height="15" fill="rgb(213,191,49)" fg:x="13615847175" fg:w="7021063"/><text x="62.1092%" y="287.50"></text></g><g><title>_int_free (19,057,171 samples, 0.09%)</title><rect x="61.8592%" y="293" width="0.0866%" height="15" fill="rgb(210,226,19)" fg:x="13615847175" fg:w="19057171"/><text x="62.1092%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (35,105,315 samples, 0.16%)</title><rect x="61.8136%" y="357" width="0.1595%" height="15" fill="rgb(229,97,18)" fg:x="13605817085" fg:w="35105315"/><text x="62.0636%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (35,105,315 samples, 0.16%)</title><rect x="61.8136%" y="341" width="0.1595%" height="15" fill="rgb(211,167,15)" fg:x="13605817085" fg:w="35105315"/><text x="62.0636%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (35,105,315 samples, 0.16%)</title><rect x="61.8136%" y="325" width="0.1595%" height="15" fill="rgb(210,169,34)" fg:x="13605817085" fg:w="35105315"/><text x="62.0636%" y="335.50"></text></g><g><title>__GI___libc_free (26,078,234 samples, 0.12%)</title><rect x="61.8546%" y="309" width="0.1185%" height="15" fill="rgb(241,121,31)" fg:x="13614844166" fg:w="26078234"/><text x="62.1046%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (38,114,342 samples, 0.17%)</title><rect x="61.8136%" y="421" width="0.1732%" height="15" fill="rgb(232,40,11)" fg:x="13605817085" fg:w="38114342"/><text x="62.0636%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (38,114,342 samples, 0.17%)</title><rect x="61.8136%" y="405" width="0.1732%" height="15" fill="rgb(205,86,26)" fg:x="13605817085" fg:w="38114342"/><text x="62.0636%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (38,114,342 samples, 0.17%)</title><rect x="61.8136%" y="389" width="0.1732%" height="15" fill="rgb(231,126,28)" fg:x="13605817085" fg:w="38114342"/><text x="62.0636%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38,114,342 samples, 0.17%)</title><rect x="61.8136%" y="373" width="0.1732%" height="15" fill="rgb(219,221,18)" fg:x="13605817085" fg:w="38114342"/><text x="62.0636%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some_and (4,012,036 samples, 0.02%)</title><rect x="61.9868%" y="421" width="0.0182%" height="15" fill="rgb(211,40,0)" fg:x="13643931427" fg:w="4012036"/><text x="62.2368%" y="431.50"></text></g><g><title>chlang::cmove::Move::new (4,012,036 samples, 0.02%)</title><rect x="62.0050%" y="421" width="0.0182%" height="15" fill="rgb(239,85,43)" fg:x="13647943463" fg:w="4012036"/><text x="62.2550%" y="431.50"></text></g><g><title>chlang::board::Position::valid (10,030,090 samples, 0.05%)</title><rect x="62.0232%" y="421" width="0.0456%" height="15" fill="rgb(231,55,21)" fg:x="13651955499" fg:w="10030090"/><text x="62.2732%" y="431.50"></text></g><g><title>__rust_alloc (5,015,045 samples, 0.02%)</title><rect x="62.0779%" y="293" width="0.0228%" height="15" fill="rgb(225,184,43)" fg:x="13663991607" fg:w="5015045"/><text x="62.3279%" y="303.50"></text></g><g><title>__rdl_alloc (3,009,027 samples, 0.01%)</title><rect x="62.1007%" y="293" width="0.0137%" height="15" fill="rgb(251,158,41)" fg:x="13669006652" fg:w="3009027"/><text x="62.3507%" y="303.50"></text></g><g><title>tcache_get (5,015,045 samples, 0.02%)</title><rect x="62.1144%" y="277" width="0.0228%" height="15" fill="rgb(234,159,37)" fg:x="13672015679" fg:w="5015045"/><text x="62.3644%" y="287.50"></text></g><g><title>checked_request2size (3,009,027 samples, 0.01%)</title><rect x="62.1372%" y="277" width="0.0137%" height="15" fill="rgb(216,204,22)" fg:x="13677030724" fg:w="3009027"/><text x="62.3872%" y="287.50"></text></g><g><title>__GI___libc_malloc (19,057,171 samples, 0.09%)</title><rect x="62.1144%" y="293" width="0.0866%" height="15" fill="rgb(214,17,3)" fg:x="13672015679" fg:w="19057171"/><text x="62.3644%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28,084,252 samples, 0.13%)</title><rect x="62.0779%" y="341" width="0.1276%" height="15" fill="rgb(212,111,17)" fg:x="13663991607" fg:w="28084252"/><text x="62.3279%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28,084,252 samples, 0.13%)</title><rect x="62.0779%" y="325" width="0.1276%" height="15" fill="rgb(221,157,24)" fg:x="13663991607" fg:w="28084252"/><text x="62.3279%" y="335.50"></text></g><g><title>alloc::alloc::alloc (28,084,252 samples, 0.13%)</title><rect x="62.0779%" y="309" width="0.1276%" height="15" fill="rgb(252,16,13)" fg:x="13663991607" fg:w="28084252"/><text x="62.3279%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (31,093,279 samples, 0.14%)</title><rect x="62.0779%" y="421" width="0.1413%" height="15" fill="rgb(221,62,2)" fg:x="13663991607" fg:w="31093279"/><text x="62.3279%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (31,093,279 samples, 0.14%)</title><rect x="62.0779%" y="405" width="0.1413%" height="15" fill="rgb(247,87,22)" fg:x="13663991607" fg:w="31093279"/><text x="62.3279%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (31,093,279 samples, 0.14%)</title><rect x="62.0779%" y="389" width="0.1413%" height="15" fill="rgb(215,73,9)" fg:x="13663991607" fg:w="31093279"/><text x="62.3279%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (31,093,279 samples, 0.14%)</title><rect x="62.0779%" y="373" width="0.1413%" height="15" fill="rgb(207,175,33)" fg:x="13663991607" fg:w="31093279"/><text x="62.3279%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (31,093,279 samples, 0.14%)</title><rect x="62.0779%" y="357" width="0.1413%" height="15" fill="rgb(243,129,54)" fg:x="13663991607" fg:w="31093279"/><text x="62.3279%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (3,009,027 samples, 0.01%)</title><rect x="62.2192%" y="421" width="0.0137%" height="15" fill="rgb(227,119,45)" fg:x="13695084886" fg:w="3009027"/><text x="62.4692%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,009,027 samples, 0.01%)</title><rect x="62.2329%" y="421" width="0.0137%" height="15" fill="rgb(205,109,36)" fg:x="13698093913" fg:w="3009027"/><text x="62.4829%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (8,024,072 samples, 0.04%)</title><rect x="62.2465%" y="389" width="0.0365%" height="15" fill="rgb(205,6,39)" fg:x="13701102940" fg:w="8024072"/><text x="62.4965%" y="399.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (8,024,072 samples, 0.04%)</title><rect x="62.2465%" y="373" width="0.0365%" height="15" fill="rgb(221,32,16)" fg:x="13701102940" fg:w="8024072"/><text x="62.4965%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,024,072 samples, 0.04%)</title><rect x="62.2465%" y="357" width="0.0365%" height="15" fill="rgb(228,144,50)" fg:x="13701102940" fg:w="8024072"/><text x="62.4965%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,024,072 samples, 0.04%)</title><rect x="62.2465%" y="341" width="0.0365%" height="15" fill="rgb(229,201,53)" fg:x="13701102940" fg:w="8024072"/><text x="62.4965%" y="351.50"></text></g><g><title>alloc::raw_vec::layout_array (4,012,036 samples, 0.02%)</title><rect x="62.2830%" y="309" width="0.0182%" height="15" fill="rgb(249,153,27)" fg:x="13709127012" fg:w="4012036"/><text x="62.5330%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::repeat (4,012,036 samples, 0.02%)</title><rect x="62.2830%" y="293" width="0.0182%" height="15" fill="rgb(227,106,25)" fg:x="13709127012" fg:w="4012036"/><text x="62.5330%" y="303.50"></text></g><g><title>__rust_alloc (4,012,036 samples, 0.02%)</title><rect x="62.3012%" y="261" width="0.0182%" height="15" fill="rgb(230,65,29)" fg:x="13713139048" fg:w="4012036"/><text x="62.5512%" y="271.50"></text></g><g><title>tcache_get (3,009,027 samples, 0.01%)</title><rect x="62.3194%" y="245" width="0.0137%" height="15" fill="rgb(221,57,46)" fg:x="13717151084" fg:w="3009027"/><text x="62.5694%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27,081,243 samples, 0.12%)</title><rect x="62.3012%" y="309" width="0.1230%" height="15" fill="rgb(229,161,17)" fg:x="13713139048" fg:w="27081243"/><text x="62.5512%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27,081,243 samples, 0.12%)</title><rect x="62.3012%" y="293" width="0.1230%" height="15" fill="rgb(222,213,11)" fg:x="13713139048" fg:w="27081243"/><text x="62.5512%" y="303.50"></text></g><g><title>alloc::alloc::alloc (27,081,243 samples, 0.12%)</title><rect x="62.3012%" y="277" width="0.1230%" height="15" fill="rgb(235,35,13)" fg:x="13713139048" fg:w="27081243"/><text x="62.5512%" y="287.50"></text></g><g><title>__GI___libc_malloc (23,069,207 samples, 0.10%)</title><rect x="62.3194%" y="261" width="0.1048%" height="15" fill="rgb(233,158,34)" fg:x="13717151084" fg:w="23069207"/><text x="62.5694%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (35,105,315 samples, 0.16%)</title><rect x="62.2830%" y="357" width="0.1595%" height="15" fill="rgb(215,151,48)" fg:x="13709127012" fg:w="35105315"/><text x="62.5330%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (35,105,315 samples, 0.16%)</title><rect x="62.2830%" y="341" width="0.1595%" height="15" fill="rgb(229,84,14)" fg:x="13709127012" fg:w="35105315"/><text x="62.5330%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (35,105,315 samples, 0.16%)</title><rect x="62.2830%" y="325" width="0.1595%" height="15" fill="rgb(229,68,14)" fg:x="13709127012" fg:w="35105315"/><text x="62.5330%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (36,108,324 samples, 0.16%)</title><rect x="62.2830%" y="389" width="0.1640%" height="15" fill="rgb(243,106,26)" fg:x="13709127012" fg:w="36108324"/><text x="62.5330%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (36,108,324 samples, 0.16%)</title><rect x="62.2830%" y="373" width="0.1640%" height="15" fill="rgb(206,45,38)" fg:x="13709127012" fg:w="36108324"/><text x="62.5330%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4,012,036 samples, 0.02%)</title><rect x="62.4470%" y="325" width="0.0182%" height="15" fill="rgb(226,6,15)" fg:x="13745235336" fg:w="4012036"/><text x="62.6970%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,012,036 samples, 0.02%)</title><rect x="62.4470%" y="309" width="0.0182%" height="15" fill="rgb(232,22,54)" fg:x="13745235336" fg:w="4012036"/><text x="62.6970%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,012,036 samples, 0.02%)</title><rect x="62.4470%" y="293" width="0.0182%" height="15" fill="rgb(229,222,32)" fg:x="13745235336" fg:w="4012036"/><text x="62.6970%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,012,036 samples, 0.02%)</title><rect x="62.4470%" y="277" width="0.0182%" height="15" fill="rgb(228,62,29)" fg:x="13745235336" fg:w="4012036"/><text x="62.6970%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (6,018,054 samples, 0.03%)</title><rect x="62.4470%" y="389" width="0.0273%" height="15" fill="rgb(251,103,34)" fg:x="13745235336" fg:w="6018054"/><text x="62.6970%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (6,018,054 samples, 0.03%)</title><rect x="62.4470%" y="373" width="0.0273%" height="15" fill="rgb(233,12,30)" fg:x="13745235336" fg:w="6018054"/><text x="62.6970%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6,018,054 samples, 0.03%)</title><rect x="62.4470%" y="357" width="0.0273%" height="15" fill="rgb(238,52,0)" fg:x="13745235336" fg:w="6018054"/><text x="62.6970%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (6,018,054 samples, 0.03%)</title><rect x="62.4470%" y="341" width="0.0273%" height="15" fill="rgb(223,98,5)" fg:x="13745235336" fg:w="6018054"/><text x="62.6970%" y="351.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (71,213,639 samples, 0.32%)</title><rect x="62.2465%" y="405" width="0.3235%" height="15" fill="rgb(228,75,37)" fg:x="13701102940" fg:w="71213639"/><text x="62.4965%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (72,216,648 samples, 0.33%)</title><rect x="62.2465%" y="421" width="0.3281%" height="15" fill="rgb(205,115,49)" fg:x="13701102940" fg:w="72216648"/><text x="62.4965%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,018,054 samples, 0.03%)</title><rect x="62.5746%" y="421" width="0.0273%" height="15" fill="rgb(250,154,43)" fg:x="13773319588" fg:w="6018054"/><text x="62.8246%" y="431.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (208,625,872 samples, 0.95%)</title><rect x="61.8136%" y="437" width="0.9478%" height="15" fill="rgb(226,43,29)" fg:x="13605817085" fg:w="208625872"/><text x="62.0636%" y="447.50"></text></g><g><title>chlang::cmove::Move::new (3,009,027 samples, 0.01%)</title><rect x="62.7614%" y="421" width="0.0137%" height="15" fill="rgb(249,228,39)" fg:x="13814442957" fg:w="3009027"/><text x="63.0114%" y="431.50"></text></g><g><title>chlang::board::Position::valid (7,021,063 samples, 0.03%)</title><rect x="62.7751%" y="421" width="0.0319%" height="15" fill="rgb(216,79,43)" fg:x="13817451984" fg:w="7021063"/><text x="63.0251%" y="431.50"></text></g><g><title>__rust_alloc (3,009,027 samples, 0.01%)</title><rect x="62.8070%" y="293" width="0.0137%" height="15" fill="rgb(228,95,12)" fg:x="13824473047" fg:w="3009027"/><text x="63.0570%" y="303.50"></text></g><g><title>tcache_get (8,024,072 samples, 0.04%)</title><rect x="62.8252%" y="277" width="0.0365%" height="15" fill="rgb(249,221,15)" fg:x="13828485083" fg:w="8024072"/><text x="63.0752%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27,081,243 samples, 0.12%)</title><rect x="62.8070%" y="341" width="0.1230%" height="15" fill="rgb(233,34,13)" fg:x="13824473047" fg:w="27081243"/><text x="63.0570%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27,081,243 samples, 0.12%)</title><rect x="62.8070%" y="325" width="0.1230%" height="15" fill="rgb(214,103,39)" fg:x="13824473047" fg:w="27081243"/><text x="63.0570%" y="335.50"></text></g><g><title>alloc::alloc::alloc (27,081,243 samples, 0.12%)</title><rect x="62.8070%" y="309" width="0.1230%" height="15" fill="rgb(251,126,39)" fg:x="13824473047" fg:w="27081243"/><text x="63.0570%" y="319.50"></text></g><g><title>__GI___libc_malloc (23,069,207 samples, 0.10%)</title><rect x="62.8252%" y="293" width="0.1048%" height="15" fill="rgb(214,216,36)" fg:x="13828485083" fg:w="23069207"/><text x="63.0752%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (32,096,288 samples, 0.15%)</title><rect x="62.8070%" y="421" width="0.1458%" height="15" fill="rgb(220,221,8)" fg:x="13824473047" fg:w="32096288"/><text x="63.0570%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (32,096,288 samples, 0.15%)</title><rect x="62.8070%" y="405" width="0.1458%" height="15" fill="rgb(240,216,3)" fg:x="13824473047" fg:w="32096288"/><text x="63.0570%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (32,096,288 samples, 0.15%)</title><rect x="62.8070%" y="389" width="0.1458%" height="15" fill="rgb(232,218,17)" fg:x="13824473047" fg:w="32096288"/><text x="63.0570%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (32,096,288 samples, 0.15%)</title><rect x="62.8070%" y="373" width="0.1458%" height="15" fill="rgb(229,163,45)" fg:x="13824473047" fg:w="32096288"/><text x="63.0570%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (32,096,288 samples, 0.15%)</title><rect x="62.8070%" y="357" width="0.1458%" height="15" fill="rgb(231,110,42)" fg:x="13824473047" fg:w="32096288"/><text x="63.0570%" y="367.50"></text></g><g><title>core::ptr::write (9,027,081 samples, 0.04%)</title><rect x="62.9528%" y="405" width="0.0410%" height="15" fill="rgb(208,170,48)" fg:x="13856569335" fg:w="9027081"/><text x="63.2028%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (34,102,306 samples, 0.15%)</title><rect x="62.9528%" y="421" width="0.1549%" height="15" fill="rgb(239,116,25)" fg:x="13856569335" fg:w="34102306"/><text x="63.2028%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&lt;&amp;i64&gt;&gt;::add (4,012,036 samples, 0.02%)</title><rect x="63.1078%" y="421" width="0.0182%" height="15" fill="rgb(219,200,50)" fg:x="13890671641" fg:w="4012036"/><text x="63.3578%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (4,012,036 samples, 0.02%)</title><rect x="63.1078%" y="405" width="0.0182%" height="15" fill="rgb(245,200,0)" fg:x="13890671641" fg:w="4012036"/><text x="63.3578%" y="415.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (98,294,882 samples, 0.45%)</title><rect x="62.7614%" y="437" width="0.4466%" height="15" fill="rgb(245,119,33)" fg:x="13814442957" fg:w="98294882"/><text x="63.0114%" y="447.50"></text></g><g><title>chlang::cmove::Move::new (5,015,045 samples, 0.02%)</title><rect x="63.2080%" y="421" width="0.0228%" height="15" fill="rgb(231,125,12)" fg:x="13912737839" fg:w="5015045"/><text x="63.4580%" y="431.50"></text></g><g><title>chlang::board::Position::valid (9,027,081 samples, 0.04%)</title><rect x="63.2308%" y="421" width="0.0410%" height="15" fill="rgb(216,96,41)" fg:x="13917752884" fg:w="9027081"/><text x="63.4808%" y="431.50"></text></g><g><title>__rust_dealloc (3,009,027 samples, 0.01%)</title><rect x="63.2718%" y="261" width="0.0137%" height="15" fill="rgb(248,43,45)" fg:x="13926779965" fg:w="3009027"/><text x="63.5218%" y="271.50"></text></g><g><title>_int_free (8,024,072 samples, 0.04%)</title><rect x="63.2946%" y="245" width="0.0365%" height="15" fill="rgb(217,222,7)" fg:x="13931795010" fg:w="8024072"/><text x="63.5446%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (15,045,135 samples, 0.07%)</title><rect x="63.2718%" y="405" width="0.0684%" height="15" fill="rgb(233,28,6)" fg:x="13926779965" fg:w="15045135"/><text x="63.5218%" y="415.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15,045,135 samples, 0.07%)</title><rect x="63.2718%" y="389" width="0.0684%" height="15" fill="rgb(231,218,15)" fg:x="13926779965" fg:w="15045135"/><text x="63.5218%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (15,045,135 samples, 0.07%)</title><rect x="63.2718%" y="373" width="0.0684%" height="15" fill="rgb(226,171,48)" fg:x="13926779965" fg:w="15045135"/><text x="63.5218%" y="383.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15,045,135 samples, 0.07%)</title><rect x="63.2718%" y="357" width="0.0684%" height="15" fill="rgb(235,201,9)" fg:x="13926779965" fg:w="15045135"/><text x="63.5218%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (15,045,135 samples, 0.07%)</title><rect x="63.2718%" y="341" width="0.0684%" height="15" fill="rgb(217,80,15)" fg:x="13926779965" fg:w="15045135"/><text x="63.5218%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15,045,135 samples, 0.07%)</title><rect x="63.2718%" y="325" width="0.0684%" height="15" fill="rgb(219,152,8)" fg:x="13926779965" fg:w="15045135"/><text x="63.5218%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (15,045,135 samples, 0.07%)</title><rect x="63.2718%" y="309" width="0.0684%" height="15" fill="rgb(243,107,38)" fg:x="13926779965" fg:w="15045135"/><text x="63.5218%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15,045,135 samples, 0.07%)</title><rect x="63.2718%" y="293" width="0.0684%" height="15" fill="rgb(231,17,5)" fg:x="13926779965" fg:w="15045135"/><text x="63.5218%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (15,045,135 samples, 0.07%)</title><rect x="63.2718%" y="277" width="0.0684%" height="15" fill="rgb(209,25,54)" fg:x="13926779965" fg:w="15045135"/><text x="63.5218%" y="287.50"></text></g><g><title>__GI___libc_free (10,030,090 samples, 0.05%)</title><rect x="63.2946%" y="261" width="0.0456%" height="15" fill="rgb(219,0,2)" fg:x="13931795010" fg:w="10030090"/><text x="63.5446%" y="271.50"></text></g><g><title>chlang::board::Board::piece_type (3,009,027 samples, 0.01%)</title><rect x="63.3493%" y="405" width="0.0137%" height="15" fill="rgb(246,9,5)" fg:x="13943831118" fg:w="3009027"/><text x="63.5993%" y="415.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (5,015,045 samples, 0.02%)</title><rect x="63.3630%" y="405" width="0.0228%" height="15" fill="rgb(226,159,4)" fg:x="13946840145" fg:w="5015045"/><text x="63.6130%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (7,021,063 samples, 0.03%)</title><rect x="63.3857%" y="389" width="0.0319%" height="15" fill="rgb(219,175,34)" fg:x="13951855190" fg:w="7021063"/><text x="63.6357%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (7,021,063 samples, 0.03%)</title><rect x="63.3857%" y="373" width="0.0319%" height="15" fill="rgb(236,10,46)" fg:x="13951855190" fg:w="7021063"/><text x="63.6357%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (7,021,063 samples, 0.03%)</title><rect x="63.3857%" y="357" width="0.0319%" height="15" fill="rgb(240,211,16)" fg:x="13951855190" fg:w="7021063"/><text x="63.6357%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,021,063 samples, 0.03%)</title><rect x="63.3857%" y="341" width="0.0319%" height="15" fill="rgb(205,3,43)" fg:x="13951855190" fg:w="7021063"/><text x="63.6357%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (7,021,063 samples, 0.03%)</title><rect x="63.3857%" y="325" width="0.0319%" height="15" fill="rgb(245,7,22)" fg:x="13951855190" fg:w="7021063"/><text x="63.6357%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7,021,063 samples, 0.03%)</title><rect x="63.3857%" y="309" width="0.0319%" height="15" fill="rgb(239,132,32)" fg:x="13951855190" fg:w="7021063"/><text x="63.6357%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (7,021,063 samples, 0.03%)</title><rect x="63.3857%" y="293" width="0.0319%" height="15" fill="rgb(228,202,34)" fg:x="13951855190" fg:w="7021063"/><text x="63.6357%" y="303.50"></text></g><g><title>__GI___libc_free (5,015,045 samples, 0.02%)</title><rect x="63.3949%" y="277" width="0.0228%" height="15" fill="rgb(254,200,22)" fg:x="13953861208" fg:w="5015045"/><text x="63.6449%" y="287.50"></text></g><g><title>_int_free (5,015,045 samples, 0.02%)</title><rect x="63.3949%" y="261" width="0.0228%" height="15" fill="rgb(219,10,39)" fg:x="13953861208" fg:w="5015045"/><text x="63.6449%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5,015,045 samples, 0.02%)</title><rect x="63.4267%" y="357" width="0.0228%" height="15" fill="rgb(226,210,39)" fg:x="13960882271" fg:w="5015045"/><text x="63.6767%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5,015,045 samples, 0.02%)</title><rect x="63.4267%" y="341" width="0.0228%" height="15" fill="rgb(208,219,16)" fg:x="13960882271" fg:w="5015045"/><text x="63.6767%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5,015,045 samples, 0.02%)</title><rect x="63.4267%" y="325" width="0.0228%" height="15" fill="rgb(216,158,51)" fg:x="13960882271" fg:w="5015045"/><text x="63.6767%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (5,015,045 samples, 0.02%)</title><rect x="63.4267%" y="309" width="0.0228%" height="15" fill="rgb(233,14,44)" fg:x="13960882271" fg:w="5015045"/><text x="63.6767%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (5,015,045 samples, 0.02%)</title><rect x="63.4267%" y="293" width="0.0228%" height="15" fill="rgb(237,97,39)" fg:x="13960882271" fg:w="5015045"/><text x="63.6767%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,015,045 samples, 0.02%)</title><rect x="63.4267%" y="277" width="0.0228%" height="15" fill="rgb(218,198,43)" fg:x="13960882271" fg:w="5015045"/><text x="63.6767%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5,015,045 samples, 0.02%)</title><rect x="63.4267%" y="261" width="0.0228%" height="15" fill="rgb(231,104,20)" fg:x="13960882271" fg:w="5015045"/><text x="63.6767%" y="271.50"></text></g><g><title>alloc::alloc::alloc (5,015,045 samples, 0.02%)</title><rect x="63.4267%" y="245" width="0.0228%" height="15" fill="rgb(254,36,13)" fg:x="13960882271" fg:w="5015045"/><text x="63.6767%" y="255.50"></text></g><g><title>__GI___libc_malloc (3,009,027 samples, 0.01%)</title><rect x="63.4359%" y="229" width="0.0137%" height="15" fill="rgb(248,14,50)" fg:x="13962888289" fg:w="3009027"/><text x="63.6859%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (8,024,072 samples, 0.04%)</title><rect x="63.4267%" y="389" width="0.0365%" height="15" fill="rgb(217,107,29)" fg:x="13960882271" fg:w="8024072"/><text x="63.6767%" y="399.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (8,024,072 samples, 0.04%)</title><rect x="63.4267%" y="373" width="0.0365%" height="15" fill="rgb(251,169,33)" fg:x="13960882271" fg:w="8024072"/><text x="63.6767%" y="383.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (18,054,162 samples, 0.08%)</title><rect x="63.3857%" y="405" width="0.0820%" height="15" fill="rgb(217,108,32)" fg:x="13951855190" fg:w="18054162"/><text x="63.6357%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,015,045 samples, 0.02%)</title><rect x="63.4723%" y="309" width="0.0228%" height="15" fill="rgb(219,66,42)" fg:x="13970912361" fg:w="5015045"/><text x="63.7223%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5,015,045 samples, 0.02%)</title><rect x="63.4723%" y="293" width="0.0228%" height="15" fill="rgb(206,180,7)" fg:x="13970912361" fg:w="5015045"/><text x="63.7223%" y="303.50"></text></g><g><title>alloc::alloc::alloc (5,015,045 samples, 0.02%)</title><rect x="63.4723%" y="277" width="0.0228%" height="15" fill="rgb(208,226,31)" fg:x="13970912361" fg:w="5015045"/><text x="63.7223%" y="287.50"></text></g><g><title>__GI___libc_malloc (5,015,045 samples, 0.02%)</title><rect x="63.4723%" y="261" width="0.0228%" height="15" fill="rgb(218,26,49)" fg:x="13970912361" fg:w="5015045"/><text x="63.7223%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6,018,054 samples, 0.03%)</title><rect x="63.4723%" y="389" width="0.0273%" height="15" fill="rgb(233,197,48)" fg:x="13970912361" fg:w="6018054"/><text x="63.7223%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6,018,054 samples, 0.03%)</title><rect x="63.4723%" y="373" width="0.0273%" height="15" fill="rgb(252,181,51)" fg:x="13970912361" fg:w="6018054"/><text x="63.7223%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6,018,054 samples, 0.03%)</title><rect x="63.4723%" y="357" width="0.0273%" height="15" fill="rgb(253,90,19)" fg:x="13970912361" fg:w="6018054"/><text x="63.7223%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (6,018,054 samples, 0.03%)</title><rect x="63.4723%" y="341" width="0.0273%" height="15" fill="rgb(215,171,30)" fg:x="13970912361" fg:w="6018054"/><text x="63.7223%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (6,018,054 samples, 0.03%)</title><rect x="63.4723%" y="325" width="0.0273%" height="15" fill="rgb(214,222,9)" fg:x="13970912361" fg:w="6018054"/><text x="63.7223%" y="335.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (10,030,090 samples, 0.05%)</title><rect x="63.4678%" y="405" width="0.0456%" height="15" fill="rgb(223,3,22)" fg:x="13969909352" fg:w="10030090"/><text x="63.7178%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4,012,036 samples, 0.02%)</title><rect x="63.5133%" y="389" width="0.0182%" height="15" fill="rgb(225,196,46)" fg:x="13979939442" fg:w="4012036"/><text x="63.7633%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,012,036 samples, 0.02%)</title><rect x="63.5133%" y="373" width="0.0182%" height="15" fill="rgb(209,110,37)" fg:x="13979939442" fg:w="4012036"/><text x="63.7633%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,012,036 samples, 0.02%)</title><rect x="63.5133%" y="357" width="0.0182%" height="15" fill="rgb(249,89,12)" fg:x="13979939442" fg:w="4012036"/><text x="63.7633%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,012,036 samples, 0.02%)</title><rect x="63.5133%" y="341" width="0.0182%" height="15" fill="rgb(226,27,33)" fg:x="13979939442" fg:w="4012036"/><text x="63.7633%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,012,036 samples, 0.02%)</title><rect x="63.5133%" y="325" width="0.0182%" height="15" fill="rgb(213,82,22)" fg:x="13979939442" fg:w="4012036"/><text x="63.7633%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,012,036 samples, 0.02%)</title><rect x="63.5133%" y="309" width="0.0182%" height="15" fill="rgb(248,140,0)" fg:x="13979939442" fg:w="4012036"/><text x="63.7633%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,012,036 samples, 0.02%)</title><rect x="63.5133%" y="293" width="0.0182%" height="15" fill="rgb(228,106,3)" fg:x="13979939442" fg:w="4012036"/><text x="63.7633%" y="303.50"></text></g><g><title>alloc::alloc::alloc (4,012,036 samples, 0.02%)</title><rect x="63.5133%" y="277" width="0.0182%" height="15" fill="rgb(209,23,37)" fg:x="13979939442" fg:w="4012036"/><text x="63.7633%" y="287.50"></text></g><g><title>__GI___libc_malloc (4,012,036 samples, 0.02%)</title><rect x="63.5133%" y="261" width="0.0182%" height="15" fill="rgb(241,93,50)" fg:x="13979939442" fg:w="4012036"/><text x="63.7633%" y="271.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (7,021,063 samples, 0.03%)</title><rect x="63.5133%" y="405" width="0.0319%" height="15" fill="rgb(253,46,43)" fg:x="13979939442" fg:w="7021063"/><text x="63.7633%" y="415.50"></text></g><g><title>chlang::board::Position::valid (3,009,027 samples, 0.01%)</title><rect x="63.5452%" y="389" width="0.0137%" height="15" fill="rgb(226,206,43)" fg:x="13986960505" fg:w="3009027"/><text x="63.7952%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5,015,045 samples, 0.02%)</title><rect x="63.5589%" y="389" width="0.0228%" height="15" fill="rgb(217,54,7)" fg:x="13989969532" fg:w="5015045"/><text x="63.8089%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5,015,045 samples, 0.02%)</title><rect x="63.5589%" y="373" width="0.0228%" height="15" fill="rgb(223,5,52)" fg:x="13989969532" fg:w="5015045"/><text x="63.8089%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5,015,045 samples, 0.02%)</title><rect x="63.5589%" y="357" width="0.0228%" height="15" fill="rgb(206,52,46)" fg:x="13989969532" fg:w="5015045"/><text x="63.8089%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (5,015,045 samples, 0.02%)</title><rect x="63.5589%" y="341" width="0.0228%" height="15" fill="rgb(253,136,11)" fg:x="13989969532" fg:w="5015045"/><text x="63.8089%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (5,015,045 samples, 0.02%)</title><rect x="63.5589%" y="325" width="0.0228%" height="15" fill="rgb(208,106,33)" fg:x="13989969532" fg:w="5015045"/><text x="63.8089%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,015,045 samples, 0.02%)</title><rect x="63.5589%" y="309" width="0.0228%" height="15" fill="rgb(206,54,4)" fg:x="13989969532" fg:w="5015045"/><text x="63.8089%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5,015,045 samples, 0.02%)</title><rect x="63.5589%" y="293" width="0.0228%" height="15" fill="rgb(213,3,15)" fg:x="13989969532" fg:w="5015045"/><text x="63.8089%" y="303.50"></text></g><g><title>alloc::alloc::alloc (5,015,045 samples, 0.02%)</title><rect x="63.5589%" y="277" width="0.0228%" height="15" fill="rgb(252,211,39)" fg:x="13989969532" fg:w="5015045"/><text x="63.8089%" y="287.50"></text></g><g><title>__GI___libc_malloc (4,012,036 samples, 0.02%)</title><rect x="63.5635%" y="261" width="0.0182%" height="15" fill="rgb(223,6,36)" fg:x="13990972541" fg:w="4012036"/><text x="63.8135%" y="271.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&lt;&amp;i64&gt;&gt;::add (3,009,027 samples, 0.01%)</title><rect x="63.5908%" y="389" width="0.0137%" height="15" fill="rgb(252,169,45)" fg:x="13996990595" fg:w="3009027"/><text x="63.8408%" y="399.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (3,009,027 samples, 0.01%)</title><rect x="63.5908%" y="373" width="0.0137%" height="15" fill="rgb(212,48,26)" fg:x="13996990595" fg:w="3009027"/><text x="63.8408%" y="383.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (16,048,144 samples, 0.07%)</title><rect x="63.5452%" y="405" width="0.0729%" height="15" fill="rgb(251,102,48)" fg:x="13986960505" fg:w="16048144"/><text x="63.7952%" y="415.50"></text></g><g><title>chlang::board::Board::attacked_by_color (83,249,747 samples, 0.38%)</title><rect x="63.2718%" y="421" width="0.3782%" height="15" fill="rgb(243,208,16)" fg:x="13926779965" fg:w="83249747"/><text x="63.5218%" y="431.50"></text></g><g><title>__rust_alloc (3,009,027 samples, 0.01%)</title><rect x="63.6500%" y="293" width="0.0137%" height="15" fill="rgb(219,96,24)" fg:x="14010029712" fg:w="3009027"/><text x="63.9000%" y="303.50"></text></g><g><title>tcache_get (4,012,036 samples, 0.02%)</title><rect x="63.6637%" y="277" width="0.0182%" height="15" fill="rgb(219,33,29)" fg:x="14013038739" fg:w="4012036"/><text x="63.9137%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (25,075,225 samples, 0.11%)</title><rect x="63.6500%" y="341" width="0.1139%" height="15" fill="rgb(223,176,5)" fg:x="14010029712" fg:w="25075225"/><text x="63.9000%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (25,075,225 samples, 0.11%)</title><rect x="63.6500%" y="325" width="0.1139%" height="15" fill="rgb(228,140,14)" fg:x="14010029712" fg:w="25075225"/><text x="63.9000%" y="335.50"></text></g><g><title>alloc::alloc::alloc (25,075,225 samples, 0.11%)</title><rect x="63.6500%" y="309" width="0.1139%" height="15" fill="rgb(217,179,31)" fg:x="14010029712" fg:w="25075225"/><text x="63.9000%" y="319.50"></text></g><g><title>__GI___libc_malloc (22,066,198 samples, 0.10%)</title><rect x="63.6637%" y="293" width="0.1003%" height="15" fill="rgb(230,9,30)" fg:x="14013038739" fg:w="22066198"/><text x="63.9137%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (26,078,234 samples, 0.12%)</title><rect x="63.6500%" y="389" width="0.1185%" height="15" fill="rgb(230,136,20)" fg:x="14010029712" fg:w="26078234"/><text x="63.9000%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (26,078,234 samples, 0.12%)</title><rect x="63.6500%" y="373" width="0.1185%" height="15" fill="rgb(215,210,22)" fg:x="14010029712" fg:w="26078234"/><text x="63.9000%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (26,078,234 samples, 0.12%)</title><rect x="63.6500%" y="357" width="0.1185%" height="15" fill="rgb(218,43,5)" fg:x="14010029712" fg:w="26078234"/><text x="63.9000%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (28,084,252 samples, 0.13%)</title><rect x="63.6500%" y="421" width="0.1276%" height="15" fill="rgb(216,11,5)" fg:x="14010029712" fg:w="28084252"/><text x="63.9000%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (28,084,252 samples, 0.13%)</title><rect x="63.6500%" y="405" width="0.1276%" height="15" fill="rgb(209,82,29)" fg:x="14010029712" fg:w="28084252"/><text x="63.9000%" y="415.50"></text></g><g><title>core::ptr::write (3,009,027 samples, 0.01%)</title><rect x="63.7776%" y="405" width="0.0137%" height="15" fill="rgb(244,115,12)" fg:x="14038113964" fg:w="3009027"/><text x="64.0276%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (11,033,099 samples, 0.05%)</title><rect x="63.7776%" y="421" width="0.0501%" height="15" fill="rgb(222,82,18)" fg:x="14038113964" fg:w="11033099"/><text x="64.0276%" y="431.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (165,496,485 samples, 0.75%)</title><rect x="63.2080%" y="437" width="0.7519%" height="15" fill="rgb(249,227,8)" fg:x="13912737839" fg:w="165496485"/><text x="63.4580%" y="447.50"></text></g><g><title>chlang::board::Position::valid (50,150,450 samples, 0.23%)</title><rect x="63.9645%" y="421" width="0.2278%" height="15" fill="rgb(253,141,45)" fg:x="14079237333" fg:w="50150450"/><text x="64.2145%" y="431.50"></text></g><g><title>chlang::board::Position::bitboard (8,024,072 samples, 0.04%)</title><rect x="64.1923%" y="421" width="0.0365%" height="15" fill="rgb(234,184,4)" fg:x="14129387783" fg:w="8024072"/><text x="64.4423%" y="431.50"></text></g><g><title>__rust_alloc (6,018,054 samples, 0.03%)</title><rect x="64.2288%" y="293" width="0.0273%" height="15" fill="rgb(218,194,23)" fg:x="14137411855" fg:w="6018054"/><text x="64.4788%" y="303.50"></text></g><g><title>tcache_get (10,030,090 samples, 0.05%)</title><rect x="64.2652%" y="277" width="0.0456%" height="15" fill="rgb(235,66,41)" fg:x="14145435927" fg:w="10030090"/><text x="64.5152%" y="287.50"></text></g><g><title>__GI___libc_malloc (63,189,567 samples, 0.29%)</title><rect x="64.2652%" y="293" width="0.2871%" height="15" fill="rgb(245,217,1)" fg:x="14145435927" fg:w="63189567"/><text x="64.5152%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (73,219,657 samples, 0.33%)</title><rect x="64.2288%" y="341" width="0.3326%" height="15" fill="rgb(229,91,1)" fg:x="14137411855" fg:w="73219657"/><text x="64.4788%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (73,219,657 samples, 0.33%)</title><rect x="64.2288%" y="325" width="0.3326%" height="15" fill="rgb(207,101,30)" fg:x="14137411855" fg:w="73219657"/><text x="64.4788%" y="335.50"></text></g><g><title>alloc::alloc::alloc (73,219,657 samples, 0.33%)</title><rect x="64.2288%" y="309" width="0.3326%" height="15" fill="rgb(223,82,49)" fg:x="14137411855" fg:w="73219657"/><text x="64.4788%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (77,231,693 samples, 0.35%)</title><rect x="64.2288%" y="389" width="0.3509%" height="15" fill="rgb(218,167,17)" fg:x="14137411855" fg:w="77231693"/><text x="64.4788%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (77,231,693 samples, 0.35%)</title><rect x="64.2288%" y="373" width="0.3509%" height="15" fill="rgb(208,103,14)" fg:x="14137411855" fg:w="77231693"/><text x="64.4788%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (77,231,693 samples, 0.35%)</title><rect x="64.2288%" y="357" width="0.3509%" height="15" fill="rgb(238,20,8)" fg:x="14137411855" fg:w="77231693"/><text x="64.4788%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (79,237,711 samples, 0.36%)</title><rect x="64.2288%" y="421" width="0.3600%" height="15" fill="rgb(218,80,54)" fg:x="14137411855" fg:w="79237711"/><text x="64.4788%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (79,237,711 samples, 0.36%)</title><rect x="64.2288%" y="405" width="0.3600%" height="15" fill="rgb(240,144,17)" fg:x="14137411855" fg:w="79237711"/><text x="64.4788%" y="415.50"></text></g><g><title>core::ptr::write (12,036,108 samples, 0.05%)</title><rect x="64.5887%" y="405" width="0.0547%" height="15" fill="rgb(245,27,50)" fg:x="14216649566" fg:w="12036108"/><text x="64.8387%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (102,306,918 samples, 0.46%)</title><rect x="64.5887%" y="421" width="0.4648%" height="15" fill="rgb(251,51,7)" fg:x="14216649566" fg:w="102306918"/><text x="64.8387%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&lt;&amp;i64&gt;&gt;::add (19,057,171 samples, 0.09%)</title><rect x="65.0535%" y="421" width="0.0866%" height="15" fill="rgb(245,217,29)" fg:x="14318956484" fg:w="19057171"/><text x="65.3035%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (19,057,171 samples, 0.09%)</title><rect x="65.0535%" y="405" width="0.0866%" height="15" fill="rgb(221,176,29)" fg:x="14318956484" fg:w="19057171"/><text x="65.3035%" y="415.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (340,020,051 samples, 1.54%)</title><rect x="63.9599%" y="437" width="1.5448%" height="15" fill="rgb(212,180,24)" fg:x="14078234324" fg:w="340020051"/><text x="64.2099%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (9,027,081 samples, 0.04%)</title><rect x="65.5047%" y="405" width="0.0410%" height="15" fill="rgb(254,24,2)" fg:x="14418254375" fg:w="9027081"/><text x="65.7547%" y="415.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (9,027,081 samples, 0.04%)</title><rect x="65.5047%" y="389" width="0.0410%" height="15" fill="rgb(230,100,2)" fg:x="14418254375" fg:w="9027081"/><text x="65.7547%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9,027,081 samples, 0.04%)</title><rect x="65.5047%" y="373" width="0.0410%" height="15" fill="rgb(219,142,25)" fg:x="14418254375" fg:w="9027081"/><text x="65.7547%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9,027,081 samples, 0.04%)</title><rect x="65.5047%" y="357" width="0.0410%" height="15" fill="rgb(240,73,43)" fg:x="14418254375" fg:w="9027081"/><text x="65.7547%" y="367.50"></text></g><g><title>alloc::raw_vec::layout_array (4,012,036 samples, 0.02%)</title><rect x="65.5457%" y="325" width="0.0182%" height="15" fill="rgb(214,114,15)" fg:x="14427281456" fg:w="4012036"/><text x="65.7957%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::repeat (4,012,036 samples, 0.02%)</title><rect x="65.5457%" y="309" width="0.0182%" height="15" fill="rgb(207,130,4)" fg:x="14427281456" fg:w="4012036"/><text x="65.7957%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (4,012,036 samples, 0.02%)</title><rect x="65.5457%" y="293" width="0.0182%" height="15" fill="rgb(221,25,40)" fg:x="14427281456" fg:w="4012036"/><text x="65.7957%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (4,012,036 samples, 0.02%)</title><rect x="65.5457%" y="277" width="0.0182%" height="15" fill="rgb(241,184,7)" fg:x="14427281456" fg:w="4012036"/><text x="65.7957%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (4,012,036 samples, 0.02%)</title><rect x="65.5457%" y="261" width="0.0182%" height="15" fill="rgb(235,159,4)" fg:x="14427281456" fg:w="4012036"/><text x="65.7957%" y="271.50"></text></g><g><title>__rust_alloc (3,009,027 samples, 0.01%)</title><rect x="65.5639%" y="277" width="0.0137%" height="15" fill="rgb(214,87,48)" fg:x="14431293492" fg:w="3009027"/><text x="65.8139%" y="287.50"></text></g><g><title>tcache_get (6,018,054 samples, 0.03%)</title><rect x="65.5867%" y="261" width="0.0273%" height="15" fill="rgb(246,198,24)" fg:x="14436308537" fg:w="6018054"/><text x="65.8367%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27,081,243 samples, 0.12%)</title><rect x="65.5639%" y="325" width="0.1230%" height="15" fill="rgb(209,66,40)" fg:x="14431293492" fg:w="27081243"/><text x="65.8139%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27,081,243 samples, 0.12%)</title><rect x="65.5639%" y="309" width="0.1230%" height="15" fill="rgb(233,147,39)" fg:x="14431293492" fg:w="27081243"/><text x="65.8139%" y="319.50"></text></g><g><title>alloc::alloc::alloc (27,081,243 samples, 0.12%)</title><rect x="65.5639%" y="293" width="0.1230%" height="15" fill="rgb(231,145,52)" fg:x="14431293492" fg:w="27081243"/><text x="65.8139%" y="303.50"></text></g><g><title>__GI___libc_malloc (22,066,198 samples, 0.10%)</title><rect x="65.5867%" y="277" width="0.1003%" height="15" fill="rgb(206,20,26)" fg:x="14436308537" fg:w="22066198"/><text x="65.8367%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (33,099,297 samples, 0.15%)</title><rect x="65.5457%" y="405" width="0.1504%" height="15" fill="rgb(238,220,4)" fg:x="14427281456" fg:w="33099297"/><text x="65.7957%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (33,099,297 samples, 0.15%)</title><rect x="65.5457%" y="389" width="0.1504%" height="15" fill="rgb(252,195,42)" fg:x="14427281456" fg:w="33099297"/><text x="65.7957%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (33,099,297 samples, 0.15%)</title><rect x="65.5457%" y="373" width="0.1504%" height="15" fill="rgb(209,10,6)" fg:x="14427281456" fg:w="33099297"/><text x="65.7957%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (33,099,297 samples, 0.15%)</title><rect x="65.5457%" y="357" width="0.1504%" height="15" fill="rgb(229,3,52)" fg:x="14427281456" fg:w="33099297"/><text x="65.7957%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (33,099,297 samples, 0.15%)</title><rect x="65.5457%" y="341" width="0.1504%" height="15" fill="rgb(253,49,37)" fg:x="14427281456" fg:w="33099297"/><text x="65.7957%" y="351.50"></text></g><g><title>core::ptr::write (15,045,135 samples, 0.07%)</title><rect x="65.7006%" y="229" width="0.0684%" height="15" fill="rgb(240,103,49)" fg:x="14461383762" fg:w="15045135"/><text x="65.9506%" y="239.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (16,048,144 samples, 0.07%)</title><rect x="65.7006%" y="277" width="0.0729%" height="15" fill="rgb(250,182,30)" fg:x="14461383762" fg:w="16048144"/><text x="65.9506%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (16,048,144 samples, 0.07%)</title><rect x="65.7006%" y="261" width="0.0729%" height="15" fill="rgb(248,8,30)" fg:x="14461383762" fg:w="16048144"/><text x="65.9506%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (16,048,144 samples, 0.07%)</title><rect x="65.7006%" y="245" width="0.0729%" height="15" fill="rgb(237,120,30)" fg:x="14461383762" fg:w="16048144"/><text x="65.9506%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (20,060,180 samples, 0.09%)</title><rect x="65.6961%" y="341" width="0.0911%" height="15" fill="rgb(221,146,34)" fg:x="14460380753" fg:w="20060180"/><text x="65.9461%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20,060,180 samples, 0.09%)</title><rect x="65.6961%" y="325" width="0.0911%" height="15" fill="rgb(242,55,13)" fg:x="14460380753" fg:w="20060180"/><text x="65.9461%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20,060,180 samples, 0.09%)</title><rect x="65.6961%" y="309" width="0.0911%" height="15" fill="rgb(242,112,31)" fg:x="14460380753" fg:w="20060180"/><text x="65.9461%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20,060,180 samples, 0.09%)</title><rect x="65.6961%" y="293" width="0.0911%" height="15" fill="rgb(249,192,27)" fg:x="14460380753" fg:w="20060180"/><text x="65.9461%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (22,066,198 samples, 0.10%)</title><rect x="65.6961%" y="405" width="0.1003%" height="15" fill="rgb(208,204,44)" fg:x="14460380753" fg:w="22066198"/><text x="65.9461%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (22,066,198 samples, 0.10%)</title><rect x="65.6961%" y="389" width="0.1003%" height="15" fill="rgb(208,93,54)" fg:x="14460380753" fg:w="22066198"/><text x="65.9461%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (22,066,198 samples, 0.10%)</title><rect x="65.6961%" y="373" width="0.1003%" height="15" fill="rgb(242,1,31)" fg:x="14460380753" fg:w="22066198"/><text x="65.9461%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (22,066,198 samples, 0.10%)</title><rect x="65.6961%" y="357" width="0.1003%" height="15" fill="rgb(241,83,25)" fg:x="14460380753" fg:w="22066198"/><text x="65.9461%" y="367.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (81,243,729 samples, 0.37%)</title><rect x="65.5047%" y="421" width="0.3691%" height="15" fill="rgb(205,169,50)" fg:x="14418254375" fg:w="81243729"/><text x="65.7547%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (82,246,738 samples, 0.37%)</title><rect x="65.5047%" y="437" width="0.3737%" height="15" fill="rgb(239,186,37)" fg:x="14418254375" fg:w="82246738"/><text x="65.7547%" y="447.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (1,406,218,618 samples, 6.39%)</title><rect x="60.2370%" y="453" width="6.3887%" height="15" fill="rgb(205,221,10)" fg:x="13258775971" fg:w="1406218618"/><text x="60.4870%" y="463.50">chlang::..</text></g><g><title>core::ptr::write (74,222,666 samples, 0.34%)</title><rect x="66.6257%" y="437" width="0.3372%" height="15" fill="rgb(218,196,15)" fg:x="14664994589" fg:w="74222666"/><text x="66.8757%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (82,246,738 samples, 0.37%)</title><rect x="66.6257%" y="453" width="0.3737%" height="15" fill="rgb(218,196,35)" fg:x="14664994589" fg:w="82246738"/><text x="66.8757%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (33,099,297 samples, 0.15%)</title><rect x="67.0039%" y="453" width="0.1504%" height="15" fill="rgb(233,63,24)" fg:x="14748244336" fg:w="33099297"/><text x="67.2539%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (33,099,297 samples, 0.15%)</title><rect x="67.0039%" y="437" width="0.1504%" height="15" fill="rgb(225,8,4)" fg:x="14748244336" fg:w="33099297"/><text x="67.2539%" y="447.50"></text></g><g><title>chlang::board::Board::make_move (7,612,838,310 samples, 34.59%)</title><rect x="33.8847%" y="469" width="34.5865%" height="15" fill="rgb(234,105,35)" fg:x="7458374924" fg:w="7612838310"/><text x="34.1347%" y="479.50">chlang::board::Board::make_move</text></g><g><title>__rust_dealloc (6,018,054 samples, 0.03%)</title><rect x="68.4712%" y="309" width="0.0273%" height="15" fill="rgb(236,21,32)" fg:x="15071213234" fg:w="6018054"/><text x="68.7212%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,009,027 samples, 0.01%)</title><rect x="68.4985%" y="293" width="0.0137%" height="15" fill="rgb(228,109,6)" fg:x="15077231288" fg:w="3009027"/><text x="68.7485%" y="303.50"></text></g><g><title>__rdl_dealloc (5,015,045 samples, 0.02%)</title><rect x="68.4985%" y="309" width="0.0228%" height="15" fill="rgb(229,215,31)" fg:x="15077231288" fg:w="5015045"/><text x="68.7485%" y="319.50"></text></g><g><title>tcache_put (5,015,045 samples, 0.02%)</title><rect x="68.5213%" y="277" width="0.0228%" height="15" fill="rgb(221,52,54)" fg:x="15082246333" fg:w="5015045"/><text x="68.7713%" y="287.50"></text></g><g><title>_int_free (48,144,432 samples, 0.22%)</title><rect x="68.5213%" y="293" width="0.2187%" height="15" fill="rgb(252,129,43)" fg:x="15082246333" fg:w="48144432"/><text x="68.7713%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (67,201,603 samples, 0.31%)</title><rect x="68.4712%" y="453" width="0.3053%" height="15" fill="rgb(248,183,27)" fg:x="15071213234" fg:w="67201603"/><text x="68.7212%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (67,201,603 samples, 0.31%)</title><rect x="68.4712%" y="437" width="0.3053%" height="15" fill="rgb(250,0,22)" fg:x="15071213234" fg:w="67201603"/><text x="68.7212%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (67,201,603 samples, 0.31%)</title><rect x="68.4712%" y="421" width="0.3053%" height="15" fill="rgb(213,166,10)" fg:x="15071213234" fg:w="67201603"/><text x="68.7212%" y="431.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (67,201,603 samples, 0.31%)</title><rect x="68.4712%" y="405" width="0.3053%" height="15" fill="rgb(207,163,36)" fg:x="15071213234" fg:w="67201603"/><text x="68.7212%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (67,201,603 samples, 0.31%)</title><rect x="68.4712%" y="389" width="0.3053%" height="15" fill="rgb(208,122,22)" fg:x="15071213234" fg:w="67201603"/><text x="68.7212%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (67,201,603 samples, 0.31%)</title><rect x="68.4712%" y="373" width="0.3053%" height="15" fill="rgb(207,104,49)" fg:x="15071213234" fg:w="67201603"/><text x="68.7212%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (67,201,603 samples, 0.31%)</title><rect x="68.4712%" y="357" width="0.3053%" height="15" fill="rgb(248,211,50)" fg:x="15071213234" fg:w="67201603"/><text x="68.7212%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (67,201,603 samples, 0.31%)</title><rect x="68.4712%" y="341" width="0.3053%" height="15" fill="rgb(217,13,45)" fg:x="15071213234" fg:w="67201603"/><text x="68.7212%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (67,201,603 samples, 0.31%)</title><rect x="68.4712%" y="325" width="0.3053%" height="15" fill="rgb(211,216,49)" fg:x="15071213234" fg:w="67201603"/><text x="68.7212%" y="335.50"></text></g><g><title>__GI___libc_free (56,168,504 samples, 0.26%)</title><rect x="68.5213%" y="309" width="0.2552%" height="15" fill="rgb(221,58,53)" fg:x="15082246333" fg:w="56168504"/><text x="68.7713%" y="319.50"></text></g><g><title>_int_free (6,018,054 samples, 0.03%)</title><rect x="68.7810%" y="341" width="0.0273%" height="15" fill="rgb(220,112,41)" fg:x="15139417846" fg:w="6018054"/><text x="69.0310%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::board::Position&gt;&gt; (10,030,090 samples, 0.05%)</title><rect x="68.7765%" y="453" width="0.0456%" height="15" fill="rgb(236,38,28)" fg:x="15138414837" fg:w="10030090"/><text x="69.0265%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::board::Position&gt;&gt; (10,030,090 samples, 0.05%)</title><rect x="68.7765%" y="437" width="0.0456%" height="15" fill="rgb(227,195,22)" fg:x="15138414837" fg:w="10030090"/><text x="69.0265%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10,030,090 samples, 0.05%)</title><rect x="68.7765%" y="421" width="0.0456%" height="15" fill="rgb(214,55,33)" fg:x="15138414837" fg:w="10030090"/><text x="69.0265%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (10,030,090 samples, 0.05%)</title><rect x="68.7765%" y="405" width="0.0456%" height="15" fill="rgb(248,80,13)" fg:x="15138414837" fg:w="10030090"/><text x="69.0265%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10,030,090 samples, 0.05%)</title><rect x="68.7765%" y="389" width="0.0456%" height="15" fill="rgb(238,52,6)" fg:x="15138414837" fg:w="10030090"/><text x="69.0265%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (10,030,090 samples, 0.05%)</title><rect x="68.7765%" y="373" width="0.0456%" height="15" fill="rgb(224,198,47)" fg:x="15138414837" fg:w="10030090"/><text x="69.0265%" y="383.50"></text></g><g><title>__GI___libc_free (9,027,081 samples, 0.04%)</title><rect x="68.7810%" y="357" width="0.0410%" height="15" fill="rgb(233,171,20)" fg:x="15139417846" fg:w="9027081"/><text x="69.0310%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (210,631,890 samples, 0.96%)</title><rect x="68.8221%" y="453" width="0.9569%" height="15" fill="rgb(241,30,25)" fg:x="15148444927" fg:w="210631890"/><text x="69.0721%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (3,009,027 samples, 0.01%)</title><rect x="69.7790%" y="421" width="0.0137%" height="15" fill="rgb(207,171,38)" fg:x="15359076817" fg:w="3009027"/><text x="70.0290%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4,012,036 samples, 0.02%)</title><rect x="69.7790%" y="453" width="0.0182%" height="15" fill="rgb(234,70,1)" fg:x="15359076817" fg:w="4012036"/><text x="70.0290%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4,012,036 samples, 0.02%)</title><rect x="69.7790%" y="437" width="0.0182%" height="15" fill="rgb(232,178,18)" fg:x="15359076817" fg:w="4012036"/><text x="70.0290%" y="447.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5,015,045 samples, 0.02%)</title><rect x="69.8018%" y="309" width="0.0228%" height="15" fill="rgb(241,78,40)" fg:x="15364091862" fg:w="5015045"/><text x="70.0518%" y="319.50"></text></g><g><title>__rdl_dealloc (6,018,054 samples, 0.03%)</title><rect x="69.8018%" y="325" width="0.0273%" height="15" fill="rgb(222,35,25)" fg:x="15364091862" fg:w="6018054"/><text x="70.0518%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (17,051,153 samples, 0.08%)</title><rect x="69.7972%" y="437" width="0.0775%" height="15" fill="rgb(207,92,16)" fg:x="15363088853" fg:w="17051153"/><text x="70.0472%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (17,051,153 samples, 0.08%)</title><rect x="69.7972%" y="421" width="0.0775%" height="15" fill="rgb(216,59,51)" fg:x="15363088853" fg:w="17051153"/><text x="70.0472%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (17,051,153 samples, 0.08%)</title><rect x="69.7972%" y="405" width="0.0775%" height="15" fill="rgb(213,80,28)" fg:x="15363088853" fg:w="17051153"/><text x="70.0472%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17,051,153 samples, 0.08%)</title><rect x="69.7972%" y="389" width="0.0775%" height="15" fill="rgb(220,93,7)" fg:x="15363088853" fg:w="17051153"/><text x="70.0472%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (17,051,153 samples, 0.08%)</title><rect x="69.7972%" y="373" width="0.0775%" height="15" fill="rgb(225,24,44)" fg:x="15363088853" fg:w="17051153"/><text x="70.0472%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17,051,153 samples, 0.08%)</title><rect x="69.7972%" y="357" width="0.0775%" height="15" fill="rgb(243,74,40)" fg:x="15363088853" fg:w="17051153"/><text x="70.0472%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (17,051,153 samples, 0.08%)</title><rect x="69.7972%" y="341" width="0.0775%" height="15" fill="rgb(228,39,7)" fg:x="15363088853" fg:w="17051153"/><text x="70.0472%" y="351.50"></text></g><g><title>__GI___libc_free (10,030,090 samples, 0.05%)</title><rect x="69.8291%" y="325" width="0.0456%" height="15" fill="rgb(227,79,8)" fg:x="15370109916" fg:w="10030090"/><text x="70.0791%" y="335.50"></text></g><g><title>_int_free (10,030,090 samples, 0.05%)</title><rect x="69.8291%" y="309" width="0.0456%" height="15" fill="rgb(236,58,11)" fg:x="15370109916" fg:w="10030090"/><text x="70.0791%" y="319.50"></text></g><g><title>chlang::board::Board::piece_type (22,066,198 samples, 0.10%)</title><rect x="69.8747%" y="437" width="0.1003%" height="15" fill="rgb(249,63,35)" fg:x="15380140006" fg:w="22066198"/><text x="70.1247%" y="447.50"></text></g><g><title>chlang::board::Position::valid (3,009,027 samples, 0.01%)</title><rect x="69.9749%" y="421" width="0.0137%" height="15" fill="rgb(252,114,16)" fg:x="15402206204" fg:w="3009027"/><text x="70.2249%" y="431.50"></text></g><g><title>chlang::board::Position::bitboard (5,015,045 samples, 0.02%)</title><rect x="69.9886%" y="421" width="0.0228%" height="15" fill="rgb(254,151,24)" fg:x="15405215231" fg:w="5015045"/><text x="70.2386%" y="431.50"></text></g><g><title>__GI___libc_malloc (7,021,063 samples, 0.03%)</title><rect x="70.0205%" y="293" width="0.0319%" height="15" fill="rgb(253,54,39)" fg:x="15412236294" fg:w="7021063"/><text x="70.2705%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10,030,090 samples, 0.05%)</title><rect x="70.0114%" y="341" width="0.0456%" height="15" fill="rgb(243,25,45)" fg:x="15410230276" fg:w="10030090"/><text x="70.2614%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10,030,090 samples, 0.05%)</title><rect x="70.0114%" y="325" width="0.0456%" height="15" fill="rgb(234,134,9)" fg:x="15410230276" fg:w="10030090"/><text x="70.2614%" y="335.50"></text></g><g><title>alloc::alloc::alloc (10,030,090 samples, 0.05%)</title><rect x="70.0114%" y="309" width="0.0456%" height="15" fill="rgb(227,166,31)" fg:x="15410230276" fg:w="10030090"/><text x="70.2614%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (12,036,108 samples, 0.05%)</title><rect x="70.0114%" y="421" width="0.0547%" height="15" fill="rgb(245,143,41)" fg:x="15410230276" fg:w="12036108"/><text x="70.2614%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12,036,108 samples, 0.05%)</title><rect x="70.0114%" y="405" width="0.0547%" height="15" fill="rgb(238,181,32)" fg:x="15410230276" fg:w="12036108"/><text x="70.2614%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12,036,108 samples, 0.05%)</title><rect x="70.0114%" y="389" width="0.0547%" height="15" fill="rgb(224,113,18)" fg:x="15410230276" fg:w="12036108"/><text x="70.2614%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (12,036,108 samples, 0.05%)</title><rect x="70.0114%" y="373" width="0.0547%" height="15" fill="rgb(240,229,28)" fg:x="15410230276" fg:w="12036108"/><text x="70.2614%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (12,036,108 samples, 0.05%)</title><rect x="70.0114%" y="357" width="0.0547%" height="15" fill="rgb(250,185,3)" fg:x="15410230276" fg:w="12036108"/><text x="70.2614%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8,024,072 samples, 0.04%)</title><rect x="70.0661%" y="421" width="0.0365%" height="15" fill="rgb(212,59,25)" fg:x="15422266384" fg:w="8024072"/><text x="70.3161%" y="431.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (48,144,432 samples, 0.22%)</title><rect x="69.9749%" y="437" width="0.2187%" height="15" fill="rgb(221,87,20)" fg:x="15402206204" fg:w="48144432"/><text x="70.2249%" y="447.50"></text></g><g><title>__rdl_dealloc (3,009,027 samples, 0.01%)</title><rect x="70.2073%" y="309" width="0.0137%" height="15" fill="rgb(213,74,28)" fg:x="15453359663" fg:w="3009027"/><text x="70.4573%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,009,027 samples, 0.01%)</title><rect x="70.2073%" y="293" width="0.0137%" height="15" fill="rgb(224,132,34)" fg:x="15453359663" fg:w="3009027"/><text x="70.4573%" y="303.50"></text></g><g><title>tcache_put (4,012,036 samples, 0.02%)</title><rect x="70.2210%" y="277" width="0.0182%" height="15" fill="rgb(222,101,24)" fg:x="15456368690" fg:w="4012036"/><text x="70.4710%" y="287.50"></text></g><g><title>_int_free (21,063,189 samples, 0.10%)</title><rect x="70.2210%" y="293" width="0.0957%" height="15" fill="rgb(254,142,4)" fg:x="15456368690" fg:w="21063189"/><text x="70.4710%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (35,105,315 samples, 0.16%)</title><rect x="70.1937%" y="357" width="0.1595%" height="15" fill="rgb(230,229,49)" fg:x="15450350636" fg:w="35105315"/><text x="70.4437%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (34,102,306 samples, 0.15%)</title><rect x="70.1982%" y="341" width="0.1549%" height="15" fill="rgb(238,70,47)" fg:x="15451353645" fg:w="34102306"/><text x="70.4482%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (34,102,306 samples, 0.15%)</title><rect x="70.1982%" y="325" width="0.1549%" height="15" fill="rgb(231,160,17)" fg:x="15451353645" fg:w="34102306"/><text x="70.4482%" y="335.50"></text></g><g><title>__GI___libc_free (29,087,261 samples, 0.13%)</title><rect x="70.2210%" y="309" width="0.1321%" height="15" fill="rgb(218,68,53)" fg:x="15456368690" fg:w="29087261"/><text x="70.4710%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (38,114,342 samples, 0.17%)</title><rect x="70.1937%" y="421" width="0.1732%" height="15" fill="rgb(236,111,10)" fg:x="15450350636" fg:w="38114342"/><text x="70.4437%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (38,114,342 samples, 0.17%)</title><rect x="70.1937%" y="405" width="0.1732%" height="15" fill="rgb(224,34,41)" fg:x="15450350636" fg:w="38114342"/><text x="70.4437%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (38,114,342 samples, 0.17%)</title><rect x="70.1937%" y="389" width="0.1732%" height="15" fill="rgb(241,118,19)" fg:x="15450350636" fg:w="38114342"/><text x="70.4437%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38,114,342 samples, 0.17%)</title><rect x="70.1937%" y="373" width="0.1732%" height="15" fill="rgb(238,129,25)" fg:x="15450350636" fg:w="38114342"/><text x="70.4437%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some_and (3,009,027 samples, 0.01%)</title><rect x="70.3668%" y="421" width="0.0137%" height="15" fill="rgb(238,22,31)" fg:x="15488464978" fg:w="3009027"/><text x="70.6168%" y="431.50"></text></g><g><title>chlang::cmove::Move::new (3,009,027 samples, 0.01%)</title><rect x="70.3805%" y="421" width="0.0137%" height="15" fill="rgb(222,174,48)" fg:x="15491474005" fg:w="3009027"/><text x="70.6305%" y="431.50"></text></g><g><title>chlang::board::Position::valid (3,009,027 samples, 0.01%)</title><rect x="70.3942%" y="421" width="0.0137%" height="15" fill="rgb(206,152,40)" fg:x="15494483032" fg:w="3009027"/><text x="70.6442%" y="431.50"></text></g><g><title>__rdl_alloc (3,009,027 samples, 0.01%)</title><rect x="70.4170%" y="293" width="0.0137%" height="15" fill="rgb(218,99,54)" fg:x="15499498077" fg:w="3009027"/><text x="70.6670%" y="303.50"></text></g><g><title>tcache_get (6,018,054 samples, 0.03%)</title><rect x="70.4306%" y="277" width="0.0273%" height="15" fill="rgb(220,174,26)" fg:x="15502507104" fg:w="6018054"/><text x="70.6806%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (21,063,189 samples, 0.10%)</title><rect x="70.4078%" y="421" width="0.0957%" height="15" fill="rgb(245,116,9)" fg:x="15497492059" fg:w="21063189"/><text x="70.6578%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (21,063,189 samples, 0.10%)</title><rect x="70.4078%" y="405" width="0.0957%" height="15" fill="rgb(209,72,35)" fg:x="15497492059" fg:w="21063189"/><text x="70.6578%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (21,063,189 samples, 0.10%)</title><rect x="70.4078%" y="389" width="0.0957%" height="15" fill="rgb(226,126,21)" fg:x="15497492059" fg:w="21063189"/><text x="70.6578%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (21,063,189 samples, 0.10%)</title><rect x="70.4078%" y="373" width="0.0957%" height="15" fill="rgb(227,192,1)" fg:x="15497492059" fg:w="21063189"/><text x="70.6578%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (21,063,189 samples, 0.10%)</title><rect x="70.4078%" y="357" width="0.0957%" height="15" fill="rgb(237,180,29)" fg:x="15497492059" fg:w="21063189"/><text x="70.6578%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (21,063,189 samples, 0.10%)</title><rect x="70.4078%" y="341" width="0.0957%" height="15" fill="rgb(230,197,35)" fg:x="15497492059" fg:w="21063189"/><text x="70.6578%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (21,063,189 samples, 0.10%)</title><rect x="70.4078%" y="325" width="0.0957%" height="15" fill="rgb(246,193,31)" fg:x="15497492059" fg:w="21063189"/><text x="70.6578%" y="335.50"></text></g><g><title>alloc::alloc::alloc (21,063,189 samples, 0.10%)</title><rect x="70.4078%" y="309" width="0.0957%" height="15" fill="rgb(241,36,4)" fg:x="15497492059" fg:w="21063189"/><text x="70.6578%" y="319.50"></text></g><g><title>__GI___libc_malloc (16,048,144 samples, 0.07%)</title><rect x="70.4306%" y="293" width="0.0729%" height="15" fill="rgb(241,130,17)" fg:x="15502507104" fg:w="16048144"/><text x="70.6806%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (4,012,036 samples, 0.02%)</title><rect x="70.5035%" y="421" width="0.0182%" height="15" fill="rgb(206,137,32)" fg:x="15518555248" fg:w="4012036"/><text x="70.7535%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (8,024,072 samples, 0.04%)</title><rect x="70.5309%" y="389" width="0.0365%" height="15" fill="rgb(237,228,51)" fg:x="15524573302" fg:w="8024072"/><text x="70.7809%" y="399.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (8,024,072 samples, 0.04%)</title><rect x="70.5309%" y="373" width="0.0365%" height="15" fill="rgb(243,6,42)" fg:x="15524573302" fg:w="8024072"/><text x="70.7809%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,024,072 samples, 0.04%)</title><rect x="70.5309%" y="357" width="0.0365%" height="15" fill="rgb(251,74,28)" fg:x="15524573302" fg:w="8024072"/><text x="70.7809%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,024,072 samples, 0.04%)</title><rect x="70.5309%" y="341" width="0.0365%" height="15" fill="rgb(218,20,49)" fg:x="15524573302" fg:w="8024072"/><text x="70.7809%" y="351.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (3,009,027 samples, 0.01%)</title><rect x="70.5673%" y="277" width="0.0137%" height="15" fill="rgb(238,28,14)" fg:x="15532597374" fg:w="3009027"/><text x="70.8173%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (3,009,027 samples, 0.01%)</title><rect x="70.5673%" y="261" width="0.0137%" height="15" fill="rgb(229,40,46)" fg:x="15532597374" fg:w="3009027"/><text x="70.8173%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (3,009,027 samples, 0.01%)</title><rect x="70.5673%" y="245" width="0.0137%" height="15" fill="rgb(244,195,20)" fg:x="15532597374" fg:w="3009027"/><text x="70.8173%" y="255.50"></text></g><g><title>alloc::raw_vec::layout_array (6,018,054 samples, 0.03%)</title><rect x="70.5673%" y="309" width="0.0273%" height="15" fill="rgb(253,56,35)" fg:x="15532597374" fg:w="6018054"/><text x="70.8173%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::repeat (6,018,054 samples, 0.03%)</title><rect x="70.5673%" y="293" width="0.0273%" height="15" fill="rgb(210,149,44)" fg:x="15532597374" fg:w="6018054"/><text x="70.8173%" y="303.50"></text></g><g><title>__rust_alloc (7,021,063 samples, 0.03%)</title><rect x="70.5947%" y="261" width="0.0319%" height="15" fill="rgb(240,135,12)" fg:x="15538615428" fg:w="7021063"/><text x="70.8447%" y="271.50"></text></g><g><title>tcache_get (5,015,045 samples, 0.02%)</title><rect x="70.6311%" y="245" width="0.0228%" height="15" fill="rgb(251,24,50)" fg:x="15546639500" fg:w="5015045"/><text x="70.8811%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20,060,180 samples, 0.09%)</title><rect x="70.5947%" y="309" width="0.0911%" height="15" fill="rgb(243,200,47)" fg:x="15538615428" fg:w="20060180"/><text x="70.8447%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20,060,180 samples, 0.09%)</title><rect x="70.5947%" y="293" width="0.0911%" height="15" fill="rgb(224,166,26)" fg:x="15538615428" fg:w="20060180"/><text x="70.8447%" y="303.50"></text></g><g><title>alloc::alloc::alloc (20,060,180 samples, 0.09%)</title><rect x="70.5947%" y="277" width="0.0911%" height="15" fill="rgb(233,0,47)" fg:x="15538615428" fg:w="20060180"/><text x="70.8447%" y="287.50"></text></g><g><title>__GI___libc_malloc (12,036,108 samples, 0.05%)</title><rect x="70.6311%" y="261" width="0.0547%" height="15" fill="rgb(253,80,5)" fg:x="15546639500" fg:w="12036108"/><text x="70.8811%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (28,084,252 samples, 0.13%)</title><rect x="70.5673%" y="389" width="0.1276%" height="15" fill="rgb(214,133,25)" fg:x="15532597374" fg:w="28084252"/><text x="70.8173%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (28,084,252 samples, 0.13%)</title><rect x="70.5673%" y="373" width="0.1276%" height="15" fill="rgb(209,27,14)" fg:x="15532597374" fg:w="28084252"/><text x="70.8173%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (28,084,252 samples, 0.13%)</title><rect x="70.5673%" y="357" width="0.1276%" height="15" fill="rgb(219,102,51)" fg:x="15532597374" fg:w="28084252"/><text x="70.8173%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (28,084,252 samples, 0.13%)</title><rect x="70.5673%" y="341" width="0.1276%" height="15" fill="rgb(237,18,16)" fg:x="15532597374" fg:w="28084252"/><text x="70.8173%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (28,084,252 samples, 0.13%)</title><rect x="70.5673%" y="325" width="0.1276%" height="15" fill="rgb(241,85,17)" fg:x="15532597374" fg:w="28084252"/><text x="70.8173%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3,009,027 samples, 0.01%)</title><rect x="70.6949%" y="325" width="0.0137%" height="15" fill="rgb(236,90,42)" fg:x="15560681626" fg:w="3009027"/><text x="70.9449%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,009,027 samples, 0.01%)</title><rect x="70.6949%" y="309" width="0.0137%" height="15" fill="rgb(249,57,21)" fg:x="15560681626" fg:w="3009027"/><text x="70.9449%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,009,027 samples, 0.01%)</title><rect x="70.6949%" y="293" width="0.0137%" height="15" fill="rgb(243,12,36)" fg:x="15560681626" fg:w="3009027"/><text x="70.9449%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,009,027 samples, 0.01%)</title><rect x="70.6949%" y="277" width="0.0137%" height="15" fill="rgb(253,128,47)" fg:x="15560681626" fg:w="3009027"/><text x="70.9449%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4,012,036 samples, 0.02%)</title><rect x="70.6949%" y="389" width="0.0182%" height="15" fill="rgb(207,33,20)" fg:x="15560681626" fg:w="4012036"/><text x="70.9449%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (4,012,036 samples, 0.02%)</title><rect x="70.6949%" y="373" width="0.0182%" height="15" fill="rgb(233,215,35)" fg:x="15560681626" fg:w="4012036"/><text x="70.9449%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4,012,036 samples, 0.02%)</title><rect x="70.6949%" y="357" width="0.0182%" height="15" fill="rgb(249,188,52)" fg:x="15560681626" fg:w="4012036"/><text x="70.9449%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (4,012,036 samples, 0.02%)</title><rect x="70.6949%" y="341" width="0.0182%" height="15" fill="rgb(225,12,32)" fg:x="15560681626" fg:w="4012036"/><text x="70.9449%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (52,156,468 samples, 0.24%)</title><rect x="70.5309%" y="421" width="0.2370%" height="15" fill="rgb(247,98,14)" fg:x="15524573302" fg:w="52156468"/><text x="70.7809%" y="431.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (52,156,468 samples, 0.24%)</title><rect x="70.5309%" y="405" width="0.2370%" height="15" fill="rgb(247,219,48)" fg:x="15524573302" fg:w="52156468"/><text x="70.7809%" y="415.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3,009,027 samples, 0.01%)</title><rect x="70.7678%" y="405" width="0.0137%" height="15" fill="rgb(253,60,48)" fg:x="15576729770" fg:w="3009027"/><text x="71.0178%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,012,036 samples, 0.02%)</title><rect x="70.7678%" y="421" width="0.0182%" height="15" fill="rgb(245,15,52)" fg:x="15576729770" fg:w="4012036"/><text x="71.0178%" y="431.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (157,472,413 samples, 0.72%)</title><rect x="70.1937%" y="437" width="0.7154%" height="15" fill="rgb(220,133,28)" fg:x="15450350636" fg:w="157472413"/><text x="70.4437%" y="447.50"></text></g><g><title>chlang::board::Position::valid (3,009,027 samples, 0.01%)</title><rect x="70.9091%" y="421" width="0.0137%" height="15" fill="rgb(217,180,4)" fg:x="15607823049" fg:w="3009027"/><text x="71.1591%" y="431.50"></text></g><g><title>tcache_get (5,015,045 samples, 0.02%)</title><rect x="70.9228%" y="277" width="0.0228%" height="15" fill="rgb(251,24,1)" fg:x="15610832076" fg:w="5015045"/><text x="71.1728%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6,018,054 samples, 0.03%)</title><rect x="70.9228%" y="341" width="0.0273%" height="15" fill="rgb(212,185,49)" fg:x="15610832076" fg:w="6018054"/><text x="71.1728%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6,018,054 samples, 0.03%)</title><rect x="70.9228%" y="325" width="0.0273%" height="15" fill="rgb(215,175,22)" fg:x="15610832076" fg:w="6018054"/><text x="71.1728%" y="335.50"></text></g><g><title>alloc::alloc::alloc (6,018,054 samples, 0.03%)</title><rect x="70.9228%" y="309" width="0.0273%" height="15" fill="rgb(250,205,14)" fg:x="15610832076" fg:w="6018054"/><text x="71.1728%" y="319.50"></text></g><g><title>__GI___libc_malloc (6,018,054 samples, 0.03%)</title><rect x="70.9228%" y="293" width="0.0273%" height="15" fill="rgb(225,211,22)" fg:x="15610832076" fg:w="6018054"/><text x="71.1728%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7,021,063 samples, 0.03%)</title><rect x="70.9228%" y="421" width="0.0319%" height="15" fill="rgb(251,179,42)" fg:x="15610832076" fg:w="7021063"/><text x="71.1728%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7,021,063 samples, 0.03%)</title><rect x="70.9228%" y="405" width="0.0319%" height="15" fill="rgb(208,216,51)" fg:x="15610832076" fg:w="7021063"/><text x="71.1728%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7,021,063 samples, 0.03%)</title><rect x="70.9228%" y="389" width="0.0319%" height="15" fill="rgb(235,36,11)" fg:x="15610832076" fg:w="7021063"/><text x="71.1728%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (7,021,063 samples, 0.03%)</title><rect x="70.9228%" y="373" width="0.0319%" height="15" fill="rgb(213,189,28)" fg:x="15610832076" fg:w="7021063"/><text x="71.1728%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (7,021,063 samples, 0.03%)</title><rect x="70.9228%" y="357" width="0.0319%" height="15" fill="rgb(227,203,42)" fg:x="15610832076" fg:w="7021063"/><text x="71.1728%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,009,027 samples, 0.01%)</title><rect x="70.9547%" y="421" width="0.0137%" height="15" fill="rgb(244,72,36)" fg:x="15617853139" fg:w="3009027"/><text x="71.2047%" y="431.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (16,048,144 samples, 0.07%)</title><rect x="70.9091%" y="437" width="0.0729%" height="15" fill="rgb(213,53,17)" fg:x="15607823049" fg:w="16048144"/><text x="71.1591%" y="447.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (4,012,036 samples, 0.02%)</title><rect x="71.0139%" y="405" width="0.0182%" height="15" fill="rgb(207,167,3)" fg:x="15630892256" fg:w="4012036"/><text x="71.2639%" y="415.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (3,009,027 samples, 0.01%)</title><rect x="71.0321%" y="405" width="0.0137%" height="15" fill="rgb(216,98,30)" fg:x="15634904292" fg:w="3009027"/><text x="71.2821%" y="415.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (3,009,027 samples, 0.01%)</title><rect x="71.0595%" y="405" width="0.0137%" height="15" fill="rgb(236,123,15)" fg:x="15640922346" fg:w="3009027"/><text x="71.3095%" y="415.50"></text></g><g><title>chlang::board::Board::attacked_by_color (19,057,171 samples, 0.09%)</title><rect x="70.9911%" y="421" width="0.0866%" height="15" fill="rgb(248,81,50)" fg:x="15625877211" fg:w="19057171"/><text x="71.2411%" y="431.50"></text></g><g><title>tcache_get (3,009,027 samples, 0.01%)</title><rect x="71.0823%" y="277" width="0.0137%" height="15" fill="rgb(214,120,4)" fg:x="15645937391" fg:w="3009027"/><text x="71.3323%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7,021,063 samples, 0.03%)</title><rect x="71.0777%" y="421" width="0.0319%" height="15" fill="rgb(208,179,34)" fg:x="15644934382" fg:w="7021063"/><text x="71.3277%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7,021,063 samples, 0.03%)</title><rect x="71.0777%" y="405" width="0.0319%" height="15" fill="rgb(227,140,7)" fg:x="15644934382" fg:w="7021063"/><text x="71.3277%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7,021,063 samples, 0.03%)</title><rect x="71.0777%" y="389" width="0.0319%" height="15" fill="rgb(214,22,6)" fg:x="15644934382" fg:w="7021063"/><text x="71.3277%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (7,021,063 samples, 0.03%)</title><rect x="71.0777%" y="373" width="0.0319%" height="15" fill="rgb(207,137,27)" fg:x="15644934382" fg:w="7021063"/><text x="71.3277%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (7,021,063 samples, 0.03%)</title><rect x="71.0777%" y="357" width="0.0319%" height="15" fill="rgb(210,8,46)" fg:x="15644934382" fg:w="7021063"/><text x="71.3277%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7,021,063 samples, 0.03%)</title><rect x="71.0777%" y="341" width="0.0319%" height="15" fill="rgb(240,16,54)" fg:x="15644934382" fg:w="7021063"/><text x="71.3277%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7,021,063 samples, 0.03%)</title><rect x="71.0777%" y="325" width="0.0319%" height="15" fill="rgb(211,209,29)" fg:x="15644934382" fg:w="7021063"/><text x="71.3277%" y="335.50"></text></g><g><title>alloc::alloc::alloc (7,021,063 samples, 0.03%)</title><rect x="71.0777%" y="309" width="0.0319%" height="15" fill="rgb(226,228,24)" fg:x="15644934382" fg:w="7021063"/><text x="71.3277%" y="319.50"></text></g><g><title>__GI___libc_malloc (6,018,054 samples, 0.03%)</title><rect x="71.0823%" y="293" width="0.0273%" height="15" fill="rgb(222,84,9)" fg:x="15645937391" fg:w="6018054"/><text x="71.3323%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7,021,063 samples, 0.03%)</title><rect x="71.1096%" y="421" width="0.0319%" height="15" fill="rgb(234,203,30)" fg:x="15651955445" fg:w="7021063"/><text x="71.3596%" y="431.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (39,117,351 samples, 0.18%)</title><rect x="70.9820%" y="437" width="0.1777%" height="15" fill="rgb(238,109,14)" fg:x="15623871193" fg:w="39117351"/><text x="71.2320%" y="447.50"></text></g><g><title>chlang::board::Position::valid (13,039,117 samples, 0.06%)</title><rect x="71.1597%" y="421" width="0.0592%" height="15" fill="rgb(233,206,34)" fg:x="15662988544" fg:w="13039117"/><text x="71.4097%" y="431.50"></text></g><g><title>chlang::board::Position::bitboard (3,009,027 samples, 0.01%)</title><rect x="71.2190%" y="421" width="0.0137%" height="15" fill="rgb(220,167,47)" fg:x="15676027661" fg:w="3009027"/><text x="71.4690%" y="431.50"></text></g><g><title>tcache_get (4,012,036 samples, 0.02%)</title><rect x="71.2326%" y="277" width="0.0182%" height="15" fill="rgb(238,105,10)" fg:x="15679036688" fg:w="4012036"/><text x="71.4826%" y="287.50"></text></g><g><title>__GI___libc_malloc (13,039,117 samples, 0.06%)</title><rect x="71.2326%" y="293" width="0.0592%" height="15" fill="rgb(213,227,17)" fg:x="15679036688" fg:w="13039117"/><text x="71.4826%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14,042,126 samples, 0.06%)</title><rect x="71.2326%" y="341" width="0.0638%" height="15" fill="rgb(217,132,38)" fg:x="15679036688" fg:w="14042126"/><text x="71.4826%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14,042,126 samples, 0.06%)</title><rect x="71.2326%" y="325" width="0.0638%" height="15" fill="rgb(242,146,4)" fg:x="15679036688" fg:w="14042126"/><text x="71.4826%" y="335.50"></text></g><g><title>alloc::alloc::alloc (14,042,126 samples, 0.06%)</title><rect x="71.2326%" y="309" width="0.0638%" height="15" fill="rgb(212,61,9)" fg:x="15679036688" fg:w="14042126"/><text x="71.4826%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (16,048,144 samples, 0.07%)</title><rect x="71.2326%" y="421" width="0.0729%" height="15" fill="rgb(247,126,22)" fg:x="15679036688" fg:w="16048144"/><text x="71.4826%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16,048,144 samples, 0.07%)</title><rect x="71.2326%" y="405" width="0.0729%" height="15" fill="rgb(220,196,2)" fg:x="15679036688" fg:w="16048144"/><text x="71.4826%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16,048,144 samples, 0.07%)</title><rect x="71.2326%" y="389" width="0.0729%" height="15" fill="rgb(208,46,4)" fg:x="15679036688" fg:w="16048144"/><text x="71.4826%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (16,048,144 samples, 0.07%)</title><rect x="71.2326%" y="373" width="0.0729%" height="15" fill="rgb(252,104,46)" fg:x="15679036688" fg:w="16048144"/><text x="71.4826%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (16,048,144 samples, 0.07%)</title><rect x="71.2326%" y="357" width="0.0729%" height="15" fill="rgb(237,152,48)" fg:x="15679036688" fg:w="16048144"/><text x="71.4826%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (14,042,126 samples, 0.06%)</title><rect x="71.3055%" y="421" width="0.0638%" height="15" fill="rgb(221,59,37)" fg:x="15695084832" fg:w="14042126"/><text x="71.5555%" y="431.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (73,219,657 samples, 0.33%)</title><rect x="71.1597%" y="437" width="0.3326%" height="15" fill="rgb(209,202,51)" fg:x="15662988544" fg:w="73219657"/><text x="71.4097%" y="447.50"></text></g><g><title>alloc::raw_vec::layout_array (3,009,027 samples, 0.01%)</title><rect x="71.5015%" y="325" width="0.0137%" height="15" fill="rgb(228,81,30)" fg:x="15738214219" fg:w="3009027"/><text x="71.7515%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::repeat (3,009,027 samples, 0.01%)</title><rect x="71.5015%" y="309" width="0.0137%" height="15" fill="rgb(227,42,39)" fg:x="15738214219" fg:w="3009027"/><text x="71.7515%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6,018,054 samples, 0.03%)</title><rect x="71.5015%" y="405" width="0.0273%" height="15" fill="rgb(221,26,2)" fg:x="15738214219" fg:w="6018054"/><text x="71.7515%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6,018,054 samples, 0.03%)</title><rect x="71.5015%" y="389" width="0.0273%" height="15" fill="rgb(254,61,31)" fg:x="15738214219" fg:w="6018054"/><text x="71.7515%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6,018,054 samples, 0.03%)</title><rect x="71.5015%" y="373" width="0.0273%" height="15" fill="rgb(222,173,38)" fg:x="15738214219" fg:w="6018054"/><text x="71.7515%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (6,018,054 samples, 0.03%)</title><rect x="71.5015%" y="357" width="0.0273%" height="15" fill="rgb(218,50,12)" fg:x="15738214219" fg:w="6018054"/><text x="71.7515%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (6,018,054 samples, 0.03%)</title><rect x="71.5015%" y="341" width="0.0273%" height="15" fill="rgb(223,88,40)" fg:x="15738214219" fg:w="6018054"/><text x="71.7515%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,009,027 samples, 0.01%)</title><rect x="71.5152%" y="325" width="0.0137%" height="15" fill="rgb(237,54,19)" fg:x="15741223246" fg:w="3009027"/><text x="71.7652%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,009,027 samples, 0.01%)</title><rect x="71.5152%" y="309" width="0.0137%" height="15" fill="rgb(251,129,25)" fg:x="15741223246" fg:w="3009027"/><text x="71.7652%" y="319.50"></text></g><g><title>alloc::alloc::alloc (3,009,027 samples, 0.01%)</title><rect x="71.5152%" y="293" width="0.0137%" height="15" fill="rgb(238,97,19)" fg:x="15741223246" fg:w="3009027"/><text x="71.7652%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (11,033,099 samples, 0.05%)</title><rect x="71.4924%" y="437" width="0.0501%" height="15" fill="rgb(240,169,18)" fg:x="15736208201" fg:w="11033099"/><text x="71.7424%" y="447.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (11,033,099 samples, 0.05%)</title><rect x="71.4924%" y="421" width="0.0501%" height="15" fill="rgb(230,187,49)" fg:x="15736208201" fg:w="11033099"/><text x="71.7424%" y="431.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (425,275,816 samples, 1.93%)</title><rect x="69.7972%" y="453" width="1.9321%" height="15" fill="rgb(209,44,26)" fg:x="15363088853" fg:w="425275816"/><text x="70.0472%" y="463.50">c..</text></g><g><title>__rust_alloc (3,009,027 samples, 0.01%)</title><rect x="71.7293%" y="325" width="0.0137%" height="15" fill="rgb(244,0,6)" fg:x="15788364669" fg:w="3009027"/><text x="71.9793%" y="335.50"></text></g><g><title>tcache_get (4,012,036 samples, 0.02%)</title><rect x="71.7430%" y="309" width="0.0182%" height="15" fill="rgb(248,18,21)" fg:x="15791373696" fg:w="4012036"/><text x="71.9930%" y="319.50"></text></g><g><title>unlink_chunk (3,009,027 samples, 0.01%)</title><rect x="71.7612%" y="293" width="0.0137%" height="15" fill="rgb(245,180,19)" fg:x="15795385732" fg:w="3009027"/><text x="72.0112%" y="303.50"></text></g><g><title>_int_malloc (29,087,261 samples, 0.13%)</title><rect x="71.7612%" y="309" width="0.1321%" height="15" fill="rgb(252,118,36)" fg:x="15795385732" fg:w="29087261"/><text x="72.0112%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (42,126,378 samples, 0.19%)</title><rect x="71.7293%" y="421" width="0.1914%" height="15" fill="rgb(210,224,19)" fg:x="15788364669" fg:w="42126378"/><text x="71.9793%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (42,126,378 samples, 0.19%)</title><rect x="71.7293%" y="405" width="0.1914%" height="15" fill="rgb(218,30,24)" fg:x="15788364669" fg:w="42126378"/><text x="71.9793%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (42,126,378 samples, 0.19%)</title><rect x="71.7293%" y="389" width="0.1914%" height="15" fill="rgb(219,75,50)" fg:x="15788364669" fg:w="42126378"/><text x="71.9793%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42,126,378 samples, 0.19%)</title><rect x="71.7293%" y="373" width="0.1914%" height="15" fill="rgb(234,72,50)" fg:x="15788364669" fg:w="42126378"/><text x="71.9793%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42,126,378 samples, 0.19%)</title><rect x="71.7293%" y="357" width="0.1914%" height="15" fill="rgb(219,100,48)" fg:x="15788364669" fg:w="42126378"/><text x="71.9793%" y="367.50"></text></g><g><title>alloc::alloc::alloc (42,126,378 samples, 0.19%)</title><rect x="71.7293%" y="341" width="0.1914%" height="15" fill="rgb(253,5,41)" fg:x="15788364669" fg:w="42126378"/><text x="71.9793%" y="351.50"></text></g><g><title>__GI___libc_malloc (39,117,351 samples, 0.18%)</title><rect x="71.7430%" y="325" width="0.1777%" height="15" fill="rgb(247,181,11)" fg:x="15791373696" fg:w="39117351"/><text x="71.9930%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (43,129,387 samples, 0.20%)</title><rect x="71.7293%" y="453" width="0.1959%" height="15" fill="rgb(222,223,25)" fg:x="15788364669" fg:w="43129387"/><text x="71.9793%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (43,129,387 samples, 0.20%)</title><rect x="71.7293%" y="437" width="0.1959%" height="15" fill="rgb(214,198,28)" fg:x="15788364669" fg:w="43129387"/><text x="71.9793%" y="447.50"></text></g><g><title>core::ptr::write (9,027,081 samples, 0.04%)</title><rect x="71.9253%" y="437" width="0.0410%" height="15" fill="rgb(230,46,43)" fg:x="15831494056" fg:w="9027081"/><text x="72.1753%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (7,021,063 samples, 0.03%)</title><rect x="71.9663%" y="437" width="0.0319%" height="15" fill="rgb(233,65,53)" fg:x="15840521137" fg:w="7021063"/><text x="72.2163%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (53,159,477 samples, 0.24%)</title><rect x="71.9253%" y="453" width="0.2415%" height="15" fill="rgb(221,121,27)" fg:x="15831494056" fg:w="53159477"/><text x="72.1753%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,009,027 samples, 0.01%)</title><rect x="72.1668%" y="453" width="0.0137%" height="15" fill="rgb(247,70,47)" fg:x="15884653533" fg:w="3009027"/><text x="72.4168%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (15,045,135 samples, 0.07%)</title><rect x="72.1805%" y="453" width="0.0684%" height="15" fill="rgb(228,85,35)" fg:x="15887662560" fg:w="15045135"/><text x="72.4305%" y="463.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (15,045,135 samples, 0.07%)</title><rect x="72.1805%" y="437" width="0.0684%" height="15" fill="rgb(209,50,18)" fg:x="15887662560" fg:w="15045135"/><text x="72.4305%" y="447.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves (906,720,136 samples, 4.12%)</title><rect x="68.4712%" y="469" width="4.1194%" height="15" fill="rgb(250,19,35)" fg:x="15071213234" fg:w="906720136"/><text x="68.7212%" y="479.50">chla..</text></g><g><title>unlink_chunk (5,015,045 samples, 0.02%)</title><rect x="72.5906%" y="309" width="0.0228%" height="15" fill="rgb(253,107,29)" fg:x="15977933370" fg:w="5015045"/><text x="72.8406%" y="319.50"></text></g><g><title>_int_malloc (39,117,351 samples, 0.18%)</title><rect x="72.5906%" y="325" width="0.1777%" height="15" fill="rgb(252,179,29)" fg:x="15977933370" fg:w="39117351"/><text x="72.8406%" y="335.50"></text></g><g><title>__GI___libc_malloc (41,123,369 samples, 0.19%)</title><rect x="72.5906%" y="341" width="0.1868%" height="15" fill="rgb(238,194,6)" fg:x="15977933370" fg:w="41123369"/><text x="72.8406%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42,126,378 samples, 0.19%)</title><rect x="72.5906%" y="389" width="0.1914%" height="15" fill="rgb(238,164,29)" fg:x="15977933370" fg:w="42126378"/><text x="72.8406%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42,126,378 samples, 0.19%)</title><rect x="72.5906%" y="373" width="0.1914%" height="15" fill="rgb(224,25,9)" fg:x="15977933370" fg:w="42126378"/><text x="72.8406%" y="383.50"></text></g><g><title>alloc::alloc::alloc (42,126,378 samples, 0.19%)</title><rect x="72.5906%" y="357" width="0.1914%" height="15" fill="rgb(244,153,23)" fg:x="15977933370" fg:w="42126378"/><text x="72.8406%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (43,129,387 samples, 0.20%)</title><rect x="72.5906%" y="469" width="0.1959%" height="15" fill="rgb(212,203,14)" fg:x="15977933370" fg:w="43129387"/><text x="72.8406%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (43,129,387 samples, 0.20%)</title><rect x="72.5906%" y="453" width="0.1959%" height="15" fill="rgb(220,164,20)" fg:x="15977933370" fg:w="43129387"/><text x="72.8406%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (43,129,387 samples, 0.20%)</title><rect x="72.5906%" y="437" width="0.1959%" height="15" fill="rgb(222,203,48)" fg:x="15977933370" fg:w="43129387"/><text x="72.8406%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (43,129,387 samples, 0.20%)</title><rect x="72.5906%" y="421" width="0.1959%" height="15" fill="rgb(215,159,22)" fg:x="15977933370" fg:w="43129387"/><text x="72.8406%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (43,129,387 samples, 0.20%)</title><rect x="72.5906%" y="405" width="0.1959%" height="15" fill="rgb(216,183,47)" fg:x="15977933370" fg:w="43129387"/><text x="72.8406%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,012,036 samples, 0.02%)</title><rect x="72.7865%" y="469" width="0.0182%" height="15" fill="rgb(229,195,25)" fg:x="16021062757" fg:w="4012036"/><text x="73.0365%" y="479.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (4,012,036 samples, 0.02%)</title><rect x="72.8047%" y="453" width="0.0182%" height="15" fill="rgb(224,132,51)" fg:x="16025074793" fg:w="4012036"/><text x="73.0547%" y="463.50"></text></g><g><title>core::ptr::read (4,012,036 samples, 0.02%)</title><rect x="72.8047%" y="437" width="0.0182%" height="15" fill="rgb(240,63,7)" fg:x="16025074793" fg:w="4012036"/><text x="73.0547%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,024,072 samples, 0.04%)</title><rect x="72.8047%" y="469" width="0.0365%" height="15" fill="rgb(249,182,41)" fg:x="16025074793" fg:w="8024072"/><text x="73.0547%" y="479.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4,012,036 samples, 0.02%)</title><rect x="72.8230%" y="453" width="0.0182%" height="15" fill="rgb(243,47,26)" fg:x="16029086829" fg:w="4012036"/><text x="73.0730%" y="463.50"></text></g><g><title>chlang::board::Board::get_valid_moves (8,730,190,336 samples, 39.66%)</title><rect x="33.2285%" y="485" width="39.6628%" height="15" fill="rgb(233,48,2)" fg:x="7313941628" fg:w="8730190336"/><text x="33.4785%" y="495.50">chlang::board::Board::get_valid_moves</text></g><g><title>chlang::board::Board::get_game_state (15,465,395,771 samples, 70.26%)</title><rect x="2.6658%" y="501" width="70.2620%" height="15" fill="rgb(244,165,34)" fg:x="586760265" fg:w="15465395771"/><text x="2.9158%" y="511.50">chlang::board::Board::get_game_state</text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (8,024,072 samples, 0.04%)</title><rect x="72.9278%" y="485" width="0.0365%" height="15" fill="rgb(207,89,7)" fg:x="16052156036" fg:w="8024072"/><text x="73.1778%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (15,045,135 samples, 0.07%)</title><rect x="72.9642%" y="453" width="0.0684%" height="15" fill="rgb(244,117,36)" fg:x="16060180108" fg:w="15045135"/><text x="73.2142%" y="463.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (83,249,747 samples, 0.38%)</title><rect x="72.9642%" y="485" width="0.3782%" height="15" fill="rgb(226,144,34)" fg:x="16060180108" fg:w="83249747"/><text x="73.2142%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (83,249,747 samples, 0.38%)</title><rect x="72.9642%" y="469" width="0.3782%" height="15" fill="rgb(213,23,19)" fg:x="16060180108" fg:w="83249747"/><text x="73.2142%" y="479.50"></text></g><g><title>&lt;chlang::evaluators::positional_evaluator::PositionalEvaluator as chlang::tree_evaluator::Eval&gt;::evaluate (298,896,682 samples, 1.36%)</title><rect x="72.9278%" y="501" width="1.3579%" height="15" fill="rgb(217,75,12)" fg:x="16052156036" fg:w="298896682"/><text x="73.1778%" y="511.50"></text></g><g><title>chlang::tree_evaluator::eval (16,156,468,972 samples, 73.40%)</title><rect x="0.9250%" y="517" width="73.4017%" height="15" fill="rgb(224,159,17)" fg:x="203610827" fg:w="16156468972"/><text x="1.1750%" y="527.50">chlang::tree_evaluator::eval</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (4,012,036 samples, 0.02%)</title><rect x="74.3267%" y="501" width="0.0182%" height="15" fill="rgb(217,118,1)" fg:x="16360079799" fg:w="4012036"/><text x="74.5767%" y="511.50"></text></g><g><title>chlang::board::Board::unmake_last (8,024,072 samples, 0.04%)</title><rect x="74.3267%" y="517" width="0.0365%" height="15" fill="rgb(232,180,48)" fg:x="16360079799" fg:w="8024072"/><text x="74.5767%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,009,027 samples, 0.01%)</title><rect x="74.3632%" y="453" width="0.0137%" height="15" fill="rgb(230,27,33)" fg:x="16368103871" fg:w="3009027"/><text x="74.6132%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (4,012,036 samples, 0.02%)</title><rect x="74.3632%" y="501" width="0.0182%" height="15" fill="rgb(205,31,21)" fg:x="16368103871" fg:w="4012036"/><text x="74.6132%" y="511.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (4,012,036 samples, 0.02%)</title><rect x="74.3632%" y="485" width="0.0182%" height="15" fill="rgb(253,59,4)" fg:x="16368103871" fg:w="4012036"/><text x="74.6132%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (4,012,036 samples, 0.02%)</title><rect x="74.3632%" y="469" width="0.0182%" height="15" fill="rgb(224,201,9)" fg:x="16368103871" fg:w="4012036"/><text x="74.6132%" y="479.50"></text></g><g><title>_int_free (3,009,027 samples, 0.01%)</title><rect x="74.3860%" y="389" width="0.0137%" height="15" fill="rgb(229,206,30)" fg:x="16373118916" fg:w="3009027"/><text x="74.6360%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (5,015,045 samples, 0.02%)</title><rect x="74.3814%" y="501" width="0.0228%" height="15" fill="rgb(212,67,47)" fg:x="16372115907" fg:w="5015045"/><text x="74.6314%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (5,015,045 samples, 0.02%)</title><rect x="74.3814%" y="485" width="0.0228%" height="15" fill="rgb(211,96,50)" fg:x="16372115907" fg:w="5015045"/><text x="74.6314%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,015,045 samples, 0.02%)</title><rect x="74.3814%" y="469" width="0.0228%" height="15" fill="rgb(252,114,18)" fg:x="16372115907" fg:w="5015045"/><text x="74.6314%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (5,015,045 samples, 0.02%)</title><rect x="74.3814%" y="453" width="0.0228%" height="15" fill="rgb(223,58,37)" fg:x="16372115907" fg:w="5015045"/><text x="74.6314%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5,015,045 samples, 0.02%)</title><rect x="74.3814%" y="437" width="0.0228%" height="15" fill="rgb(237,70,4)" fg:x="16372115907" fg:w="5015045"/><text x="74.6314%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (5,015,045 samples, 0.02%)</title><rect x="74.3814%" y="421" width="0.0228%" height="15" fill="rgb(244,85,46)" fg:x="16372115907" fg:w="5015045"/><text x="74.6314%" y="431.50"></text></g><g><title>__GI___libc_free (4,012,036 samples, 0.02%)</title><rect x="74.3860%" y="405" width="0.0182%" height="15" fill="rgb(223,39,52)" fg:x="16373118916" fg:w="4012036"/><text x="74.6360%" y="415.50"></text></g><g><title>chlang::board::Board::piece_type (5,015,045 samples, 0.02%)</title><rect x="74.4179%" y="501" width="0.0228%" height="15" fill="rgb(218,200,14)" fg:x="16380139979" fg:w="5015045"/><text x="74.6679%" y="511.50"></text></g><g><title>chlang::board::Board::key (5,015,045 samples, 0.02%)</title><rect x="74.4406%" y="501" width="0.0228%" height="15" fill="rgb(208,171,16)" fg:x="16385155024" fg:w="5015045"/><text x="74.6906%" y="511.50"></text></g><g><title>tcache_put (3,009,027 samples, 0.01%)</title><rect x="74.4862%" y="293" width="0.0137%" height="15" fill="rgb(234,200,18)" fg:x="16395185114" fg:w="3009027"/><text x="74.7362%" y="303.50"></text></g><g><title>_int_free (20,060,180 samples, 0.09%)</title><rect x="74.4862%" y="309" width="0.0911%" height="15" fill="rgb(228,45,11)" fg:x="16395185114" fg:w="20060180"/><text x="74.7362%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (36,108,324 samples, 0.16%)</title><rect x="74.4634%" y="469" width="0.1640%" height="15" fill="rgb(237,182,11)" fg:x="16390170069" fg:w="36108324"/><text x="74.7134%" y="479.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36,108,324 samples, 0.16%)</title><rect x="74.4634%" y="453" width="0.1640%" height="15" fill="rgb(241,175,49)" fg:x="16390170069" fg:w="36108324"/><text x="74.7134%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (36,108,324 samples, 0.16%)</title><rect x="74.4634%" y="437" width="0.1640%" height="15" fill="rgb(247,38,35)" fg:x="16390170069" fg:w="36108324"/><text x="74.7134%" y="447.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36,108,324 samples, 0.16%)</title><rect x="74.4634%" y="421" width="0.1640%" height="15" fill="rgb(228,39,49)" fg:x="16390170069" fg:w="36108324"/><text x="74.7134%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (36,108,324 samples, 0.16%)</title><rect x="74.4634%" y="405" width="0.1640%" height="15" fill="rgb(226,101,26)" fg:x="16390170069" fg:w="36108324"/><text x="74.7134%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36,108,324 samples, 0.16%)</title><rect x="74.4634%" y="389" width="0.1640%" height="15" fill="rgb(206,141,19)" fg:x="16390170069" fg:w="36108324"/><text x="74.7134%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (36,108,324 samples, 0.16%)</title><rect x="74.4634%" y="373" width="0.1640%" height="15" fill="rgb(211,200,13)" fg:x="16390170069" fg:w="36108324"/><text x="74.7134%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (35,105,315 samples, 0.16%)</title><rect x="74.4680%" y="357" width="0.1595%" height="15" fill="rgb(241,121,6)" fg:x="16391173078" fg:w="35105315"/><text x="74.7180%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (35,105,315 samples, 0.16%)</title><rect x="74.4680%" y="341" width="0.1595%" height="15" fill="rgb(234,221,29)" fg:x="16391173078" fg:w="35105315"/><text x="74.7180%" y="351.50"></text></g><g><title>__GI___libc_free (31,093,279 samples, 0.14%)</title><rect x="74.4862%" y="325" width="0.1413%" height="15" fill="rgb(229,136,5)" fg:x="16395185114" fg:w="31093279"/><text x="74.7362%" y="335.50"></text></g><g><title>chlang::cmove::Move::to (7,021,063 samples, 0.03%)</title><rect x="74.6320%" y="469" width="0.0319%" height="15" fill="rgb(238,36,11)" fg:x="16427281402" fg:w="7021063"/><text x="74.8820%" y="479.50"></text></g><g><title>chlang::board::Board::piece_type (5,015,045 samples, 0.02%)</title><rect x="74.6639%" y="469" width="0.0228%" height="15" fill="rgb(251,55,41)" fg:x="16434302465" fg:w="5015045"/><text x="74.9139%" y="479.50"></text></g><g><title>chlang::board::Position::valid (4,012,036 samples, 0.02%)</title><rect x="74.6867%" y="453" width="0.0182%" height="15" fill="rgb(242,34,40)" fg:x="16439317510" fg:w="4012036"/><text x="74.9367%" y="463.50"></text></g><g><title>chlang::board::Position::bitboard (4,012,036 samples, 0.02%)</title><rect x="74.7049%" y="453" width="0.0182%" height="15" fill="rgb(215,42,17)" fg:x="16443329546" fg:w="4012036"/><text x="74.9549%" y="463.50"></text></g><g><title>__rust_alloc (4,012,036 samples, 0.02%)</title><rect x="74.7232%" y="325" width="0.0182%" height="15" fill="rgb(207,44,46)" fg:x="16447341582" fg:w="4012036"/><text x="74.9732%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6,018,054 samples, 0.03%)</title><rect x="74.7232%" y="453" width="0.0273%" height="15" fill="rgb(211,206,28)" fg:x="16447341582" fg:w="6018054"/><text x="74.9732%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6,018,054 samples, 0.03%)</title><rect x="74.7232%" y="437" width="0.0273%" height="15" fill="rgb(237,167,16)" fg:x="16447341582" fg:w="6018054"/><text x="74.9732%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6,018,054 samples, 0.03%)</title><rect x="74.7232%" y="421" width="0.0273%" height="15" fill="rgb(233,66,6)" fg:x="16447341582" fg:w="6018054"/><text x="74.9732%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (6,018,054 samples, 0.03%)</title><rect x="74.7232%" y="405" width="0.0273%" height="15" fill="rgb(246,123,29)" fg:x="16447341582" fg:w="6018054"/><text x="74.9732%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (6,018,054 samples, 0.03%)</title><rect x="74.7232%" y="389" width="0.0273%" height="15" fill="rgb(209,62,40)" fg:x="16447341582" fg:w="6018054"/><text x="74.9732%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6,018,054 samples, 0.03%)</title><rect x="74.7232%" y="373" width="0.0273%" height="15" fill="rgb(218,4,25)" fg:x="16447341582" fg:w="6018054"/><text x="74.9732%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6,018,054 samples, 0.03%)</title><rect x="74.7232%" y="357" width="0.0273%" height="15" fill="rgb(253,91,49)" fg:x="16447341582" fg:w="6018054"/><text x="74.9732%" y="367.50"></text></g><g><title>alloc::alloc::alloc (6,018,054 samples, 0.03%)</title><rect x="74.7232%" y="341" width="0.0273%" height="15" fill="rgb(228,155,29)" fg:x="16447341582" fg:w="6018054"/><text x="74.9732%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5,015,045 samples, 0.02%)</title><rect x="74.7505%" y="453" width="0.0228%" height="15" fill="rgb(243,57,37)" fg:x="16453359636" fg:w="5015045"/><text x="75.0005%" y="463.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (25,075,225 samples, 0.11%)</title><rect x="74.6867%" y="469" width="0.1139%" height="15" fill="rgb(244,167,17)" fg:x="16439317510" fg:w="25075225"/><text x="74.9367%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7,021,063 samples, 0.03%)</title><rect x="74.8098%" y="453" width="0.0319%" height="15" fill="rgb(207,181,38)" fg:x="16466398753" fg:w="7021063"/><text x="75.0598%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7,021,063 samples, 0.03%)</title><rect x="74.8098%" y="437" width="0.0319%" height="15" fill="rgb(211,8,23)" fg:x="16466398753" fg:w="7021063"/><text x="75.0598%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7,021,063 samples, 0.03%)</title><rect x="74.8098%" y="421" width="0.0319%" height="15" fill="rgb(235,11,44)" fg:x="16466398753" fg:w="7021063"/><text x="75.0598%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (7,021,063 samples, 0.03%)</title><rect x="74.8098%" y="405" width="0.0319%" height="15" fill="rgb(248,18,52)" fg:x="16466398753" fg:w="7021063"/><text x="75.0598%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (7,021,063 samples, 0.03%)</title><rect x="74.8098%" y="389" width="0.0319%" height="15" fill="rgb(208,4,7)" fg:x="16466398753" fg:w="7021063"/><text x="75.0598%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7,021,063 samples, 0.03%)</title><rect x="74.8098%" y="373" width="0.0319%" height="15" fill="rgb(240,17,39)" fg:x="16466398753" fg:w="7021063"/><text x="75.0598%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7,021,063 samples, 0.03%)</title><rect x="74.8098%" y="357" width="0.0319%" height="15" fill="rgb(207,170,3)" fg:x="16466398753" fg:w="7021063"/><text x="75.0598%" y="367.50"></text></g><g><title>alloc::alloc::alloc (7,021,063 samples, 0.03%)</title><rect x="74.8098%" y="341" width="0.0319%" height="15" fill="rgb(236,100,52)" fg:x="16466398753" fg:w="7021063"/><text x="75.0598%" y="351.50"></text></g><g><title>__GI___libc_malloc (7,021,063 samples, 0.03%)</title><rect x="74.8098%" y="325" width="0.0319%" height="15" fill="rgb(246,78,51)" fg:x="16466398753" fg:w="7021063"/><text x="75.0598%" y="335.50"></text></g><g><title>alloc::raw_vec::layout_array (3,009,027 samples, 0.01%)</title><rect x="74.8553%" y="341" width="0.0137%" height="15" fill="rgb(211,17,15)" fg:x="16476428843" fg:w="3009027"/><text x="75.1053%" y="351.50"></text></g><g><title>core::alloc::layout::Layout::repeat (3,009,027 samples, 0.01%)</title><rect x="74.8553%" y="325" width="0.0137%" height="15" fill="rgb(209,59,46)" fg:x="16476428843" fg:w="3009027"/><text x="75.1053%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4,012,036 samples, 0.02%)</title><rect x="74.8553%" y="421" width="0.0182%" height="15" fill="rgb(210,92,25)" fg:x="16476428843" fg:w="4012036"/><text x="75.1053%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,012,036 samples, 0.02%)</title><rect x="74.8553%" y="405" width="0.0182%" height="15" fill="rgb(238,174,52)" fg:x="16476428843" fg:w="4012036"/><text x="75.1053%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,012,036 samples, 0.02%)</title><rect x="74.8553%" y="389" width="0.0182%" height="15" fill="rgb(230,73,7)" fg:x="16476428843" fg:w="4012036"/><text x="75.1053%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,012,036 samples, 0.02%)</title><rect x="74.8553%" y="373" width="0.0182%" height="15" fill="rgb(243,124,40)" fg:x="16476428843" fg:w="4012036"/><text x="75.1053%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,012,036 samples, 0.02%)</title><rect x="74.8553%" y="357" width="0.0182%" height="15" fill="rgb(244,170,11)" fg:x="16476428843" fg:w="4012036"/><text x="75.1053%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (12,036,108 samples, 0.05%)</title><rect x="74.8462%" y="453" width="0.0547%" height="15" fill="rgb(207,114,54)" fg:x="16474422825" fg:w="12036108"/><text x="75.0962%" y="463.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (12,036,108 samples, 0.05%)</title><rect x="74.8462%" y="437" width="0.0547%" height="15" fill="rgb(205,42,20)" fg:x="16474422825" fg:w="12036108"/><text x="75.0962%" y="447.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (26,078,234 samples, 0.12%)</title><rect x="74.8006%" y="469" width="0.1185%" height="15" fill="rgb(230,30,28)" fg:x="16464392735" fg:w="26078234"/><text x="75.0506%" y="479.50"></text></g><g><title>chlang::board::Position::valid (3,009,027 samples, 0.01%)</title><rect x="74.9191%" y="453" width="0.0137%" height="15" fill="rgb(205,73,54)" fg:x="16490470969" fg:w="3009027"/><text x="75.1691%" y="463.50"></text></g><g><title>__GI___libc_malloc (4,012,036 samples, 0.02%)</title><rect x="74.9373%" y="325" width="0.0182%" height="15" fill="rgb(254,227,23)" fg:x="16494483005" fg:w="4012036"/><text x="75.1873%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6,018,054 samples, 0.03%)</title><rect x="74.9328%" y="373" width="0.0273%" height="15" fill="rgb(228,202,34)" fg:x="16493479996" fg:w="6018054"/><text x="75.1828%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6,018,054 samples, 0.03%)</title><rect x="74.9328%" y="357" width="0.0273%" height="15" fill="rgb(222,225,37)" fg:x="16493479996" fg:w="6018054"/><text x="75.1828%" y="367.50"></text></g><g><title>alloc::alloc::alloc (6,018,054 samples, 0.03%)</title><rect x="74.9328%" y="341" width="0.0273%" height="15" fill="rgb(221,14,54)" fg:x="16493479996" fg:w="6018054"/><text x="75.1828%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7,021,063 samples, 0.03%)</title><rect x="74.9328%" y="453" width="0.0319%" height="15" fill="rgb(254,102,2)" fg:x="16493479996" fg:w="7021063"/><text x="75.1828%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7,021,063 samples, 0.03%)</title><rect x="74.9328%" y="437" width="0.0319%" height="15" fill="rgb(232,104,17)" fg:x="16493479996" fg:w="7021063"/><text x="75.1828%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7,021,063 samples, 0.03%)</title><rect x="74.9328%" y="421" width="0.0319%" height="15" fill="rgb(250,220,14)" fg:x="16493479996" fg:w="7021063"/><text x="75.1828%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (7,021,063 samples, 0.03%)</title><rect x="74.9328%" y="405" width="0.0319%" height="15" fill="rgb(241,158,9)" fg:x="16493479996" fg:w="7021063"/><text x="75.1828%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (7,021,063 samples, 0.03%)</title><rect x="74.9328%" y="389" width="0.0319%" height="15" fill="rgb(246,9,43)" fg:x="16493479996" fg:w="7021063"/><text x="75.1828%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5,015,045 samples, 0.02%)</title><rect x="74.9647%" y="453" width="0.0228%" height="15" fill="rgb(206,73,33)" fg:x="16500501059" fg:w="5015045"/><text x="75.2147%" y="463.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (17,051,153 samples, 0.08%)</title><rect x="74.9191%" y="469" width="0.0775%" height="15" fill="rgb(222,79,8)" fg:x="16490470969" fg:w="17051153"/><text x="75.1691%" y="479.50"></text></g><g><title>chlang::cmove::Move::new (4,012,036 samples, 0.02%)</title><rect x="74.9966%" y="453" width="0.0182%" height="15" fill="rgb(234,8,54)" fg:x="16507522122" fg:w="4012036"/><text x="75.2466%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7,021,063 samples, 0.03%)</title><rect x="75.0239%" y="373" width="0.0319%" height="15" fill="rgb(209,134,38)" fg:x="16513540176" fg:w="7021063"/><text x="75.2739%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7,021,063 samples, 0.03%)</title><rect x="75.0239%" y="357" width="0.0319%" height="15" fill="rgb(230,127,29)" fg:x="16513540176" fg:w="7021063"/><text x="75.2739%" y="367.50"></text></g><g><title>alloc::alloc::alloc (7,021,063 samples, 0.03%)</title><rect x="75.0239%" y="341" width="0.0319%" height="15" fill="rgb(242,44,41)" fg:x="16513540176" fg:w="7021063"/><text x="75.2739%" y="351.50"></text></g><g><title>__GI___libc_malloc (6,018,054 samples, 0.03%)</title><rect x="75.0285%" y="325" width="0.0273%" height="15" fill="rgb(222,56,43)" fg:x="16514543185" fg:w="6018054"/><text x="75.2785%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8,024,072 samples, 0.04%)</title><rect x="75.0239%" y="421" width="0.0365%" height="15" fill="rgb(238,39,47)" fg:x="16513540176" fg:w="8024072"/><text x="75.2739%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (8,024,072 samples, 0.04%)</title><rect x="75.0239%" y="405" width="0.0365%" height="15" fill="rgb(226,79,43)" fg:x="16513540176" fg:w="8024072"/><text x="75.2739%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (8,024,072 samples, 0.04%)</title><rect x="75.0239%" y="389" width="0.0365%" height="15" fill="rgb(242,105,53)" fg:x="16513540176" fg:w="8024072"/><text x="75.2739%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (9,027,081 samples, 0.04%)</title><rect x="75.0239%" y="453" width="0.0410%" height="15" fill="rgb(251,132,46)" fg:x="16513540176" fg:w="9027081"/><text x="75.2739%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9,027,081 samples, 0.04%)</title><rect x="75.0239%" y="437" width="0.0410%" height="15" fill="rgb(231,77,14)" fg:x="16513540176" fg:w="9027081"/><text x="75.2739%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,012,036 samples, 0.02%)</title><rect x="75.0649%" y="453" width="0.0182%" height="15" fill="rgb(240,135,9)" fg:x="16522567257" fg:w="4012036"/><text x="75.3149%" y="463.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (22,066,198 samples, 0.10%)</title><rect x="74.9966%" y="469" width="0.1003%" height="15" fill="rgb(248,109,14)" fg:x="16507522122" fg:w="22066198"/><text x="75.2466%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,012,036 samples, 0.02%)</title><rect x="75.1059%" y="373" width="0.0182%" height="15" fill="rgb(227,146,52)" fg:x="16531594338" fg:w="4012036"/><text x="75.3559%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,012,036 samples, 0.02%)</title><rect x="75.1059%" y="357" width="0.0182%" height="15" fill="rgb(232,54,3)" fg:x="16531594338" fg:w="4012036"/><text x="75.3559%" y="367.50"></text></g><g><title>alloc::alloc::alloc (4,012,036 samples, 0.02%)</title><rect x="75.1059%" y="341" width="0.0182%" height="15" fill="rgb(229,201,43)" fg:x="16531594338" fg:w="4012036"/><text x="75.3559%" y="351.50"></text></g><g><title>__GI___libc_malloc (4,012,036 samples, 0.02%)</title><rect x="75.1059%" y="325" width="0.0182%" height="15" fill="rgb(252,161,33)" fg:x="16531594338" fg:w="4012036"/><text x="75.3559%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5,015,045 samples, 0.02%)</title><rect x="75.1059%" y="453" width="0.0228%" height="15" fill="rgb(226,146,40)" fg:x="16531594338" fg:w="5015045"/><text x="75.3559%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5,015,045 samples, 0.02%)</title><rect x="75.1059%" y="437" width="0.0228%" height="15" fill="rgb(219,47,25)" fg:x="16531594338" fg:w="5015045"/><text x="75.3559%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5,015,045 samples, 0.02%)</title><rect x="75.1059%" y="421" width="0.0228%" height="15" fill="rgb(250,135,13)" fg:x="16531594338" fg:w="5015045"/><text x="75.3559%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (5,015,045 samples, 0.02%)</title><rect x="75.1059%" y="405" width="0.0228%" height="15" fill="rgb(219,229,18)" fg:x="16531594338" fg:w="5015045"/><text x="75.3559%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (5,015,045 samples, 0.02%)</title><rect x="75.1059%" y="389" width="0.0228%" height="15" fill="rgb(217,152,27)" fg:x="16531594338" fg:w="5015045"/><text x="75.3559%" y="399.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&lt;&amp;i64&gt;&gt;::add (3,009,027 samples, 0.01%)</title><rect x="75.1378%" y="453" width="0.0137%" height="15" fill="rgb(225,71,47)" fg:x="16538615401" fg:w="3009027"/><text x="75.3878%" y="463.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (3,009,027 samples, 0.01%)</title><rect x="75.1378%" y="437" width="0.0137%" height="15" fill="rgb(220,139,14)" fg:x="16538615401" fg:w="3009027"/><text x="75.3878%" y="447.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (14,042,126 samples, 0.06%)</title><rect x="75.0968%" y="469" width="0.0638%" height="15" fill="rgb(247,54,32)" fg:x="16529588320" fg:w="14042126"/><text x="75.3468%" y="479.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,012,036 samples, 0.02%)</title><rect x="75.1606%" y="469" width="0.0182%" height="15" fill="rgb(252,131,39)" fg:x="16543630446" fg:w="4012036"/><text x="75.4106%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (10,030,090 samples, 0.05%)</title><rect x="75.1789%" y="469" width="0.0456%" height="15" fill="rgb(210,108,39)" fg:x="16547642482" fg:w="10030090"/><text x="75.4289%" y="479.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (10,030,090 samples, 0.05%)</title><rect x="75.1789%" y="453" width="0.0456%" height="15" fill="rgb(205,23,29)" fg:x="16547642482" fg:w="10030090"/><text x="75.4289%" y="463.50"></text></g><g><title>chlang::board::Board::attacked_by_color (172,517,548 samples, 0.78%)</title><rect x="74.4634%" y="485" width="0.7838%" height="15" fill="rgb(246,139,46)" fg:x="16390170069" fg:w="172517548"/><text x="74.7134%" y="495.50"></text></g><g><title>chlang::board::Board::is_valid (175,526,575 samples, 0.80%)</title><rect x="74.4634%" y="501" width="0.7974%" height="15" fill="rgb(250,81,26)" fg:x="16390170069" fg:w="175526575"/><text x="74.7134%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (3,009,027 samples, 0.01%)</title><rect x="75.2609%" y="485" width="0.0137%" height="15" fill="rgb(214,104,7)" fg:x="16565696644" fg:w="3009027"/><text x="75.5109%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 0.01%)</title><rect x="75.2609%" y="469" width="0.0137%" height="15" fill="rgb(233,189,8)" fg:x="16565696644" fg:w="3009027"/><text x="75.5109%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 0.01%)</title><rect x="75.2609%" y="453" width="0.0137%" height="15" fill="rgb(228,141,17)" fg:x="16565696644" fg:w="3009027"/><text x="75.5109%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 0.01%)</title><rect x="75.2609%" y="437" width="0.0137%" height="15" fill="rgb(247,157,1)" fg:x="16565696644" fg:w="3009027"/><text x="75.5109%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,009,027 samples, 0.01%)</title><rect x="75.2609%" y="421" width="0.0137%" height="15" fill="rgb(249,225,5)" fg:x="16565696644" fg:w="3009027"/><text x="75.5109%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,009,027 samples, 0.01%)</title><rect x="75.2609%" y="405" width="0.0137%" height="15" fill="rgb(242,55,13)" fg:x="16565696644" fg:w="3009027"/><text x="75.5109%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (3,009,027 samples, 0.01%)</title><rect x="75.2609%" y="389" width="0.0137%" height="15" fill="rgb(230,49,50)" fg:x="16565696644" fg:w="3009027"/><text x="75.5109%" y="399.50"></text></g><g><title>chlang::board::Board::piece_type (38,114,342 samples, 0.17%)</title><rect x="75.2746%" y="485" width="0.1732%" height="15" fill="rgb(241,111,38)" fg:x="16568705671" fg:w="38114342"/><text x="75.5246%" y="495.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (8,024,072 samples, 0.04%)</title><rect x="75.4477%" y="485" width="0.0365%" height="15" fill="rgb(252,155,4)" fg:x="16606820013" fg:w="8024072"/><text x="75.6977%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (5,015,045 samples, 0.02%)</title><rect x="75.4978%" y="469" width="0.0228%" height="15" fill="rgb(212,69,32)" fg:x="16617853112" fg:w="5015045"/><text x="75.7478%" y="479.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (5,015,045 samples, 0.02%)</title><rect x="75.4978%" y="453" width="0.0228%" height="15" fill="rgb(243,107,47)" fg:x="16617853112" fg:w="5015045"/><text x="75.7478%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4,012,036 samples, 0.02%)</title><rect x="75.5024%" y="437" width="0.0182%" height="15" fill="rgb(247,130,12)" fg:x="16618856121" fg:w="4012036"/><text x="75.7524%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,012,036 samples, 0.02%)</title><rect x="75.5024%" y="421" width="0.0182%" height="15" fill="rgb(233,74,16)" fg:x="16618856121" fg:w="4012036"/><text x="75.7524%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,012,036 samples, 0.02%)</title><rect x="75.5024%" y="405" width="0.0182%" height="15" fill="rgb(208,58,18)" fg:x="16618856121" fg:w="4012036"/><text x="75.7524%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,012,036 samples, 0.02%)</title><rect x="75.5024%" y="389" width="0.0182%" height="15" fill="rgb(242,225,1)" fg:x="16618856121" fg:w="4012036"/><text x="75.7524%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,012,036 samples, 0.02%)</title><rect x="75.5024%" y="373" width="0.0182%" height="15" fill="rgb(249,39,40)" fg:x="16618856121" fg:w="4012036"/><text x="75.7524%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,012,036 samples, 0.02%)</title><rect x="75.5024%" y="357" width="0.0182%" height="15" fill="rgb(207,72,44)" fg:x="16618856121" fg:w="4012036"/><text x="75.7524%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,012,036 samples, 0.02%)</title><rect x="75.5024%" y="341" width="0.0182%" height="15" fill="rgb(215,193,12)" fg:x="16618856121" fg:w="4012036"/><text x="75.7524%" y="351.50"></text></g><g><title>alloc::alloc::alloc (4,012,036 samples, 0.02%)</title><rect x="75.5024%" y="325" width="0.0182%" height="15" fill="rgb(248,41,39)" fg:x="16618856121" fg:w="4012036"/><text x="75.7524%" y="335.50"></text></g><g><title>__GI___libc_malloc (4,012,036 samples, 0.02%)</title><rect x="75.5024%" y="309" width="0.0182%" height="15" fill="rgb(253,85,4)" fg:x="16618856121" fg:w="4012036"/><text x="75.7524%" y="319.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (9,027,081 samples, 0.04%)</title><rect x="75.4842%" y="485" width="0.0410%" height="15" fill="rgb(243,70,31)" fg:x="16614844085" fg:w="9027081"/><text x="75.7342%" y="495.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (5,015,045 samples, 0.02%)</title><rect x="75.5252%" y="485" width="0.0228%" height="15" fill="rgb(253,195,26)" fg:x="16623871166" fg:w="5015045"/><text x="75.7752%" y="495.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (4,012,036 samples, 0.02%)</title><rect x="75.5844%" y="453" width="0.0182%" height="15" fill="rgb(243,42,11)" fg:x="16636910283" fg:w="4012036"/><text x="75.8344%" y="463.50"></text></g><g><title>chlang::board::Board::attacked_by_color (11,033,099 samples, 0.05%)</title><rect x="75.5571%" y="469" width="0.0501%" height="15" fill="rgb(239,66,17)" fg:x="16630892229" fg:w="11033099"/><text x="75.8071%" y="479.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (17,051,153 samples, 0.08%)</title><rect x="75.5480%" y="485" width="0.0775%" height="15" fill="rgb(217,132,21)" fg:x="16628886211" fg:w="17051153"/><text x="75.7980%" y="495.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (7,021,063 samples, 0.03%)</title><rect x="75.6254%" y="485" width="0.0319%" height="15" fill="rgb(252,202,21)" fg:x="16645937364" fg:w="7021063"/><text x="75.8754%" y="495.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (95,285,855 samples, 0.43%)</title><rect x="75.2609%" y="501" width="0.4329%" height="15" fill="rgb(233,98,36)" fg:x="16565696644" fg:w="95285855"/><text x="75.5109%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,009,027 samples, 0.01%)</title><rect x="75.6938%" y="501" width="0.0137%" height="15" fill="rgb(216,153,54)" fg:x="16660982499" fg:w="3009027"/><text x="75.9438%" y="511.50"></text></g><g><title>core::ptr::write (3,009,027 samples, 0.01%)</title><rect x="75.6938%" y="485" width="0.0137%" height="15" fill="rgb(250,99,7)" fg:x="16660982499" fg:w="3009027"/><text x="75.9438%" y="495.50"></text></g><g><title>chlang::board::Board::make_move (315,947,835 samples, 1.44%)</title><rect x="74.3632%" y="517" width="1.4354%" height="15" fill="rgb(207,56,50)" fg:x="16368103871" fg:w="315947835"/><text x="74.6132%" y="527.50"></text></g><g><title>chlang::board::Board::key (8,024,072 samples, 0.04%)</title><rect x="75.7986%" y="517" width="0.0365%" height="15" fill="rgb(244,61,34)" fg:x="16684051706" fg:w="8024072"/><text x="76.0486%" y="527.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (8,024,072 samples, 0.04%)</title><rect x="75.7986%" y="501" width="0.0365%" height="15" fill="rgb(241,50,38)" fg:x="16684051706" fg:w="8024072"/><text x="76.0486%" y="511.50"></text></g><g><title>_int_free (10,030,090 samples, 0.05%)</title><rect x="75.8442%" y="341" width="0.0456%" height="15" fill="rgb(212,166,30)" fg:x="16694081796" fg:w="10030090"/><text x="76.0942%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (16,048,144 samples, 0.07%)</title><rect x="75.8350%" y="501" width="0.0729%" height="15" fill="rgb(249,127,32)" fg:x="16692075778" fg:w="16048144"/><text x="76.0850%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16,048,144 samples, 0.07%)</title><rect x="75.8350%" y="485" width="0.0729%" height="15" fill="rgb(209,103,0)" fg:x="16692075778" fg:w="16048144"/><text x="76.0850%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (16,048,144 samples, 0.07%)</title><rect x="75.8350%" y="469" width="0.0729%" height="15" fill="rgb(238,209,51)" fg:x="16692075778" fg:w="16048144"/><text x="76.0850%" y="479.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16,048,144 samples, 0.07%)</title><rect x="75.8350%" y="453" width="0.0729%" height="15" fill="rgb(237,56,23)" fg:x="16692075778" fg:w="16048144"/><text x="76.0850%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (16,048,144 samples, 0.07%)</title><rect x="75.8350%" y="437" width="0.0729%" height="15" fill="rgb(215,153,46)" fg:x="16692075778" fg:w="16048144"/><text x="76.0850%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16,048,144 samples, 0.07%)</title><rect x="75.8350%" y="421" width="0.0729%" height="15" fill="rgb(224,49,31)" fg:x="16692075778" fg:w="16048144"/><text x="76.0850%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (16,048,144 samples, 0.07%)</title><rect x="75.8350%" y="405" width="0.0729%" height="15" fill="rgb(250,18,42)" fg:x="16692075778" fg:w="16048144"/><text x="76.0850%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16,048,144 samples, 0.07%)</title><rect x="75.8350%" y="389" width="0.0729%" height="15" fill="rgb(215,176,39)" fg:x="16692075778" fg:w="16048144"/><text x="76.0850%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (16,048,144 samples, 0.07%)</title><rect x="75.8350%" y="373" width="0.0729%" height="15" fill="rgb(223,77,29)" fg:x="16692075778" fg:w="16048144"/><text x="76.0850%" y="383.50"></text></g><g><title>__GI___libc_free (14,042,126 samples, 0.06%)</title><rect x="75.8442%" y="357" width="0.0638%" height="15" fill="rgb(234,94,52)" fg:x="16694081796" fg:w="14042126"/><text x="76.0942%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::board::Position&gt;&gt; (3,009,027 samples, 0.01%)</title><rect x="75.9080%" y="501" width="0.0137%" height="15" fill="rgb(220,154,50)" fg:x="16708123922" fg:w="3009027"/><text x="76.1580%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::board::Position&gt;&gt; (3,009,027 samples, 0.01%)</title><rect x="75.9080%" y="485" width="0.0137%" height="15" fill="rgb(212,11,10)" fg:x="16708123922" fg:w="3009027"/><text x="76.1580%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 0.01%)</title><rect x="75.9080%" y="469" width="0.0137%" height="15" fill="rgb(205,166,19)" fg:x="16708123922" fg:w="3009027"/><text x="76.1580%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,009,027 samples, 0.01%)</title><rect x="75.9080%" y="453" width="0.0137%" height="15" fill="rgb(244,198,16)" fg:x="16708123922" fg:w="3009027"/><text x="76.1580%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,009,027 samples, 0.01%)</title><rect x="75.9080%" y="437" width="0.0137%" height="15" fill="rgb(219,69,12)" fg:x="16708123922" fg:w="3009027"/><text x="76.1580%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (3,009,027 samples, 0.01%)</title><rect x="75.9080%" y="421" width="0.0137%" height="15" fill="rgb(245,30,7)" fg:x="16708123922" fg:w="3009027"/><text x="76.1580%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (21,063,189 samples, 0.10%)</title><rect x="75.9216%" y="501" width="0.0957%" height="15" fill="rgb(218,221,48)" fg:x="16711132949" fg:w="21063189"/><text x="76.1716%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (3,009,027 samples, 0.01%)</title><rect x="76.0173%" y="485" width="0.0137%" height="15" fill="rgb(216,66,15)" fg:x="16732196138" fg:w="3009027"/><text x="76.2673%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 0.01%)</title><rect x="76.0173%" y="469" width="0.0137%" height="15" fill="rgb(226,122,50)" fg:x="16732196138" fg:w="3009027"/><text x="76.2673%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 0.01%)</title><rect x="76.0173%" y="453" width="0.0137%" height="15" fill="rgb(239,156,16)" fg:x="16732196138" fg:w="3009027"/><text x="76.2673%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 0.01%)</title><rect x="76.0173%" y="437" width="0.0137%" height="15" fill="rgb(224,27,38)" fg:x="16732196138" fg:w="3009027"/><text x="76.2673%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,009,027 samples, 0.01%)</title><rect x="76.0173%" y="421" width="0.0137%" height="15" fill="rgb(224,39,27)" fg:x="16732196138" fg:w="3009027"/><text x="76.2673%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,009,027 samples, 0.01%)</title><rect x="76.0173%" y="405" width="0.0137%" height="15" fill="rgb(215,92,29)" fg:x="16732196138" fg:w="3009027"/><text x="76.2673%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (3,009,027 samples, 0.01%)</title><rect x="76.0173%" y="389" width="0.0137%" height="15" fill="rgb(207,159,16)" fg:x="16732196138" fg:w="3009027"/><text x="76.2673%" y="399.50"></text></g><g><title>__GI___libc_free (3,009,027 samples, 0.01%)</title><rect x="76.0173%" y="373" width="0.0137%" height="15" fill="rgb(238,163,47)" fg:x="16732196138" fg:w="3009027"/><text x="76.2673%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,009,027 samples, 0.01%)</title><rect x="76.0401%" y="469" width="0.0137%" height="15" fill="rgb(219,91,49)" fg:x="16737211183" fg:w="3009027"/><text x="76.2901%" y="479.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (9,027,081 samples, 0.04%)</title><rect x="76.0310%" y="485" width="0.0410%" height="15" fill="rgb(227,167,31)" fg:x="16735205165" fg:w="9027081"/><text x="76.2810%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (6,018,054 samples, 0.03%)</title><rect x="76.0720%" y="405" width="0.0273%" height="15" fill="rgb(234,80,54)" fg:x="16744232246" fg:w="6018054"/><text x="76.3220%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,018,054 samples, 0.03%)</title><rect x="76.0720%" y="389" width="0.0273%" height="15" fill="rgb(212,114,2)" fg:x="16744232246" fg:w="6018054"/><text x="76.3220%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (6,018,054 samples, 0.03%)</title><rect x="76.0720%" y="373" width="0.0273%" height="15" fill="rgb(234,50,24)" fg:x="16744232246" fg:w="6018054"/><text x="76.3220%" y="383.50"></text></g><g><title>__GI___libc_free (5,015,045 samples, 0.02%)</title><rect x="76.0766%" y="357" width="0.0228%" height="15" fill="rgb(221,68,8)" fg:x="16745235255" fg:w="5015045"/><text x="76.3266%" y="367.50"></text></g><g><title>_int_free (5,015,045 samples, 0.02%)</title><rect x="76.0766%" y="341" width="0.0228%" height="15" fill="rgb(254,180,31)" fg:x="16745235255" fg:w="5015045"/><text x="76.3266%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (7,021,063 samples, 0.03%)</title><rect x="76.0720%" y="469" width="0.0319%" height="15" fill="rgb(247,130,50)" fg:x="16744232246" fg:w="7021063"/><text x="76.3220%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (7,021,063 samples, 0.03%)</title><rect x="76.0720%" y="453" width="0.0319%" height="15" fill="rgb(211,109,4)" fg:x="16744232246" fg:w="7021063"/><text x="76.3220%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (7,021,063 samples, 0.03%)</title><rect x="76.0720%" y="437" width="0.0319%" height="15" fill="rgb(238,50,21)" fg:x="16744232246" fg:w="7021063"/><text x="76.3220%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,021,063 samples, 0.03%)</title><rect x="76.0720%" y="421" width="0.0319%" height="15" fill="rgb(225,57,45)" fg:x="16744232246" fg:w="7021063"/><text x="76.3220%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4,012,036 samples, 0.02%)</title><rect x="76.1267%" y="469" width="0.0182%" height="15" fill="rgb(209,196,50)" fg:x="16756268354" fg:w="4012036"/><text x="76.3767%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,012,036 samples, 0.02%)</title><rect x="76.1267%" y="453" width="0.0182%" height="15" fill="rgb(242,140,13)" fg:x="16756268354" fg:w="4012036"/><text x="76.3767%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,012,036 samples, 0.02%)</title><rect x="76.1267%" y="437" width="0.0182%" height="15" fill="rgb(217,111,7)" fg:x="16756268354" fg:w="4012036"/><text x="76.3767%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,012,036 samples, 0.02%)</title><rect x="76.1267%" y="421" width="0.0182%" height="15" fill="rgb(253,193,51)" fg:x="16756268354" fg:w="4012036"/><text x="76.3767%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,012,036 samples, 0.02%)</title><rect x="76.1267%" y="405" width="0.0182%" height="15" fill="rgb(252,70,29)" fg:x="16756268354" fg:w="4012036"/><text x="76.3767%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,012,036 samples, 0.02%)</title><rect x="76.1267%" y="389" width="0.0182%" height="15" fill="rgb(232,127,12)" fg:x="16756268354" fg:w="4012036"/><text x="76.3767%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,012,036 samples, 0.02%)</title><rect x="76.1267%" y="373" width="0.0182%" height="15" fill="rgb(211,180,21)" fg:x="16756268354" fg:w="4012036"/><text x="76.3767%" y="383.50"></text></g><g><title>alloc::alloc::alloc (4,012,036 samples, 0.02%)</title><rect x="76.1267%" y="357" width="0.0182%" height="15" fill="rgb(229,72,13)" fg:x="16756268354" fg:w="4012036"/><text x="76.3767%" y="367.50"></text></g><g><title>__GI___libc_malloc (4,012,036 samples, 0.02%)</title><rect x="76.1267%" y="341" width="0.0182%" height="15" fill="rgb(240,211,49)" fg:x="16756268354" fg:w="4012036"/><text x="76.3767%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,009,027 samples, 0.01%)</title><rect x="76.1495%" y="357" width="0.0137%" height="15" fill="rgb(219,149,40)" fg:x="16761283399" fg:w="3009027"/><text x="76.3995%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,009,027 samples, 0.01%)</title><rect x="76.1495%" y="341" width="0.0137%" height="15" fill="rgb(210,127,46)" fg:x="16761283399" fg:w="3009027"/><text x="76.3995%" y="351.50"></text></g><g><title>alloc::alloc::alloc (3,009,027 samples, 0.01%)</title><rect x="76.1495%" y="325" width="0.0137%" height="15" fill="rgb(220,106,7)" fg:x="16761283399" fg:w="3009027"/><text x="76.3995%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4,012,036 samples, 0.02%)</title><rect x="76.1495%" y="437" width="0.0182%" height="15" fill="rgb(249,31,22)" fg:x="16761283399" fg:w="4012036"/><text x="76.3995%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,012,036 samples, 0.02%)</title><rect x="76.1495%" y="421" width="0.0182%" height="15" fill="rgb(253,1,49)" fg:x="16761283399" fg:w="4012036"/><text x="76.3995%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,012,036 samples, 0.02%)</title><rect x="76.1495%" y="405" width="0.0182%" height="15" fill="rgb(227,144,33)" fg:x="16761283399" fg:w="4012036"/><text x="76.3995%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,012,036 samples, 0.02%)</title><rect x="76.1495%" y="389" width="0.0182%" height="15" fill="rgb(249,163,44)" fg:x="16761283399" fg:w="4012036"/><text x="76.3995%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,012,036 samples, 0.02%)</title><rect x="76.1495%" y="373" width="0.0182%" height="15" fill="rgb(234,15,39)" fg:x="16761283399" fg:w="4012036"/><text x="76.3995%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (6,018,054 samples, 0.03%)</title><rect x="76.1449%" y="469" width="0.0273%" height="15" fill="rgb(207,66,16)" fg:x="16760280390" fg:w="6018054"/><text x="76.3949%" y="479.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (6,018,054 samples, 0.03%)</title><rect x="76.1449%" y="453" width="0.0273%" height="15" fill="rgb(233,112,24)" fg:x="16760280390" fg:w="6018054"/><text x="76.3949%" y="463.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (26,078,234 samples, 0.12%)</title><rect x="76.0720%" y="485" width="0.1185%" height="15" fill="rgb(230,90,22)" fg:x="16744232246" fg:w="26078234"/><text x="76.3220%" y="495.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (3,009,027 samples, 0.01%)</title><rect x="76.1905%" y="485" width="0.0137%" height="15" fill="rgb(229,61,13)" fg:x="16770310480" fg:w="3009027"/><text x="76.4405%" y="495.50"></text></g><g><title>chlang::board::Board::attacked_by_color (6,018,054 samples, 0.03%)</title><rect x="76.2041%" y="469" width="0.0273%" height="15" fill="rgb(225,57,24)" fg:x="16773319507" fg:w="6018054"/><text x="76.4541%" y="479.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (4,012,036 samples, 0.02%)</title><rect x="76.2133%" y="453" width="0.0182%" height="15" fill="rgb(208,169,48)" fg:x="16775325525" fg:w="4012036"/><text x="76.4633%" y="463.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (7,021,063 samples, 0.03%)</title><rect x="76.2041%" y="485" width="0.0319%" height="15" fill="rgb(244,218,51)" fg:x="16773319507" fg:w="7021063"/><text x="76.4541%" y="495.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (4,012,036 samples, 0.02%)</title><rect x="76.2360%" y="485" width="0.0182%" height="15" fill="rgb(214,148,10)" fg:x="16780340570" fg:w="4012036"/><text x="76.4860%" y="495.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (65,195,585 samples, 0.30%)</title><rect x="76.0173%" y="501" width="0.2962%" height="15" fill="rgb(225,174,27)" fg:x="16732196138" fg:w="65195585"/><text x="76.2673%" y="511.50"></text></g><g><title>_int_malloc (4,012,036 samples, 0.02%)</title><rect x="76.3135%" y="357" width="0.0182%" height="15" fill="rgb(230,96,26)" fg:x="16797391723" fg:w="4012036"/><text x="76.5635%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5,015,045 samples, 0.02%)</title><rect x="76.3135%" y="501" width="0.0228%" height="15" fill="rgb(232,10,30)" fg:x="16797391723" fg:w="5015045"/><text x="76.5635%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5,015,045 samples, 0.02%)</title><rect x="76.3135%" y="485" width="0.0228%" height="15" fill="rgb(222,8,50)" fg:x="16797391723" fg:w="5015045"/><text x="76.5635%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5,015,045 samples, 0.02%)</title><rect x="76.3135%" y="469" width="0.0228%" height="15" fill="rgb(213,81,27)" fg:x="16797391723" fg:w="5015045"/><text x="76.5635%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (5,015,045 samples, 0.02%)</title><rect x="76.3135%" y="453" width="0.0228%" height="15" fill="rgb(245,50,10)" fg:x="16797391723" fg:w="5015045"/><text x="76.5635%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (5,015,045 samples, 0.02%)</title><rect x="76.3135%" y="437" width="0.0228%" height="15" fill="rgb(216,100,18)" fg:x="16797391723" fg:w="5015045"/><text x="76.5635%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,015,045 samples, 0.02%)</title><rect x="76.3135%" y="421" width="0.0228%" height="15" fill="rgb(236,147,54)" fg:x="16797391723" fg:w="5015045"/><text x="76.5635%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5,015,045 samples, 0.02%)</title><rect x="76.3135%" y="405" width="0.0228%" height="15" fill="rgb(205,143,26)" fg:x="16797391723" fg:w="5015045"/><text x="76.5635%" y="415.50"></text></g><g><title>alloc::alloc::alloc (5,015,045 samples, 0.02%)</title><rect x="76.3135%" y="389" width="0.0228%" height="15" fill="rgb(236,26,9)" fg:x="16797391723" fg:w="5015045"/><text x="76.5635%" y="399.50"></text></g><g><title>__GI___libc_malloc (5,015,045 samples, 0.02%)</title><rect x="76.3135%" y="373" width="0.0228%" height="15" fill="rgb(221,165,53)" fg:x="16797391723" fg:w="5015045"/><text x="76.5635%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6,018,054 samples, 0.03%)</title><rect x="76.3363%" y="501" width="0.0273%" height="15" fill="rgb(214,110,17)" fg:x="16802406768" fg:w="6018054"/><text x="76.5863%" y="511.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves (125,376,125 samples, 0.57%)</title><rect x="75.8350%" y="517" width="0.5696%" height="15" fill="rgb(237,197,12)" fg:x="16692075778" fg:w="125376125"/><text x="76.0850%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 0.01%)</title><rect x="76.4046%" y="501" width="0.0137%" height="15" fill="rgb(205,84,17)" fg:x="16817451903" fg:w="3009027"/><text x="76.6546%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 0.01%)</title><rect x="76.4046%" y="485" width="0.0137%" height="15" fill="rgb(237,18,45)" fg:x="16817451903" fg:w="3009027"/><text x="76.6546%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 0.01%)</title><rect x="76.4046%" y="469" width="0.0137%" height="15" fill="rgb(221,87,14)" fg:x="16817451903" fg:w="3009027"/><text x="76.6546%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,009,027 samples, 0.01%)</title><rect x="76.4046%" y="453" width="0.0137%" height="15" fill="rgb(238,186,15)" fg:x="16817451903" fg:w="3009027"/><text x="76.6546%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,009,027 samples, 0.01%)</title><rect x="76.4046%" y="437" width="0.0137%" height="15" fill="rgb(208,115,11)" fg:x="16817451903" fg:w="3009027"/><text x="76.6546%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (3,009,027 samples, 0.01%)</title><rect x="76.4046%" y="421" width="0.0137%" height="15" fill="rgb(254,175,0)" fg:x="16817451903" fg:w="3009027"/><text x="76.6546%" y="431.50"></text></g><g><title>std::collections::hash::map::map_entry (7,021,063 samples, 0.03%)</title><rect x="76.4183%" y="469" width="0.0319%" height="15" fill="rgb(227,24,42)" fg:x="16820460930" fg:w="7021063"/><text x="76.6683%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (13,039,117 samples, 0.06%)</title><rect x="76.4502%" y="421" width="0.0592%" height="15" fill="rgb(223,211,37)" fg:x="16827481993" fg:w="13039117"/><text x="76.7002%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (13,039,117 samples, 0.06%)</title><rect x="76.4502%" y="405" width="0.0592%" height="15" fill="rgb(235,49,27)" fg:x="16827481993" fg:w="13039117"/><text x="76.7002%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (13,039,117 samples, 0.06%)</title><rect x="76.4502%" y="389" width="0.0592%" height="15" fill="rgb(254,97,51)" fg:x="16827481993" fg:w="13039117"/><text x="76.7002%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (26,078,234 samples, 0.12%)</title><rect x="76.5186%" y="421" width="0.1185%" height="15" fill="rgb(249,51,40)" fg:x="16842527128" fg:w="26078234"/><text x="76.7686%" y="431.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[U: N]&gt; for [T: N]&gt;::eq (3,009,027 samples, 0.01%)</title><rect x="76.6370%" y="357" width="0.0137%" height="15" fill="rgb(210,128,45)" fg:x="16868605362" fg:w="3009027"/><text x="76.8870%" y="367.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (3,009,027 samples, 0.01%)</title><rect x="76.6370%" y="341" width="0.0137%" height="15" fill="rgb(224,137,50)" fg:x="16868605362" fg:w="3009027"/><text x="76.8870%" y="351.50"></text></g><g><title>__memcmp_avx2_movbe (3,009,027 samples, 0.01%)</title><rect x="76.6370%" y="325" width="0.0137%" height="15" fill="rgb(242,15,9)" fg:x="16868605362" fg:w="3009027"/><text x="76.8870%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (9,027,081 samples, 0.04%)</title><rect x="76.6370%" y="421" width="0.0410%" height="15" fill="rgb(233,187,41)" fg:x="16868605362" fg:w="9027081"/><text x="76.8870%" y="431.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (9,027,081 samples, 0.04%)</title><rect x="76.6370%" y="405" width="0.0410%" height="15" fill="rgb(227,2,29)" fg:x="16868605362" fg:w="9027081"/><text x="76.8870%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (9,027,081 samples, 0.04%)</title><rect x="76.6370%" y="389" width="0.0410%" height="15" fill="rgb(222,70,3)" fg:x="16868605362" fg:w="9027081"/><text x="76.8870%" y="399.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::cmp::PartialEq&gt;::eq (9,027,081 samples, 0.04%)</title><rect x="76.6370%" y="373" width="0.0410%" height="15" fill="rgb(213,11,42)" fg:x="16868605362" fg:w="9027081"/><text x="76.8870%" y="383.50"></text></g><g><title>core::intrinsics::likely (17,051,153 samples, 0.08%)</title><rect x="76.6781%" y="421" width="0.0775%" height="15" fill="rgb(225,150,9)" fg:x="16877632443" fg:w="17051153"/><text x="76.9281%" y="431.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (3,009,027 samples, 0.01%)</title><rect x="76.7555%" y="389" width="0.0137%" height="15" fill="rgb(230,162,45)" fg:x="16894683596" fg:w="3009027"/><text x="77.0055%" y="399.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (3,009,027 samples, 0.01%)</title><rect x="76.7555%" y="373" width="0.0137%" height="15" fill="rgb(222,14,52)" fg:x="16894683596" fg:w="3009027"/><text x="77.0055%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (77,231,693 samples, 0.35%)</title><rect x="76.4502%" y="453" width="0.3509%" height="15" fill="rgb(254,198,14)" fg:x="16827481993" fg:w="77231693"/><text x="76.7002%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (77,231,693 samples, 0.35%)</title><rect x="76.4502%" y="437" width="0.3509%" height="15" fill="rgb(220,217,30)" fg:x="16827481993" fg:w="77231693"/><text x="76.7002%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (10,030,090 samples, 0.05%)</title><rect x="76.7555%" y="421" width="0.0456%" height="15" fill="rgb(215,146,41)" fg:x="16894683596" fg:w="10030090"/><text x="77.0055%" y="431.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (10,030,090 samples, 0.05%)</title><rect x="76.7555%" y="405" width="0.0456%" height="15" fill="rgb(217,27,36)" fg:x="16894683596" fg:w="10030090"/><text x="77.0055%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,009,027 samples, 0.01%)</title><rect x="76.8057%" y="293" width="0.0137%" height="15" fill="rgb(219,218,39)" fg:x="16905716695" fg:w="3009027"/><text x="77.0557%" y="303.50"></text></g><g><title>core::hash::sip::u8to64_le (5,015,045 samples, 0.02%)</title><rect x="76.8193%" y="293" width="0.0228%" height="15" fill="rgb(219,4,42)" fg:x="16908725722" fg:w="5015045"/><text x="77.0693%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,009,027 samples, 0.01%)</title><rect x="76.8421%" y="277" width="0.0137%" height="15" fill="rgb(249,119,36)" fg:x="16913740767" fg:w="3009027"/><text x="77.0921%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (14,042,126 samples, 0.06%)</title><rect x="76.8558%" y="277" width="0.0638%" height="15" fill="rgb(209,23,33)" fg:x="16916749794" fg:w="14042126"/><text x="77.1058%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (33,099,297 samples, 0.15%)</title><rect x="76.8421%" y="293" width="0.1504%" height="15" fill="rgb(211,10,0)" fg:x="16913740767" fg:w="33099297"/><text x="77.0921%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (79,237,711 samples, 0.36%)</title><rect x="76.8057%" y="341" width="0.3600%" height="15" fill="rgb(208,99,37)" fg:x="16905716695" fg:w="79237711"/><text x="77.0557%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (79,237,711 samples, 0.36%)</title><rect x="76.8057%" y="325" width="0.3600%" height="15" fill="rgb(213,132,31)" fg:x="16905716695" fg:w="79237711"/><text x="77.0557%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (79,237,711 samples, 0.36%)</title><rect x="76.8057%" y="309" width="0.3600%" height="15" fill="rgb(243,129,40)" fg:x="16905716695" fg:w="79237711"/><text x="77.0557%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (81,243,729 samples, 0.37%)</title><rect x="76.8011%" y="373" width="0.3691%" height="15" fill="rgb(210,66,33)" fg:x="16904713686" fg:w="81243729"/><text x="77.0511%" y="383.50"></text></g><g><title>core::hash::Hasher::write_u64 (81,243,729 samples, 0.37%)</title><rect x="76.8011%" y="357" width="0.3691%" height="15" fill="rgb(209,189,4)" fg:x="16904713686" fg:w="81243729"/><text x="77.0511%" y="367.50"></text></g><g><title>core::hash::sip::u8to64_le (3,009,027 samples, 0.01%)</title><rect x="77.1702%" y="277" width="0.0137%" height="15" fill="rgb(214,107,37)" fg:x="16985957415" fg:w="3009027"/><text x="77.4202%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (16,048,144 samples, 0.07%)</title><rect x="77.1839%" y="261" width="0.0729%" height="15" fill="rgb(245,88,54)" fg:x="16988966442" fg:w="16048144"/><text x="77.4339%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (46,138,414 samples, 0.21%)</title><rect x="77.2568%" y="261" width="0.2096%" height="15" fill="rgb(205,146,20)" fg:x="17005014586" fg:w="46138414"/><text x="77.5068%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (94,282,846 samples, 0.43%)</title><rect x="77.1839%" y="277" width="0.4283%" height="15" fill="rgb(220,161,25)" fg:x="16988966442" fg:w="94282846"/><text x="77.4339%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (134,403,206 samples, 0.61%)</title><rect x="77.1702%" y="325" width="0.6106%" height="15" fill="rgb(215,152,15)" fg:x="16985957415" fg:w="134403206"/><text x="77.4202%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (134,403,206 samples, 0.61%)</title><rect x="77.1702%" y="309" width="0.6106%" height="15" fill="rgb(233,192,44)" fg:x="16985957415" fg:w="134403206"/><text x="77.4202%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (134,403,206 samples, 0.61%)</title><rect x="77.1702%" y="293" width="0.6106%" height="15" fill="rgb(240,170,46)" fg:x="16985957415" fg:w="134403206"/><text x="77.4202%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (136,409,224 samples, 0.62%)</title><rect x="77.1702%" y="341" width="0.6197%" height="15" fill="rgb(207,104,33)" fg:x="16985957415" fg:w="136409224"/><text x="77.4202%" y="351.50"></text></g><g><title>core::hash::sip::u8to64_le (18,054,162 samples, 0.08%)</title><rect x="77.8036%" y="261" width="0.0820%" height="15" fill="rgb(219,21,39)" fg:x="17125375666" fg:w="18054162"/><text x="78.0536%" y="271.50"></text></g><g><title>core::cmp::min (7,021,063 samples, 0.03%)</title><rect x="77.8856%" y="261" width="0.0319%" height="15" fill="rgb(214,133,29)" fg:x="17143429828" fg:w="7021063"/><text x="78.1356%" y="271.50"></text></g><g><title>core::cmp::Ord::min (7,021,063 samples, 0.03%)</title><rect x="77.8856%" y="245" width="0.0319%" height="15" fill="rgb(226,93,6)" fg:x="17143429828" fg:w="7021063"/><text x="78.1356%" y="255.50"></text></g><g><title>core::cmp::min_by (7,021,063 samples, 0.03%)</title><rect x="77.8856%" y="229" width="0.0319%" height="15" fill="rgb(252,222,34)" fg:x="17143429828" fg:w="7021063"/><text x="78.1356%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (14,042,126 samples, 0.06%)</title><rect x="77.9175%" y="245" width="0.0638%" height="15" fill="rgb(252,92,48)" fg:x="17150450891" fg:w="14042126"/><text x="78.1675%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (15,045,135 samples, 0.07%)</title><rect x="77.9813%" y="245" width="0.0684%" height="15" fill="rgb(245,223,24)" fg:x="17164493017" fg:w="15045135"/><text x="78.2313%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (44,132,396 samples, 0.20%)</title><rect x="77.9175%" y="261" width="0.2005%" height="15" fill="rgb(205,176,3)" fg:x="17150450891" fg:w="44132396"/><text x="78.1675%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (120,361,080 samples, 0.55%)</title><rect x="77.7990%" y="309" width="0.5468%" height="15" fill="rgb(235,151,15)" fg:x="17124372657" fg:w="120361080"/><text x="78.0490%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (120,361,080 samples, 0.55%)</title><rect x="77.7990%" y="293" width="0.5468%" height="15" fill="rgb(237,209,11)" fg:x="17124372657" fg:w="120361080"/><text x="78.0490%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (120,361,080 samples, 0.55%)</title><rect x="77.7990%" y="277" width="0.5468%" height="15" fill="rgb(243,227,24)" fg:x="17124372657" fg:w="120361080"/><text x="78.0490%" y="287.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (163,490,467 samples, 0.74%)</title><rect x="77.7899%" y="341" width="0.7428%" height="15" fill="rgb(239,193,16)" fg:x="17122366639" fg:w="163490467"/><text x="78.0399%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (163,490,467 samples, 0.74%)</title><rect x="77.7899%" y="325" width="0.7428%" height="15" fill="rgb(231,27,9)" fg:x="17122366639" fg:w="163490467"/><text x="78.0399%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for bool&gt;::hash (17,051,153 samples, 0.08%)</title><rect x="78.5327%" y="325" width="0.0775%" height="15" fill="rgb(219,169,10)" fg:x="17285857106" fg:w="17051153"/><text x="78.7827%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u8 (17,051,153 samples, 0.08%)</title><rect x="78.5327%" y="309" width="0.0775%" height="15" fill="rgb(244,229,43)" fg:x="17285857106" fg:w="17051153"/><text x="78.7827%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (17,051,153 samples, 0.08%)</title><rect x="78.5327%" y="293" width="0.0775%" height="15" fill="rgb(254,38,20)" fg:x="17285857106" fg:w="17051153"/><text x="78.7827%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (17,051,153 samples, 0.08%)</title><rect x="78.5327%" y="277" width="0.0775%" height="15" fill="rgb(250,47,30)" fg:x="17285857106" fg:w="17051153"/><text x="78.7827%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17,051,153 samples, 0.08%)</title><rect x="78.5327%" y="261" width="0.0775%" height="15" fill="rgb(224,124,36)" fg:x="17285857106" fg:w="17051153"/><text x="78.7827%" y="271.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (318,956,862 samples, 1.45%)</title><rect x="77.1702%" y="373" width="1.4491%" height="15" fill="rgb(246,68,51)" fg:x="16985957415" fg:w="318956862"/><text x="77.4202%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (318,956,862 samples, 1.45%)</title><rect x="77.1702%" y="357" width="1.4491%" height="15" fill="rgb(253,43,49)" fg:x="16985957415" fg:w="318956862"/><text x="77.4202%" y="367.50"></text></g><g><title>core::hash::Hash::hash_slice (19,057,171 samples, 0.09%)</title><rect x="78.5327%" y="341" width="0.0866%" height="15" fill="rgb(219,54,36)" fg:x="17285857106" fg:w="19057171"/><text x="78.7827%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (4,012,036 samples, 0.02%)</title><rect x="78.6193%" y="309" width="0.0182%" height="15" fill="rgb(227,133,34)" fg:x="17304914277" fg:w="4012036"/><text x="78.8693%" y="319.50"></text></g><g><title>core::hash::sip::u8to64_le (9,027,081 samples, 0.04%)</title><rect x="78.6375%" y="261" width="0.0410%" height="15" fill="rgb(247,227,15)" fg:x="17308926313" fg:w="9027081"/><text x="78.8875%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6,018,054 samples, 0.03%)</title><rect x="78.6876%" y="245" width="0.0273%" height="15" fill="rgb(229,96,14)" fg:x="17319959412" fg:w="6018054"/><text x="78.9376%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (19,057,171 samples, 0.09%)</title><rect x="78.6876%" y="261" width="0.0866%" height="15" fill="rgb(220,79,17)" fg:x="17319959412" fg:w="19057171"/><text x="78.9376%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (50,150,450 samples, 0.23%)</title><rect x="78.6375%" y="309" width="0.2278%" height="15" fill="rgb(205,131,53)" fg:x="17308926313" fg:w="50150450"/><text x="78.8875%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (50,150,450 samples, 0.23%)</title><rect x="78.6375%" y="293" width="0.2278%" height="15" fill="rgb(209,50,29)" fg:x="17308926313" fg:w="50150450"/><text x="78.8875%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (50,150,450 samples, 0.23%)</title><rect x="78.6375%" y="277" width="0.2278%" height="15" fill="rgb(245,86,46)" fg:x="17308926313" fg:w="50150450"/><text x="78.8875%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (58,174,522 samples, 0.26%)</title><rect x="78.6193%" y="357" width="0.2643%" height="15" fill="rgb(235,66,46)" fg:x="17304914277" fg:w="58174522"/><text x="78.8693%" y="367.50"></text></g><g><title>core::hash::Hasher::write_isize (58,174,522 samples, 0.26%)</title><rect x="78.6193%" y="341" width="0.2643%" height="15" fill="rgb(232,148,31)" fg:x="17304914277" fg:w="58174522"/><text x="78.8693%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (58,174,522 samples, 0.26%)</title><rect x="78.6193%" y="325" width="0.2643%" height="15" fill="rgb(217,149,8)" fg:x="17304914277" fg:w="58174522"/><text x="78.8693%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_ne_bytes (3,009,027 samples, 0.01%)</title><rect x="78.8836%" y="293" width="0.0137%" height="15" fill="rgb(209,183,11)" fg:x="17363088799" fg:w="3009027"/><text x="79.1336%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5,015,045 samples, 0.02%)</title><rect x="78.9064%" y="245" width="0.0228%" height="15" fill="rgb(208,55,20)" fg:x="17368103844" fg:w="5015045"/><text x="79.1564%" y="255.50"></text></g><g><title>core::hash::Hasher::write_i64 (14,042,126 samples, 0.06%)</title><rect x="78.8836%" y="325" width="0.0638%" height="15" fill="rgb(218,39,14)" fg:x="17363088799" fg:w="14042126"/><text x="79.1336%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u64 (14,042,126 samples, 0.06%)</title><rect x="78.8836%" y="309" width="0.0638%" height="15" fill="rgb(216,169,33)" fg:x="17363088799" fg:w="14042126"/><text x="79.1336%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (11,033,099 samples, 0.05%)</title><rect x="78.8972%" y="293" width="0.0501%" height="15" fill="rgb(233,80,24)" fg:x="17366097826" fg:w="11033099"/><text x="79.1472%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (11,033,099 samples, 0.05%)</title><rect x="78.8972%" y="277" width="0.0501%" height="15" fill="rgb(213,179,31)" fg:x="17366097826" fg:w="11033099"/><text x="79.1472%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11,033,099 samples, 0.05%)</title><rect x="78.8972%" y="261" width="0.0501%" height="15" fill="rgb(209,19,5)" fg:x="17366097826" fg:w="11033099"/><text x="79.1472%" y="271.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (73,219,657 samples, 0.33%)</title><rect x="78.6193%" y="373" width="0.3326%" height="15" fill="rgb(219,18,35)" fg:x="17304914277" fg:w="73219657"/><text x="78.8693%" y="383.50"></text></g><g><title>&lt;chlang::board::Position as core::hash::Hash&gt;::hash (15,045,135 samples, 0.07%)</title><rect x="78.8836%" y="357" width="0.0684%" height="15" fill="rgb(209,169,16)" fg:x="17363088799" fg:w="15045135"/><text x="79.1336%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (15,045,135 samples, 0.07%)</title><rect x="78.8836%" y="341" width="0.0684%" height="15" fill="rgb(245,90,51)" fg:x="17363088799" fg:w="15045135"/><text x="79.1336%" y="351.50"></text></g><g><title>core::hash::sip::u8to64_le (6,018,054 samples, 0.03%)</title><rect x="78.9519%" y="261" width="0.0273%" height="15" fill="rgb(220,99,45)" fg:x="17378133934" fg:w="6018054"/><text x="79.2019%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5,015,045 samples, 0.02%)</title><rect x="78.9793%" y="245" width="0.0228%" height="15" fill="rgb(249,89,25)" fg:x="17384151988" fg:w="5015045"/><text x="79.2293%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (17,051,153 samples, 0.08%)</title><rect x="78.9793%" y="261" width="0.0775%" height="15" fill="rgb(239,193,0)" fg:x="17384151988" fg:w="17051153"/><text x="79.2293%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (35,105,315 samples, 0.16%)</title><rect x="78.9519%" y="293" width="0.1595%" height="15" fill="rgb(231,126,1)" fg:x="17378133934" fg:w="35105315"/><text x="79.2019%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (35,105,315 samples, 0.16%)</title><rect x="78.9519%" y="277" width="0.1595%" height="15" fill="rgb(243,166,3)" fg:x="17378133934" fg:w="35105315"/><text x="79.2019%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (36,108,324 samples, 0.16%)</title><rect x="78.9519%" y="309" width="0.1640%" height="15" fill="rgb(223,22,34)" fg:x="17378133934" fg:w="36108324"/><text x="79.2019%" y="319.50"></text></g><g><title>&lt;chlang::board::Player as core::hash::Hash&gt;::hash (39,117,351 samples, 0.18%)</title><rect x="78.9519%" y="373" width="0.1777%" height="15" fill="rgb(251,52,51)" fg:x="17378133934" fg:w="39117351"/><text x="79.2019%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (39,117,351 samples, 0.18%)</title><rect x="78.9519%" y="357" width="0.1777%" height="15" fill="rgb(221,165,28)" fg:x="17378133934" fg:w="39117351"/><text x="79.2019%" y="367.50"></text></g><g><title>core::hash::Hasher::write_isize (39,117,351 samples, 0.18%)</title><rect x="78.9519%" y="341" width="0.1777%" height="15" fill="rgb(218,121,47)" fg:x="17378133934" fg:w="39117351"/><text x="79.2019%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (39,117,351 samples, 0.18%)</title><rect x="78.9519%" y="325" width="0.1777%" height="15" fill="rgb(209,120,9)" fg:x="17378133934" fg:w="39117351"/><text x="79.2019%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (518,555,653 samples, 2.36%)</title><rect x="76.8011%" y="421" width="2.3559%" height="15" fill="rgb(236,68,12)" fg:x="16904713686" fg:w="518555653"/><text x="77.0511%" y="431.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (518,555,653 samples, 2.36%)</title><rect x="76.8011%" y="405" width="2.3559%" height="15" fill="rgb(225,194,26)" fg:x="16904713686" fg:w="518555653"/><text x="77.0511%" y="415.50">c..</text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (518,555,653 samples, 2.36%)</title><rect x="76.8011%" y="389" width="2.3559%" height="15" fill="rgb(231,84,39)" fg:x="16904713686" fg:w="518555653"/><text x="77.0511%" y="399.50">&lt;..</text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (4,012,036 samples, 0.02%)</title><rect x="79.1570%" y="421" width="0.0182%" height="15" fill="rgb(210,11,45)" fg:x="17423269339" fg:w="4012036"/><text x="79.4070%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (14,042,126 samples, 0.06%)</title><rect x="79.1752%" y="357" width="0.0638%" height="15" fill="rgb(224,54,52)" fg:x="17427281375" fg:w="14042126"/><text x="79.4252%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (32,096,288 samples, 0.15%)</title><rect x="79.2390%" y="357" width="0.1458%" height="15" fill="rgb(238,102,14)" fg:x="17441323501" fg:w="32096288"/><text x="79.4890%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (53,159,477 samples, 0.24%)</title><rect x="79.1752%" y="373" width="0.2415%" height="15" fill="rgb(243,160,52)" fg:x="17427281375" fg:w="53159477"/><text x="79.4252%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (13,039,117 samples, 0.06%)</title><rect x="79.4167%" y="357" width="0.0592%" height="15" fill="rgb(216,114,19)" fg:x="17480440852" fg:w="13039117"/><text x="79.6667%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5,015,045 samples, 0.02%)</title><rect x="79.4760%" y="357" width="0.0228%" height="15" fill="rgb(244,166,37)" fg:x="17493479969" fg:w="5015045"/><text x="79.7260%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (21,063,189 samples, 0.10%)</title><rect x="79.4167%" y="373" width="0.0957%" height="15" fill="rgb(246,29,44)" fg:x="17480440852" fg:w="21063189"/><text x="79.6667%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (94,282,846 samples, 0.43%)</title><rect x="79.1752%" y="421" width="0.4283%" height="15" fill="rgb(215,56,53)" fg:x="17427281375" fg:w="94282846"/><text x="79.4252%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (94,282,846 samples, 0.43%)</title><rect x="79.1752%" y="405" width="0.4283%" height="15" fill="rgb(217,60,2)" fg:x="17427281375" fg:w="94282846"/><text x="79.4252%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (94,282,846 samples, 0.43%)</title><rect x="79.1752%" y="389" width="0.4283%" height="15" fill="rgb(207,26,24)" fg:x="17427281375" fg:w="94282846"/><text x="79.4252%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (618,856,553 samples, 2.81%)</title><rect x="76.8011%" y="437" width="2.8116%" height="15" fill="rgb(252,210,15)" fg:x="16904713686" fg:w="618856553"/><text x="77.0511%" y="447.50">co..</text></g><g><title>hashbrown::map::make_hash (619,859,562 samples, 2.82%)</title><rect x="76.8011%" y="453" width="2.8161%" height="15" fill="rgb(253,209,26)" fg:x="16904713686" fg:w="619859562"/><text x="77.0511%" y="463.50">ha..</text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (3,009,027 samples, 0.01%)</title><rect x="79.6263%" y="325" width="0.0137%" height="15" fill="rgb(238,170,14)" fg:x="17526579266" fg:w="3009027"/><text x="79.8763%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (3,009,027 samples, 0.01%)</title><rect x="79.6263%" y="309" width="0.0137%" height="15" fill="rgb(216,178,15)" fg:x="17526579266" fg:w="3009027"/><text x="79.8763%" y="319.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (8,024,072 samples, 0.04%)</title><rect x="79.6263%" y="341" width="0.0365%" height="15" fill="rgb(250,197,2)" fg:x="17526579266" fg:w="8024072"/><text x="79.8763%" y="351.50"></text></g><g><title>__GI___libc_malloc (4,012,036 samples, 0.02%)</title><rect x="79.6628%" y="261" width="0.0182%" height="15" fill="rgb(212,70,42)" fg:x="17534603338" fg:w="4012036"/><text x="79.9128%" y="271.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (5,015,045 samples, 0.02%)</title><rect x="79.6628%" y="325" width="0.0228%" height="15" fill="rgb(227,213,9)" fg:x="17534603338" fg:w="5015045"/><text x="79.9128%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,015,045 samples, 0.02%)</title><rect x="79.6628%" y="309" width="0.0228%" height="15" fill="rgb(245,99,25)" fg:x="17534603338" fg:w="5015045"/><text x="79.9128%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5,015,045 samples, 0.02%)</title><rect x="79.6628%" y="293" width="0.0228%" height="15" fill="rgb(250,82,29)" fg:x="17534603338" fg:w="5015045"/><text x="79.9128%" y="303.50"></text></g><g><title>alloc::alloc::alloc (5,015,045 samples, 0.02%)</title><rect x="79.6628%" y="277" width="0.0228%" height="15" fill="rgb(241,226,54)" fg:x="17534603338" fg:w="5015045"/><text x="79.9128%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (7,021,063 samples, 0.03%)</title><rect x="79.6628%" y="341" width="0.0319%" height="15" fill="rgb(221,99,41)" fg:x="17534603338" fg:w="7021063"/><text x="79.9128%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (17,051,153 samples, 0.08%)</title><rect x="79.6263%" y="373" width="0.0775%" height="15" fill="rgb(213,90,21)" fg:x="17526579266" fg:w="17051153"/><text x="79.8763%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (17,051,153 samples, 0.08%)</title><rect x="79.6263%" y="357" width="0.0775%" height="15" fill="rgb(205,208,24)" fg:x="17526579266" fg:w="17051153"/><text x="79.8763%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (8,024,072 samples, 0.04%)</title><rect x="79.7038%" y="357" width="0.0365%" height="15" fill="rgb(246,31,12)" fg:x="17543630419" fg:w="8024072"/><text x="79.9538%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (8,024,072 samples, 0.04%)</title><rect x="79.7038%" y="341" width="0.0365%" height="15" fill="rgb(213,154,6)" fg:x="17543630419" fg:w="8024072"/><text x="79.9538%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (20,060,180 samples, 0.09%)</title><rect x="79.7494%" y="341" width="0.0911%" height="15" fill="rgb(222,163,29)" fg:x="17553660509" fg:w="20060180"/><text x="79.9994%" y="351.50"></text></g><g><title>core::intrinsics::unlikely (18,054,162 samples, 0.08%)</title><rect x="79.7585%" y="325" width="0.0820%" height="15" fill="rgb(227,201,8)" fg:x="17555666527" fg:w="18054162"/><text x="80.0085%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (21,063,189 samples, 0.10%)</title><rect x="79.8405%" y="325" width="0.0957%" height="15" fill="rgb(233,9,32)" fg:x="17573720689" fg:w="21063189"/><text x="80.0905%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (21,063,189 samples, 0.10%)</title><rect x="79.8405%" y="309" width="0.0957%" height="15" fill="rgb(217,54,24)" fg:x="17573720689" fg:w="21063189"/><text x="80.0905%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (13,039,117 samples, 0.06%)</title><rect x="79.9362%" y="325" width="0.0592%" height="15" fill="rgb(235,192,0)" fg:x="17594783878" fg:w="13039117"/><text x="80.1862%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (66,198,594 samples, 0.30%)</title><rect x="79.7038%" y="373" width="0.3008%" height="15" fill="rgb(235,45,9)" fg:x="17543630419" fg:w="66198594"/><text x="79.9538%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (58,174,522 samples, 0.26%)</title><rect x="79.7403%" y="357" width="0.2643%" height="15" fill="rgb(246,42,40)" fg:x="17551654491" fg:w="58174522"/><text x="79.9903%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (36,108,324 samples, 0.16%)</title><rect x="79.8405%" y="341" width="0.1640%" height="15" fill="rgb(248,111,24)" fg:x="17573720689" fg:w="36108324"/><text x="80.0905%" y="351.50"></text></g><g><title>core::hash::sip::u8to64_le (13,039,117 samples, 0.06%)</title><rect x="80.0365%" y="181" width="0.0592%" height="15" fill="rgb(249,65,22)" fg:x="17616850076" fg:w="13039117"/><text x="80.2865%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6,018,054 samples, 0.03%)</title><rect x="80.0957%" y="165" width="0.0273%" height="15" fill="rgb(238,111,51)" fg:x="17629889193" fg:w="6018054"/><text x="80.3457%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12,036,108 samples, 0.05%)</title><rect x="80.1230%" y="165" width="0.0547%" height="15" fill="rgb(250,118,22)" fg:x="17635907247" fg:w="12036108"/><text x="80.3730%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (37,111,333 samples, 0.17%)</title><rect x="80.0957%" y="181" width="0.1686%" height="15" fill="rgb(234,84,26)" fg:x="17629889193" fg:w="37111333"/><text x="80.3457%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (100,300,900 samples, 0.46%)</title><rect x="80.0273%" y="229" width="0.4557%" height="15" fill="rgb(243,172,12)" fg:x="17614844058" fg:w="100300900"/><text x="80.2773%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (100,300,900 samples, 0.46%)</title><rect x="80.0273%" y="213" width="0.4557%" height="15" fill="rgb(236,150,49)" fg:x="17614844058" fg:w="100300900"/><text x="80.2773%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (100,300,900 samples, 0.46%)</title><rect x="80.0273%" y="197" width="0.4557%" height="15" fill="rgb(225,197,26)" fg:x="17614844058" fg:w="100300900"/><text x="80.2773%" y="207.50"></text></g><g><title>core::hash::Hasher::write_u64 (109,327,981 samples, 0.50%)</title><rect x="80.0182%" y="245" width="0.4967%" height="15" fill="rgb(214,17,42)" fg:x="17612838040" fg:w="109327981"/><text x="80.2682%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (110,330,990 samples, 0.50%)</title><rect x="80.0182%" y="261" width="0.5013%" height="15" fill="rgb(224,165,40)" fg:x="17612838040" fg:w="110330990"/><text x="80.2682%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (3,009,027 samples, 0.01%)</title><rect x="80.5240%" y="165" width="0.0137%" height="15" fill="rgb(246,100,4)" fg:x="17724172039" fg:w="3009027"/><text x="80.7740%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (25,075,225 samples, 0.11%)</title><rect x="80.5377%" y="149" width="0.1139%" height="15" fill="rgb(222,103,0)" fg:x="17727181066" fg:w="25075225"/><text x="80.7877%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (57,171,513 samples, 0.26%)</title><rect x="80.6516%" y="149" width="0.2597%" height="15" fill="rgb(227,189,26)" fg:x="17752256291" fg:w="57171513"/><text x="80.9016%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (118,355,062 samples, 0.54%)</title><rect x="80.5377%" y="165" width="0.5377%" height="15" fill="rgb(214,202,17)" fg:x="17727181066" fg:w="118355062"/><text x="80.7877%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (154,463,386 samples, 0.70%)</title><rect x="80.5195%" y="213" width="0.7018%" height="15" fill="rgb(229,111,3)" fg:x="17723169030" fg:w="154463386"/><text x="80.7695%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (154,463,386 samples, 0.70%)</title><rect x="80.5195%" y="197" width="0.7018%" height="15" fill="rgb(229,172,15)" fg:x="17723169030" fg:w="154463386"/><text x="80.7695%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (154,463,386 samples, 0.70%)</title><rect x="80.5195%" y="181" width="0.7018%" height="15" fill="rgb(230,224,35)" fg:x="17723169030" fg:w="154463386"/><text x="80.7695%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (156,469,404 samples, 0.71%)</title><rect x="80.5195%" y="229" width="0.7109%" height="15" fill="rgb(251,141,6)" fg:x="17723169030" fg:w="156469404"/><text x="80.7695%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (8,024,072 samples, 0.04%)</title><rect x="81.2303%" y="197" width="0.0365%" height="15" fill="rgb(225,208,6)" fg:x="17879638434" fg:w="8024072"/><text x="81.4803%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,012,036 samples, 0.02%)</title><rect x="81.2668%" y="149" width="0.0182%" height="15" fill="rgb(246,181,16)" fg:x="17887662506" fg:w="4012036"/><text x="81.5168%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (17,051,153 samples, 0.08%)</title><rect x="81.2850%" y="149" width="0.0775%" height="15" fill="rgb(227,129,36)" fg:x="17891674542" fg:w="17051153"/><text x="81.5350%" y="159.50"></text></g><g><title>core::cmp::min (3,009,027 samples, 0.01%)</title><rect x="81.3625%" y="149" width="0.0137%" height="15" fill="rgb(248,117,24)" fg:x="17908725695" fg:w="3009027"/><text x="81.6125%" y="159.50"></text></g><g><title>core::cmp::Ord::min (3,009,027 samples, 0.01%)</title><rect x="81.3625%" y="133" width="0.0137%" height="15" fill="rgb(214,185,35)" fg:x="17908725695" fg:w="3009027"/><text x="81.6125%" y="143.50"></text></g><g><title>core::cmp::min_by (3,009,027 samples, 0.01%)</title><rect x="81.3625%" y="117" width="0.0137%" height="15" fill="rgb(236,150,34)" fg:x="17908725695" fg:w="3009027"/><text x="81.6125%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (13,039,117 samples, 0.06%)</title><rect x="81.3762%" y="133" width="0.0592%" height="15" fill="rgb(243,228,27)" fg:x="17911734722" fg:w="13039117"/><text x="81.6262%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (16,048,144 samples, 0.07%)</title><rect x="81.4354%" y="133" width="0.0729%" height="15" fill="rgb(245,77,44)" fg:x="17924773839" fg:w="16048144"/><text x="81.6854%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (53,159,477 samples, 0.24%)</title><rect x="81.3762%" y="149" width="0.2415%" height="15" fill="rgb(235,214,42)" fg:x="17911734722" fg:w="53159477"/><text x="81.6262%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (139,418,251 samples, 0.63%)</title><rect x="81.2668%" y="181" width="0.6334%" height="15" fill="rgb(221,74,3)" fg:x="17887662506" fg:w="139418251"/><text x="81.5168%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (139,418,251 samples, 0.63%)</title><rect x="81.2668%" y="165" width="0.6334%" height="15" fill="rgb(206,121,29)" fg:x="17887662506" fg:w="139418251"/><text x="81.5168%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (140,421,260 samples, 0.64%)</title><rect x="81.2668%" y="197" width="0.6380%" height="15" fill="rgb(249,131,53)" fg:x="17887662506" fg:w="140421260"/><text x="81.5168%" y="207.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (193,580,737 samples, 0.88%)</title><rect x="81.2303%" y="229" width="0.8795%" height="15" fill="rgb(236,170,29)" fg:x="17879638434" fg:w="193580737"/><text x="81.4803%" y="239.50"></text></g><g><title>core::hash::Hasher::write_usize (193,580,737 samples, 0.88%)</title><rect x="81.2303%" y="213" width="0.8795%" height="15" fill="rgb(247,96,15)" fg:x="17879638434" fg:w="193580737"/><text x="81.4803%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for bool&gt;::hash (14,042,126 samples, 0.06%)</title><rect x="82.1098%" y="213" width="0.0638%" height="15" fill="rgb(211,210,7)" fg:x="18073219171" fg:w="14042126"/><text x="82.3598%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u8 (14,042,126 samples, 0.06%)</title><rect x="82.1098%" y="197" width="0.0638%" height="15" fill="rgb(240,88,50)" fg:x="18073219171" fg:w="14042126"/><text x="82.3598%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (14,042,126 samples, 0.06%)</title><rect x="82.1098%" y="181" width="0.0638%" height="15" fill="rgb(209,229,26)" fg:x="18073219171" fg:w="14042126"/><text x="82.3598%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14,042,126 samples, 0.06%)</title><rect x="82.1098%" y="165" width="0.0638%" height="15" fill="rgb(210,68,23)" fg:x="18073219171" fg:w="14042126"/><text x="82.3598%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14,042,126 samples, 0.06%)</title><rect x="82.1098%" y="149" width="0.0638%" height="15" fill="rgb(229,180,13)" fg:x="18073219171" fg:w="14042126"/><text x="82.3598%" y="159.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (371,113,330 samples, 1.69%)</title><rect x="80.5195%" y="261" width="1.6860%" height="15" fill="rgb(236,53,44)" fg:x="17723169030" fg:w="371113330"/><text x="80.7695%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (371,113,330 samples, 1.69%)</title><rect x="80.5195%" y="245" width="1.6860%" height="15" fill="rgb(244,214,29)" fg:x="17723169030" fg:w="371113330"/><text x="80.7695%" y="255.50"></text></g><g><title>core::hash::Hash::hash_slice (21,063,189 samples, 0.10%)</title><rect x="82.1098%" y="229" width="0.0957%" height="15" fill="rgb(220,75,29)" fg:x="18073219171" fg:w="21063189"/><text x="82.3598%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (5,015,045 samples, 0.02%)</title><rect x="82.2055%" y="197" width="0.0228%" height="15" fill="rgb(214,183,37)" fg:x="18094282360" fg:w="5015045"/><text x="82.4555%" y="207.50"></text></g><g><title>core::hash::sip::u8to64_le (16,048,144 samples, 0.07%)</title><rect x="82.2283%" y="149" width="0.0729%" height="15" fill="rgb(239,117,29)" fg:x="18099297405" fg:w="16048144"/><text x="82.4783%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,009,027 samples, 0.01%)</title><rect x="82.3194%" y="133" width="0.0137%" height="15" fill="rgb(237,171,35)" fg:x="18119357585" fg:w="3009027"/><text x="82.5694%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (20,060,180 samples, 0.09%)</title><rect x="82.3103%" y="149" width="0.0911%" height="15" fill="rgb(229,178,53)" fg:x="18117351567" fg:w="20060180"/><text x="82.5603%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (62,186,558 samples, 0.28%)</title><rect x="82.2283%" y="181" width="0.2825%" height="15" fill="rgb(210,102,19)" fg:x="18099297405" fg:w="62186558"/><text x="82.4783%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (62,186,558 samples, 0.28%)</title><rect x="82.2283%" y="165" width="0.2825%" height="15" fill="rgb(235,127,22)" fg:x="18099297405" fg:w="62186558"/><text x="82.4783%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (64,192,576 samples, 0.29%)</title><rect x="82.2283%" y="197" width="0.2916%" height="15" fill="rgb(244,31,31)" fg:x="18099297405" fg:w="64192576"/><text x="82.4783%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (70,210,630 samples, 0.32%)</title><rect x="82.2055%" y="245" width="0.3190%" height="15" fill="rgb(231,43,21)" fg:x="18094282360" fg:w="70210630"/><text x="82.4555%" y="255.50"></text></g><g><title>core::hash::Hasher::write_isize (70,210,630 samples, 0.32%)</title><rect x="82.2055%" y="229" width="0.3190%" height="15" fill="rgb(217,131,35)" fg:x="18094282360" fg:w="70210630"/><text x="82.4555%" y="239.50"></text></g><g><title>core::hash::Hasher::write_usize (70,210,630 samples, 0.32%)</title><rect x="82.2055%" y="213" width="0.3190%" height="15" fill="rgb(221,149,4)" fg:x="18094282360" fg:w="70210630"/><text x="82.4555%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_ne_bytes (4,012,036 samples, 0.02%)</title><rect x="82.5245%" y="181" width="0.0182%" height="15" fill="rgb(232,170,28)" fg:x="18164492990" fg:w="4012036"/><text x="82.7745%" y="191.50"></text></g><g><title>core::hash::sip::u8to64_le (6,018,054 samples, 0.03%)</title><rect x="82.5427%" y="133" width="0.0273%" height="15" fill="rgb(238,56,10)" fg:x="18168505026" fg:w="6018054"/><text x="82.7927%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7,021,063 samples, 0.03%)</title><rect x="82.5746%" y="133" width="0.0319%" height="15" fill="rgb(235,196,14)" fg:x="18175526089" fg:w="7021063"/><text x="82.8246%" y="143.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (95,285,855 samples, 0.43%)</title><rect x="82.2055%" y="261" width="0.4329%" height="15" fill="rgb(216,45,48)" fg:x="18094282360" fg:w="95285855"/><text x="82.4555%" y="271.50"></text></g><g><title>&lt;chlang::board::Position as core::hash::Hash&gt;::hash (25,075,225 samples, 0.11%)</title><rect x="82.5245%" y="245" width="0.1139%" height="15" fill="rgb(238,213,17)" fg:x="18164492990" fg:w="25075225"/><text x="82.7745%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (25,075,225 samples, 0.11%)</title><rect x="82.5245%" y="229" width="0.1139%" height="15" fill="rgb(212,13,2)" fg:x="18164492990" fg:w="25075225"/><text x="82.7745%" y="239.50"></text></g><g><title>core::hash::Hasher::write_i64 (25,075,225 samples, 0.11%)</title><rect x="82.5245%" y="213" width="0.1139%" height="15" fill="rgb(240,114,20)" fg:x="18164492990" fg:w="25075225"/><text x="82.7745%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u64 (25,075,225 samples, 0.11%)</title><rect x="82.5245%" y="197" width="0.1139%" height="15" fill="rgb(228,41,40)" fg:x="18164492990" fg:w="25075225"/><text x="82.7745%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (21,063,189 samples, 0.10%)</title><rect x="82.5427%" y="181" width="0.0957%" height="15" fill="rgb(244,132,35)" fg:x="18168505026" fg:w="21063189"/><text x="82.7927%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (21,063,189 samples, 0.10%)</title><rect x="82.5427%" y="165" width="0.0957%" height="15" fill="rgb(253,189,4)" fg:x="18168505026" fg:w="21063189"/><text x="82.7927%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21,063,189 samples, 0.10%)</title><rect x="82.5427%" y="149" width="0.0957%" height="15" fill="rgb(224,37,19)" fg:x="18168505026" fg:w="21063189"/><text x="82.7927%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (3,009,027 samples, 0.01%)</title><rect x="82.6384%" y="197" width="0.0137%" height="15" fill="rgb(235,223,18)" fg:x="18189568215" fg:w="3009027"/><text x="82.8884%" y="207.50"></text></g><g><title>core::hash::sip::u8to64_le (7,021,063 samples, 0.03%)</title><rect x="82.6521%" y="149" width="0.0319%" height="15" fill="rgb(235,163,25)" fg:x="18192577242" fg:w="7021063"/><text x="82.9021%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4,012,036 samples, 0.02%)</title><rect x="82.6840%" y="149" width="0.0182%" height="15" fill="rgb(217,145,28)" fg:x="18199598305" fg:w="4012036"/><text x="82.9340%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (30,090,270 samples, 0.14%)</title><rect x="82.6521%" y="181" width="0.1367%" height="15" fill="rgb(223,223,32)" fg:x="18192577242" fg:w="30090270"/><text x="82.9021%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (30,090,270 samples, 0.14%)</title><rect x="82.6521%" y="165" width="0.1367%" height="15" fill="rgb(227,189,39)" fg:x="18192577242" fg:w="30090270"/><text x="82.9021%" y="175.50"></text></g><g><title>&lt;chlang::board::Player as core::hash::Hash&gt;::hash (38,114,342 samples, 0.17%)</title><rect x="82.6384%" y="261" width="0.1732%" height="15" fill="rgb(248,10,22)" fg:x="18189568215" fg:w="38114342"/><text x="82.8884%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (38,114,342 samples, 0.17%)</title><rect x="82.6384%" y="245" width="0.1732%" height="15" fill="rgb(248,46,39)" fg:x="18189568215" fg:w="38114342"/><text x="82.8884%" y="255.50"></text></g><g><title>core::hash::Hasher::write_isize (38,114,342 samples, 0.17%)</title><rect x="82.6384%" y="229" width="0.1732%" height="15" fill="rgb(248,113,48)" fg:x="18189568215" fg:w="38114342"/><text x="82.8884%" y="239.50"></text></g><g><title>core::hash::Hasher::write_usize (38,114,342 samples, 0.17%)</title><rect x="82.6384%" y="213" width="0.1732%" height="15" fill="rgb(245,16,25)" fg:x="18189568215" fg:w="38114342"/><text x="82.8884%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (35,105,315 samples, 0.16%)</title><rect x="82.6521%" y="197" width="0.1595%" height="15" fill="rgb(249,152,16)" fg:x="18192577242" fg:w="35105315"/><text x="82.9021%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (624,874,607 samples, 2.84%)</title><rect x="80.0182%" y="293" width="2.8389%" height="15" fill="rgb(250,16,1)" fg:x="17612838040" fg:w="624874607"/><text x="80.2682%" y="303.50">co..</text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (624,874,607 samples, 2.84%)</title><rect x="80.0182%" y="277" width="2.8389%" height="15" fill="rgb(249,138,3)" fg:x="17612838040" fg:w="624874607"/><text x="80.2682%" y="287.50">&lt;c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (626,880,625 samples, 2.85%)</title><rect x="80.0182%" y="309" width="2.8480%" height="15" fill="rgb(227,71,41)" fg:x="17612838040" fg:w="626880625"/><text x="80.2682%" y="319.50">co..</text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (6,018,054 samples, 0.03%)</title><rect x="82.8663%" y="309" width="0.0273%" height="15" fill="rgb(209,184,23)" fg:x="18239718665" fg:w="6018054"/><text x="83.1163%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (14,042,126 samples, 0.06%)</title><rect x="82.8936%" y="245" width="0.0638%" height="15" fill="rgb(223,215,31)" fg:x="18245736719" fg:w="14042126"/><text x="83.1436%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (36,108,324 samples, 0.16%)</title><rect x="82.9574%" y="245" width="0.1640%" height="15" fill="rgb(210,146,28)" fg:x="18259778845" fg:w="36108324"/><text x="83.2074%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (62,186,558 samples, 0.28%)</title><rect x="82.8936%" y="261" width="0.2825%" height="15" fill="rgb(209,183,41)" fg:x="18245736719" fg:w="62186558"/><text x="83.1436%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5,015,045 samples, 0.02%)</title><rect x="83.1761%" y="245" width="0.0228%" height="15" fill="rgb(209,224,45)" fg:x="18307923277" fg:w="5015045"/><text x="83.4261%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (10,030,090 samples, 0.05%)</title><rect x="83.1989%" y="245" width="0.0456%" height="15" fill="rgb(224,209,51)" fg:x="18312938322" fg:w="10030090"/><text x="83.4489%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (16,048,144 samples, 0.07%)</title><rect x="83.1761%" y="261" width="0.0729%" height="15" fill="rgb(223,17,39)" fg:x="18307923277" fg:w="16048144"/><text x="83.4261%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (104,312,936 samples, 0.47%)</title><rect x="82.8936%" y="309" width="0.4739%" height="15" fill="rgb(234,204,37)" fg:x="18245736719" fg:w="104312936"/><text x="83.1436%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (104,312,936 samples, 0.47%)</title><rect x="82.8936%" y="293" width="0.4739%" height="15" fill="rgb(236,120,5)" fg:x="18245736719" fg:w="104312936"/><text x="83.1436%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (104,312,936 samples, 0.47%)</title><rect x="82.8936%" y="277" width="0.4739%" height="15" fill="rgb(248,97,27)" fg:x="18245736719" fg:w="104312936"/><text x="83.1436%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (743,229,669 samples, 3.38%)</title><rect x="80.0091%" y="373" width="3.3766%" height="15" fill="rgb(240,66,17)" fg:x="17610832022" fg:w="743229669"/><text x="80.2591%" y="383.50">has..</text></g><g><title>hashbrown::map::make_hasher::{{closure}} (741,223,651 samples, 3.37%)</title><rect x="80.0182%" y="357" width="3.3675%" height="15" fill="rgb(210,79,3)" fg:x="17612838040" fg:w="741223651"/><text x="80.2682%" y="367.50">has..</text></g><g><title>hashbrown::map::make_hash (741,223,651 samples, 3.37%)</title><rect x="80.0182%" y="341" width="3.3675%" height="15" fill="rgb(214,176,27)" fg:x="17612838040" fg:w="741223651"/><text x="80.2682%" y="351.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (741,223,651 samples, 3.37%)</title><rect x="80.0182%" y="325" width="3.3675%" height="15" fill="rgb(235,185,3)" fg:x="17612838040" fg:w="741223651"/><text x="80.2682%" y="335.50">cor..</text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,009,027 samples, 0.01%)</title><rect x="83.3949%" y="261" width="0.0137%" height="15" fill="rgb(227,24,12)" fg:x="18356067709" fg:w="3009027"/><text x="83.6449%" y="271.50"></text></g><g><title>__rdl_dealloc (5,015,045 samples, 0.02%)</title><rect x="83.3949%" y="277" width="0.0228%" height="15" fill="rgb(252,169,48)" fg:x="18356067709" fg:w="5015045"/><text x="83.6449%" y="287.50"></text></g><g><title>_int_free (9,027,081 samples, 0.04%)</title><rect x="83.4176%" y="261" width="0.0410%" height="15" fill="rgb(212,65,1)" fg:x="18361082754" fg:w="9027081"/><text x="83.6676%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (20,060,180 samples, 0.09%)</title><rect x="83.3857%" y="373" width="0.0911%" height="15" fill="rgb(242,39,24)" fg:x="18354061691" fg:w="20060180"/><text x="83.6357%" y="383.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (20,060,180 samples, 0.09%)</title><rect x="83.3857%" y="357" width="0.0911%" height="15" fill="rgb(249,32,23)" fg:x="18354061691" fg:w="20060180"/><text x="83.6357%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::{{closure}} (20,060,180 samples, 0.09%)</title><rect x="83.3857%" y="341" width="0.0911%" height="15" fill="rgb(251,195,23)" fg:x="18354061691" fg:w="20060180"/><text x="83.6357%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (20,060,180 samples, 0.09%)</title><rect x="83.3857%" y="325" width="0.0911%" height="15" fill="rgb(236,174,8)" fg:x="18354061691" fg:w="20060180"/><text x="83.6357%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20,060,180 samples, 0.09%)</title><rect x="83.3857%" y="309" width="0.0911%" height="15" fill="rgb(220,197,8)" fg:x="18354061691" fg:w="20060180"/><text x="83.6357%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (20,060,180 samples, 0.09%)</title><rect x="83.3857%" y="293" width="0.0911%" height="15" fill="rgb(240,108,37)" fg:x="18354061691" fg:w="20060180"/><text x="83.6357%" y="303.50"></text></g><g><title>__GI___libc_free (13,039,117 samples, 0.06%)</title><rect x="83.4176%" y="277" width="0.0592%" height="15" fill="rgb(232,176,24)" fg:x="18361082754" fg:w="13039117"/><text x="83.6676%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (854,563,668 samples, 3.88%)</title><rect x="79.6263%" y="389" width="3.8824%" height="15" fill="rgb(243,35,29)" fg:x="17526579266" fg:w="854563668"/><text x="79.8763%" y="399.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (858,575,704 samples, 3.90%)</title><rect x="79.6172%" y="405" width="3.9007%" height="15" fill="rgb(210,37,18)" fg:x="17524573248" fg:w="858575704"/><text x="79.8672%" y="415.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (861,584,731 samples, 3.91%)</title><rect x="79.6172%" y="421" width="3.9143%" height="15" fill="rgb(224,184,40)" fg:x="17524573248" fg:w="861584731"/><text x="79.8672%" y="431.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (863,590,749 samples, 3.92%)</title><rect x="79.6172%" y="453" width="3.9234%" height="15" fill="rgb(236,39,29)" fg:x="17524573248" fg:w="863590749"/><text x="79.8672%" y="463.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (863,590,749 samples, 3.92%)</title><rect x="79.6172%" y="437" width="3.9234%" height="15" fill="rgb(232,48,39)" fg:x="17524573248" fg:w="863590749"/><text x="79.8672%" y="447.50">hash..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,576,730,148 samples, 7.16%)</title><rect x="76.4502%" y="469" width="7.1634%" height="15" fill="rgb(236,34,42)" fg:x="16827481993" fg:w="1576730148"/><text x="76.7002%" y="479.50">hashbrown:..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1,589,769,265 samples, 7.22%)</title><rect x="76.4183%" y="485" width="7.2226%" height="15" fill="rgb(243,106,37)" fg:x="16820460930" fg:w="1589769265"/><text x="76.6683%" y="495.50">std::colle..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (3,009,027 samples, 0.01%)</title><rect x="83.6455%" y="373" width="0.0137%" height="15" fill="rgb(218,96,6)" fg:x="18411233204" fg:w="3009027"/><text x="83.8955%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3,009,027 samples, 0.01%)</title><rect x="83.6455%" y="357" width="0.0137%" height="15" fill="rgb(235,130,12)" fg:x="18411233204" fg:w="3009027"/><text x="83.8955%" y="367.50"></text></g><g><title>hashbrown::raw::is_full (14,042,126 samples, 0.06%)</title><rect x="83.6637%" y="357" width="0.0638%" height="15" fill="rgb(231,95,0)" fg:x="18415245240" fg:w="14042126"/><text x="83.9137%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (19,057,171 samples, 0.09%)</title><rect x="83.6455%" y="389" width="0.0866%" height="15" fill="rgb(228,12,23)" fg:x="18411233204" fg:w="19057171"/><text x="83.8955%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (15,045,135 samples, 0.07%)</title><rect x="83.6637%" y="373" width="0.0684%" height="15" fill="rgb(216,12,1)" fg:x="18415245240" fg:w="15045135"/><text x="83.9137%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (5,015,045 samples, 0.02%)</title><rect x="83.7321%" y="373" width="0.0228%" height="15" fill="rgb(219,59,3)" fg:x="18430290375" fg:w="5015045"/><text x="83.9821%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5,015,045 samples, 0.02%)</title><rect x="83.7321%" y="357" width="0.0228%" height="15" fill="rgb(215,208,46)" fg:x="18430290375" fg:w="5015045"/><text x="83.9821%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (12,036,108 samples, 0.05%)</title><rect x="83.7548%" y="373" width="0.0547%" height="15" fill="rgb(254,224,29)" fg:x="18435305420" fg:w="12036108"/><text x="84.0048%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (41,123,369 samples, 0.19%)</title><rect x="83.6409%" y="421" width="0.1868%" height="15" fill="rgb(232,14,29)" fg:x="18410230195" fg:w="41123369"/><text x="83.8909%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (41,123,369 samples, 0.19%)</title><rect x="83.6409%" y="405" width="0.1868%" height="15" fill="rgb(208,45,52)" fg:x="18410230195" fg:w="41123369"/><text x="83.8909%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (21,063,189 samples, 0.10%)</title><rect x="83.7321%" y="389" width="0.0957%" height="15" fill="rgb(234,191,28)" fg:x="18430290375" fg:w="21063189"/><text x="83.9821%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (4,012,036 samples, 0.02%)</title><rect x="83.8095%" y="373" width="0.0182%" height="15" fill="rgb(244,67,43)" fg:x="18447341528" fg:w="4012036"/><text x="84.0595%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket (7,021,063 samples, 0.03%)</title><rect x="83.8278%" y="421" width="0.0319%" height="15" fill="rgb(236,189,24)" fg:x="18451353564" fg:w="7021063"/><text x="84.0778%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (7,021,063 samples, 0.03%)</title><rect x="83.8278%" y="405" width="0.0319%" height="15" fill="rgb(239,214,33)" fg:x="18451353564" fg:w="7021063"/><text x="84.0778%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (7,021,063 samples, 0.03%)</title><rect x="83.8278%" y="389" width="0.0319%" height="15" fill="rgb(226,176,41)" fg:x="18451353564" fg:w="7021063"/><text x="84.0778%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (7,021,063 samples, 0.03%)</title><rect x="83.8596%" y="421" width="0.0319%" height="15" fill="rgb(248,47,8)" fg:x="18458374627" fg:w="7021063"/><text x="84.1096%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (7,021,063 samples, 0.03%)</title><rect x="83.8596%" y="405" width="0.0319%" height="15" fill="rgb(218,81,44)" fg:x="18458374627" fg:w="7021063"/><text x="84.1096%" y="415.50"></text></g><g><title>core::ptr::write (7,021,063 samples, 0.03%)</title><rect x="83.8596%" y="389" width="0.0319%" height="15" fill="rgb(213,98,6)" fg:x="18458374627" fg:w="7021063"/><text x="84.1096%" y="399.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (56,168,504 samples, 0.26%)</title><rect x="83.6409%" y="485" width="0.2552%" height="15" fill="rgb(222,85,22)" fg:x="18410230195" fg:w="56168504"/><text x="83.8909%" y="495.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (56,168,504 samples, 0.26%)</title><rect x="83.6409%" y="469" width="0.2552%" height="15" fill="rgb(239,46,39)" fg:x="18410230195" fg:w="56168504"/><text x="83.8909%" y="479.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (56,168,504 samples, 0.26%)</title><rect x="83.6409%" y="453" width="0.2552%" height="15" fill="rgb(237,12,29)" fg:x="18410230195" fg:w="56168504"/><text x="83.8909%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (56,168,504 samples, 0.26%)</title><rect x="83.6409%" y="437" width="0.2552%" height="15" fill="rgb(214,77,8)" fg:x="18410230195" fg:w="56168504"/><text x="83.8909%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (4,012,036 samples, 0.02%)</title><rect x="83.8961%" y="421" width="0.0182%" height="15" fill="rgb(217,168,37)" fg:x="18466398699" fg:w="4012036"/><text x="84.1461%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (4,012,036 samples, 0.02%)</title><rect x="83.8961%" y="405" width="0.0182%" height="15" fill="rgb(221,217,23)" fg:x="18466398699" fg:w="4012036"/><text x="84.1461%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,012,036 samples, 0.02%)</title><rect x="83.8961%" y="389" width="0.0182%" height="15" fill="rgb(243,229,36)" fg:x="18466398699" fg:w="4012036"/><text x="84.1461%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (4,012,036 samples, 0.02%)</title><rect x="83.8961%" y="373" width="0.0182%" height="15" fill="rgb(251,163,40)" fg:x="18466398699" fg:w="4012036"/><text x="84.1461%" y="383.50"></text></g><g><title>__GI___libc_free (3,009,027 samples, 0.01%)</title><rect x="83.9007%" y="357" width="0.0137%" height="15" fill="rgb(237,222,12)" fg:x="18467401708" fg:w="3009027"/><text x="84.1507%" y="367.50"></text></g><g><title>_int_free (3,009,027 samples, 0.01%)</title><rect x="83.9007%" y="341" width="0.0137%" height="15" fill="rgb(248,132,6)" fg:x="18467401708" fg:w="3009027"/><text x="84.1507%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;&amp;chlang::board::KeyStruct,i32&gt;&gt; (6,018,054 samples, 0.03%)</title><rect x="83.8961%" y="485" width="0.0273%" height="15" fill="rgb(227,167,50)" fg:x="18466398699" fg:w="6018054"/><text x="84.1461%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;&amp;chlang::board::KeyStruct,i32,std::hash::random::RandomState&gt;&gt; (6,018,054 samples, 0.03%)</title><rect x="83.8961%" y="469" width="0.0273%" height="15" fill="rgb(242,84,37)" fg:x="18466398699" fg:w="6018054"/><text x="84.1461%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(&amp;chlang::board::KeyStruct,i32)&gt;&gt; (6,018,054 samples, 0.03%)</title><rect x="83.8961%" y="453" width="0.0273%" height="15" fill="rgb(212,4,50)" fg:x="18466398699" fg:w="6018054"/><text x="84.1461%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,018,054 samples, 0.03%)</title><rect x="83.8961%" y="437" width="0.0273%" height="15" fill="rgb(230,228,32)" fg:x="18466398699" fg:w="6018054"/><text x="84.1461%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (8,024,072 samples, 0.04%)</title><rect x="83.9234%" y="485" width="0.0365%" height="15" fill="rgb(248,217,23)" fg:x="18472416753" fg:w="8024072"/><text x="84.1734%" y="495.50"></text></g><g><title>std::hash::random::RandomState::new::KEYS::{{constant}}::{{closure}} (4,012,036 samples, 0.02%)</title><rect x="83.9599%" y="373" width="0.0182%" height="15" fill="rgb(238,197,32)" fg:x="18480440825" fg:w="4012036"/><text x="84.2099%" y="383.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (4,012,036 samples, 0.02%)</title><rect x="83.9599%" y="357" width="0.0182%" height="15" fill="rgb(236,106,1)" fg:x="18480440825" fg:w="4012036"/><text x="84.2099%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once (6,018,054 samples, 0.03%)</title><rect x="83.9599%" y="389" width="0.0273%" height="15" fill="rgb(219,228,13)" fg:x="18480440825" fg:w="6018054"/><text x="84.2099%" y="399.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (7,021,063 samples, 0.03%)</title><rect x="83.9599%" y="453" width="0.0319%" height="15" fill="rgb(238,30,35)" fg:x="18480440825" fg:w="7021063"/><text x="84.2099%" y="463.50"></text></g><g><title>std::hash::random::RandomState::new (7,021,063 samples, 0.03%)</title><rect x="83.9599%" y="437" width="0.0319%" height="15" fill="rgb(236,70,23)" fg:x="18480440825" fg:w="7021063"/><text x="84.2099%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (7,021,063 samples, 0.03%)</title><rect x="83.9599%" y="421" width="0.0319%" height="15" fill="rgb(249,104,48)" fg:x="18480440825" fg:w="7021063"/><text x="84.2099%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (7,021,063 samples, 0.03%)</title><rect x="83.9599%" y="405" width="0.0319%" height="15" fill="rgb(254,117,50)" fg:x="18480440825" fg:w="7021063"/><text x="84.2099%" y="415.50"></text></g><g><title>__GI___libc_malloc (12,036,108 samples, 0.05%)</title><rect x="84.0146%" y="229" width="0.0547%" height="15" fill="rgb(223,152,4)" fg:x="18492476933" fg:w="12036108"/><text x="84.2646%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16,048,144 samples, 0.07%)</title><rect x="84.0009%" y="277" width="0.0729%" height="15" fill="rgb(245,6,2)" fg:x="18489467906" fg:w="16048144"/><text x="84.2509%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16,048,144 samples, 0.07%)</title><rect x="84.0009%" y="261" width="0.0729%" height="15" fill="rgb(249,150,24)" fg:x="18489467906" fg:w="16048144"/><text x="84.2509%" y="271.50"></text></g><g><title>alloc::alloc::alloc (16,048,144 samples, 0.07%)</title><rect x="84.0009%" y="245" width="0.0729%" height="15" fill="rgb(228,185,42)" fg:x="18489467906" fg:w="16048144"/><text x="84.2509%" y="255.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (18,054,162 samples, 0.08%)</title><rect x="84.0009%" y="293" width="0.0820%" height="15" fill="rgb(226,39,33)" fg:x="18489467906" fg:w="18054162"/><text x="84.2509%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (22,066,198 samples, 0.10%)</title><rect x="83.9964%" y="309" width="0.1003%" height="15" fill="rgb(221,166,19)" fg:x="18488464897" fg:w="22066198"/><text x="84.2464%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (31,093,279 samples, 0.14%)</title><rect x="83.9918%" y="341" width="0.1413%" height="15" fill="rgb(209,109,2)" fg:x="18487461888" fg:w="31093279"/><text x="84.2418%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (31,093,279 samples, 0.14%)</title><rect x="83.9918%" y="325" width="0.1413%" height="15" fill="rgb(252,216,26)" fg:x="18487461888" fg:w="31093279"/><text x="84.2418%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (8,024,072 samples, 0.04%)</title><rect x="84.0966%" y="309" width="0.0365%" height="15" fill="rgb(227,173,36)" fg:x="18510531095" fg:w="8024072"/><text x="84.3466%" y="319.50"></text></g><g><title>core::intrinsics::write_bytes (8,024,072 samples, 0.04%)</title><rect x="84.0966%" y="293" width="0.0365%" height="15" fill="rgb(209,90,7)" fg:x="18510531095" fg:w="8024072"/><text x="84.3466%" y="303.50"></text></g><g><title>__memset_avx2_unaligned (7,021,063 samples, 0.03%)</title><rect x="84.1012%" y="277" width="0.0319%" height="15" fill="rgb(250,194,11)" fg:x="18511534104" fg:w="7021063"/><text x="84.3512%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (32,096,288 samples, 0.15%)</title><rect x="83.9918%" y="357" width="0.1458%" height="15" fill="rgb(220,72,50)" fg:x="18487461888" fg:w="32096288"/><text x="84.2418%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (35,105,315 samples, 0.16%)</title><rect x="83.9918%" y="373" width="0.1595%" height="15" fill="rgb(222,106,48)" fg:x="18487461888" fg:w="35105315"/><text x="84.2418%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (38,114,342 samples, 0.17%)</title><rect x="83.9918%" y="389" width="0.1732%" height="15" fill="rgb(216,220,45)" fg:x="18487461888" fg:w="38114342"/><text x="84.2418%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (41,123,369 samples, 0.19%)</title><rect x="83.9918%" y="421" width="0.1868%" height="15" fill="rgb(234,112,18)" fg:x="18487461888" fg:w="41123369"/><text x="84.2418%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (41,123,369 samples, 0.19%)</title><rect x="83.9918%" y="405" width="0.1868%" height="15" fill="rgb(206,179,9)" fg:x="18487461888" fg:w="41123369"/><text x="84.2418%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (3,009,027 samples, 0.01%)</title><rect x="84.1786%" y="261" width="0.0137%" height="15" fill="rgb(215,115,40)" fg:x="18528585257" fg:w="3009027"/><text x="84.4286%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (4,012,036 samples, 0.02%)</title><rect x="84.1786%" y="277" width="0.0182%" height="15" fill="rgb(222,69,34)" fg:x="18528585257" fg:w="4012036"/><text x="84.4286%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6,018,054 samples, 0.03%)</title><rect x="84.2060%" y="117" width="0.0273%" height="15" fill="rgb(209,161,10)" fg:x="18534603311" fg:w="6018054"/><text x="84.4560%" y="127.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (18,054,162 samples, 0.08%)</title><rect x="84.1969%" y="197" width="0.0820%" height="15" fill="rgb(217,6,38)" fg:x="18532597293" fg:w="18054162"/><text x="84.4469%" y="207.50"></text></g><g><title>core::hash::Hasher::write_u64 (18,054,162 samples, 0.08%)</title><rect x="84.1969%" y="181" width="0.0820%" height="15" fill="rgb(229,229,48)" fg:x="18532597293" fg:w="18054162"/><text x="84.4469%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (17,051,153 samples, 0.08%)</title><rect x="84.2014%" y="165" width="0.0775%" height="15" fill="rgb(225,21,28)" fg:x="18533600302" fg:w="17051153"/><text x="84.4514%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (17,051,153 samples, 0.08%)</title><rect x="84.2014%" y="149" width="0.0775%" height="15" fill="rgb(206,33,13)" fg:x="18533600302" fg:w="17051153"/><text x="84.4514%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17,051,153 samples, 0.08%)</title><rect x="84.2014%" y="133" width="0.0775%" height="15" fill="rgb(242,178,17)" fg:x="18533600302" fg:w="17051153"/><text x="84.4514%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (3,009,027 samples, 0.01%)</title><rect x="84.2789%" y="101" width="0.0137%" height="15" fill="rgb(220,162,5)" fg:x="18550651455" fg:w="3009027"/><text x="84.5289%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4,012,036 samples, 0.02%)</title><rect x="84.2925%" y="85" width="0.0182%" height="15" fill="rgb(210,33,43)" fg:x="18553660482" fg:w="4012036"/><text x="84.5425%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7,021,063 samples, 0.03%)</title><rect x="84.3108%" y="85" width="0.0319%" height="15" fill="rgb(216,116,54)" fg:x="18557672518" fg:w="7021063"/><text x="84.5608%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (17,051,153 samples, 0.08%)</title><rect x="84.2925%" y="101" width="0.0775%" height="15" fill="rgb(249,92,24)" fg:x="18553660482" fg:w="17051153"/><text x="84.5425%" y="111.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (28,084,252 samples, 0.13%)</title><rect x="84.2789%" y="149" width="0.1276%" height="15" fill="rgb(231,189,14)" fg:x="18550651455" fg:w="28084252"/><text x="84.5289%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (28,084,252 samples, 0.13%)</title><rect x="84.2789%" y="133" width="0.1276%" height="15" fill="rgb(230,8,41)" fg:x="18550651455" fg:w="28084252"/><text x="84.5289%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (28,084,252 samples, 0.13%)</title><rect x="84.2789%" y="117" width="0.1276%" height="15" fill="rgb(249,7,27)" fg:x="18550651455" fg:w="28084252"/><text x="84.5289%" y="127.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (29,087,261 samples, 0.13%)</title><rect x="84.2789%" y="165" width="0.1321%" height="15" fill="rgb(232,86,5)" fg:x="18550651455" fg:w="29087261"/><text x="84.5289%" y="175.50"></text></g><g><title>core::hash::sip::u8to64_le (4,012,036 samples, 0.02%)</title><rect x="84.4201%" y="85" width="0.0182%" height="15" fill="rgb(224,175,18)" fg:x="18581744734" fg:w="4012036"/><text x="84.6701%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,009,027 samples, 0.01%)</title><rect x="84.4429%" y="69" width="0.0137%" height="15" fill="rgb(220,129,12)" fg:x="18586759779" fg:w="3009027"/><text x="84.6929%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9,027,081 samples, 0.04%)</title><rect x="84.4384%" y="85" width="0.0410%" height="15" fill="rgb(210,19,36)" fg:x="18585756770" fg:w="9027081"/><text x="84.6884%" y="95.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (23,069,207 samples, 0.10%)</title><rect x="84.4156%" y="133" width="0.1048%" height="15" fill="rgb(219,96,14)" fg:x="18580741725" fg:w="23069207"/><text x="84.6656%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (23,069,207 samples, 0.10%)</title><rect x="84.4156%" y="117" width="0.1048%" height="15" fill="rgb(249,106,1)" fg:x="18580741725" fg:w="23069207"/><text x="84.6656%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (23,069,207 samples, 0.10%)</title><rect x="84.4156%" y="101" width="0.1048%" height="15" fill="rgb(249,155,20)" fg:x="18580741725" fg:w="23069207"/><text x="84.6656%" y="111.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (29,087,261 samples, 0.13%)</title><rect x="84.4110%" y="165" width="0.1321%" height="15" fill="rgb(244,168,9)" fg:x="18579738716" fg:w="29087261"/><text x="84.6610%" y="175.50"></text></g><g><title>core::hash::Hasher::write_usize (29,087,261 samples, 0.13%)</title><rect x="84.4110%" y="149" width="0.1321%" height="15" fill="rgb(216,23,50)" fg:x="18579738716" fg:w="29087261"/><text x="84.6610%" y="159.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (63,189,567 samples, 0.29%)</title><rect x="84.2789%" y="197" width="0.2871%" height="15" fill="rgb(224,219,20)" fg:x="18550651455" fg:w="63189567"/><text x="84.5289%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (63,189,567 samples, 0.29%)</title><rect x="84.2789%" y="181" width="0.2871%" height="15" fill="rgb(222,156,15)" fg:x="18550651455" fg:w="63189567"/><text x="84.5289%" y="191.50"></text></g><g><title>core::hash::Hash::hash_slice (5,015,045 samples, 0.02%)</title><rect x="84.5432%" y="165" width="0.0228%" height="15" fill="rgb(231,97,17)" fg:x="18608825977" fg:w="5015045"/><text x="84.7932%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for bool&gt;::hash (5,015,045 samples, 0.02%)</title><rect x="84.5432%" y="149" width="0.0228%" height="15" fill="rgb(218,70,48)" fg:x="18608825977" fg:w="5015045"/><text x="84.7932%" y="159.50"></text></g><g><title>core::hash::Hasher::write_u8 (5,015,045 samples, 0.02%)</title><rect x="84.5432%" y="133" width="0.0228%" height="15" fill="rgb(212,196,52)" fg:x="18608825977" fg:w="5015045"/><text x="84.7932%" y="143.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="84.5432%" y="117" width="0.0228%" height="15" fill="rgb(243,203,18)" fg:x="18608825977" fg:w="5015045"/><text x="84.7932%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="84.5432%" y="101" width="0.0228%" height="15" fill="rgb(252,125,41)" fg:x="18608825977" fg:w="5015045"/><text x="84.7932%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="84.5432%" y="85" width="0.0228%" height="15" fill="rgb(223,180,33)" fg:x="18608825977" fg:w="5015045"/><text x="84.7932%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5,015,045 samples, 0.02%)</title><rect x="84.5705%" y="85" width="0.0228%" height="15" fill="rgb(254,159,46)" fg:x="18614844031" fg:w="5015045"/><text x="84.8205%" y="95.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (9,027,081 samples, 0.04%)</title><rect x="84.5660%" y="181" width="0.0410%" height="15" fill="rgb(254,38,10)" fg:x="18613841022" fg:w="9027081"/><text x="84.8160%" y="191.50"></text></g><g><title>core::hash::Hasher::write_isize (9,027,081 samples, 0.04%)</title><rect x="84.5660%" y="165" width="0.0410%" height="15" fill="rgb(208,217,32)" fg:x="18613841022" fg:w="9027081"/><text x="84.8160%" y="175.50"></text></g><g><title>core::hash::Hasher::write_usize (9,027,081 samples, 0.04%)</title><rect x="84.5660%" y="149" width="0.0410%" height="15" fill="rgb(221,120,13)" fg:x="18613841022" fg:w="9027081"/><text x="84.8160%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (9,027,081 samples, 0.04%)</title><rect x="84.5660%" y="133" width="0.0410%" height="15" fill="rgb(246,54,52)" fg:x="18613841022" fg:w="9027081"/><text x="84.8160%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9,027,081 samples, 0.04%)</title><rect x="84.5660%" y="117" width="0.0410%" height="15" fill="rgb(242,34,25)" fg:x="18613841022" fg:w="9027081"/><text x="84.8160%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9,027,081 samples, 0.04%)</title><rect x="84.5660%" y="101" width="0.0410%" height="15" fill="rgb(247,209,9)" fg:x="18613841022" fg:w="9027081"/><text x="84.8160%" y="111.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (10,030,090 samples, 0.05%)</title><rect x="84.5660%" y="197" width="0.0456%" height="15" fill="rgb(228,71,26)" fg:x="18613841022" fg:w="10030090"/><text x="84.8160%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8,024,072 samples, 0.04%)</title><rect x="84.6115%" y="117" width="0.0365%" height="15" fill="rgb(222,145,49)" fg:x="18623871112" fg:w="8024072"/><text x="84.8615%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8,024,072 samples, 0.04%)</title><rect x="84.6115%" y="101" width="0.0365%" height="15" fill="rgb(218,121,17)" fg:x="18623871112" fg:w="8024072"/><text x="84.8615%" y="111.50"></text></g><g><title>&lt;chlang::board::Player as core::hash::Hash&gt;::hash (10,030,090 samples, 0.05%)</title><rect x="84.6115%" y="197" width="0.0456%" height="15" fill="rgb(244,50,7)" fg:x="18623871112" fg:w="10030090"/><text x="84.8615%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (10,030,090 samples, 0.05%)</title><rect x="84.6115%" y="181" width="0.0456%" height="15" fill="rgb(246,229,37)" fg:x="18623871112" fg:w="10030090"/><text x="84.8615%" y="191.50"></text></g><g><title>core::hash::Hasher::write_isize (10,030,090 samples, 0.05%)</title><rect x="84.6115%" y="165" width="0.0456%" height="15" fill="rgb(225,18,5)" fg:x="18623871112" fg:w="10030090"/><text x="84.8615%" y="175.50"></text></g><g><title>core::hash::Hasher::write_usize (10,030,090 samples, 0.05%)</title><rect x="84.6115%" y="149" width="0.0456%" height="15" fill="rgb(213,204,8)" fg:x="18623871112" fg:w="10030090"/><text x="84.8615%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (10,030,090 samples, 0.05%)</title><rect x="84.6115%" y="133" width="0.0456%" height="15" fill="rgb(238,103,6)" fg:x="18623871112" fg:w="10030090"/><text x="84.8615%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (103,309,927 samples, 0.47%)</title><rect x="84.1969%" y="245" width="0.4694%" height="15" fill="rgb(222,25,35)" fg:x="18532597293" fg:w="103309927"/><text x="84.4469%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (103,309,927 samples, 0.47%)</title><rect x="84.1969%" y="229" width="0.4694%" height="15" fill="rgb(213,203,35)" fg:x="18532597293" fg:w="103309927"/><text x="84.4469%" y="239.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (103,309,927 samples, 0.47%)</title><rect x="84.1969%" y="213" width="0.4694%" height="15" fill="rgb(221,79,53)" fg:x="18532597293" fg:w="103309927"/><text x="84.4469%" y="223.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (4,012,036 samples, 0.02%)</title><rect x="84.6662%" y="229" width="0.0182%" height="15" fill="rgb(243,200,35)" fg:x="18635907220" fg:w="4012036"/><text x="84.9162%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4,012,036 samples, 0.02%)</title><rect x="84.6662%" y="213" width="0.0182%" height="15" fill="rgb(248,60,25)" fg:x="18635907220" fg:w="4012036"/><text x="84.9162%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (4,012,036 samples, 0.02%)</title><rect x="84.6662%" y="197" width="0.0182%" height="15" fill="rgb(227,53,46)" fg:x="18635907220" fg:w="4012036"/><text x="84.9162%" y="207.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (6,018,054 samples, 0.03%)</title><rect x="84.6662%" y="245" width="0.0273%" height="15" fill="rgb(216,120,32)" fg:x="18635907220" fg:w="6018054"/><text x="84.9162%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4,012,036 samples, 0.02%)</title><rect x="84.6936%" y="181" width="0.0182%" height="15" fill="rgb(220,134,1)" fg:x="18641925274" fg:w="4012036"/><text x="84.9436%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7,021,063 samples, 0.03%)</title><rect x="84.7118%" y="181" width="0.0319%" height="15" fill="rgb(237,168,5)" fg:x="18645937310" fg:w="7021063"/><text x="84.9618%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (13,039,117 samples, 0.06%)</title><rect x="84.6936%" y="197" width="0.0592%" height="15" fill="rgb(231,100,33)" fg:x="18641925274" fg:w="13039117"/><text x="84.9436%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (127,382,143 samples, 0.58%)</title><rect x="84.1969%" y="277" width="0.5787%" height="15" fill="rgb(236,177,47)" fg:x="18532597293" fg:w="127382143"/><text x="84.4469%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (127,382,143 samples, 0.58%)</title><rect x="84.1969%" y="261" width="0.5787%" height="15" fill="rgb(235,7,49)" fg:x="18532597293" fg:w="127382143"/><text x="84.4469%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (18,054,162 samples, 0.08%)</title><rect x="84.6936%" y="245" width="0.0820%" height="15" fill="rgb(232,119,22)" fg:x="18641925274" fg:w="18054162"/><text x="84.9436%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (18,054,162 samples, 0.08%)</title><rect x="84.6936%" y="229" width="0.0820%" height="15" fill="rgb(254,73,53)" fg:x="18641925274" fg:w="18054162"/><text x="84.9436%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (18,054,162 samples, 0.08%)</title><rect x="84.6936%" y="213" width="0.0820%" height="15" fill="rgb(251,35,20)" fg:x="18641925274" fg:w="18054162"/><text x="84.9436%" y="223.50"></text></g><g><title>hashbrown::raw::h2 (4,012,036 samples, 0.02%)</title><rect x="84.7756%" y="229" width="0.0182%" height="15" fill="rgb(241,119,20)" fg:x="18659979436" fg:w="4012036"/><text x="85.0256%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (7,021,063 samples, 0.03%)</title><rect x="84.7756%" y="245" width="0.0319%" height="15" fill="rgb(207,102,14)" fg:x="18659979436" fg:w="7021063"/><text x="85.0256%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (140,421,260 samples, 0.64%)</title><rect x="84.1786%" y="421" width="0.6380%" height="15" fill="rgb(248,201,50)" fg:x="18528585257" fg:w="140421260"/><text x="84.4286%" y="431.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (140,421,260 samples, 0.64%)</title><rect x="84.1786%" y="405" width="0.6380%" height="15" fill="rgb(222,185,44)" fg:x="18528585257" fg:w="140421260"/><text x="84.4286%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (140,421,260 samples, 0.64%)</title><rect x="84.1786%" y="389" width="0.6380%" height="15" fill="rgb(218,107,18)" fg:x="18528585257" fg:w="140421260"/><text x="84.4286%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (140,421,260 samples, 0.64%)</title><rect x="84.1786%" y="373" width="0.6380%" height="15" fill="rgb(237,177,39)" fg:x="18528585257" fg:w="140421260"/><text x="84.4286%" y="383.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (140,421,260 samples, 0.64%)</title><rect x="84.1786%" y="357" width="0.6380%" height="15" fill="rgb(246,69,6)" fg:x="18528585257" fg:w="140421260"/><text x="84.4286%" y="367.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (140,421,260 samples, 0.64%)</title><rect x="84.1786%" y="341" width="0.6380%" height="15" fill="rgb(234,208,37)" fg:x="18528585257" fg:w="140421260"/><text x="84.4286%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (140,421,260 samples, 0.64%)</title><rect x="84.1786%" y="325" width="0.6380%" height="15" fill="rgb(225,4,6)" fg:x="18528585257" fg:w="140421260"/><text x="84.4286%" y="335.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (140,421,260 samples, 0.64%)</title><rect x="84.1786%" y="309" width="0.6380%" height="15" fill="rgb(233,45,0)" fg:x="18528585257" fg:w="140421260"/><text x="84.4286%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (140,421,260 samples, 0.64%)</title><rect x="84.1786%" y="293" width="0.6380%" height="15" fill="rgb(226,136,5)" fg:x="18528585257" fg:w="140421260"/><text x="84.4286%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (9,027,081 samples, 0.04%)</title><rect x="84.7756%" y="277" width="0.0410%" height="15" fill="rgb(211,91,47)" fg:x="18659979436" fg:w="9027081"/><text x="85.0256%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (9,027,081 samples, 0.04%)</title><rect x="84.7756%" y="261" width="0.0410%" height="15" fill="rgb(242,88,51)" fg:x="18659979436" fg:w="9027081"/><text x="85.0256%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (186,559,674 samples, 0.85%)</title><rect x="83.9918%" y="453" width="0.8476%" height="15" fill="rgb(230,91,28)" fg:x="18487461888" fg:w="186559674"/><text x="84.2418%" y="463.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (186,559,674 samples, 0.85%)</title><rect x="83.9918%" y="437" width="0.8476%" height="15" fill="rgb(254,186,29)" fg:x="18487461888" fg:w="186559674"/><text x="84.2418%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V&gt; as core::convert::From&lt;[(K,V): N]&gt;&gt;::from (209,628,881 samples, 0.95%)</title><rect x="83.9599%" y="485" width="0.9524%" height="15" fill="rgb(238,6,4)" fg:x="18480440825" fg:w="209628881"/><text x="84.2099%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (209,628,881 samples, 0.95%)</title><rect x="83.9599%" y="469" width="0.9524%" height="15" fill="rgb(221,151,16)" fg:x="18480440825" fg:w="209628881"/><text x="84.2099%" y="479.50"></text></g><g><title>chlang::board::Board::is_threefold_rep (1,907,723,118 samples, 8.67%)</title><rect x="76.4183%" y="501" width="8.6671%" height="15" fill="rgb(251,143,52)" fg:x="16820460930" fg:w="1907723118"/><text x="76.6683%" y="511.50">chlang::boar..</text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (4,012,036 samples, 0.02%)</title><rect x="85.0854%" y="485" width="0.0182%" height="15" fill="rgb(206,90,15)" fg:x="18728184048" fg:w="4012036"/><text x="85.3354%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (6,018,054 samples, 0.03%)</title><rect x="85.1037%" y="485" width="0.0273%" height="15" fill="rgb(218,35,8)" fg:x="18732196084" fg:w="6018054"/><text x="85.3537%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,018,054 samples, 0.03%)</title><rect x="85.1037%" y="469" width="0.0273%" height="15" fill="rgb(239,215,6)" fg:x="18732196084" fg:w="6018054"/><text x="85.3537%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (6,018,054 samples, 0.03%)</title><rect x="85.1037%" y="453" width="0.0273%" height="15" fill="rgb(245,116,39)" fg:x="18732196084" fg:w="6018054"/><text x="85.3537%" y="463.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,018,054 samples, 0.03%)</title><rect x="85.1037%" y="437" width="0.0273%" height="15" fill="rgb(242,65,28)" fg:x="18732196084" fg:w="6018054"/><text x="85.3537%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (6,018,054 samples, 0.03%)</title><rect x="85.1037%" y="421" width="0.0273%" height="15" fill="rgb(252,132,53)" fg:x="18732196084" fg:w="6018054"/><text x="85.3537%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,018,054 samples, 0.03%)</title><rect x="85.1037%" y="405" width="0.0273%" height="15" fill="rgb(224,159,50)" fg:x="18732196084" fg:w="6018054"/><text x="85.3537%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (6,018,054 samples, 0.03%)</title><rect x="85.1037%" y="389" width="0.0273%" height="15" fill="rgb(224,93,4)" fg:x="18732196084" fg:w="6018054"/><text x="85.3537%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,018,054 samples, 0.03%)</title><rect x="85.1037%" y="373" width="0.0273%" height="15" fill="rgb(208,81,34)" fg:x="18732196084" fg:w="6018054"/><text x="85.3537%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (6,018,054 samples, 0.03%)</title><rect x="85.1037%" y="357" width="0.0273%" height="15" fill="rgb(233,92,54)" fg:x="18732196084" fg:w="6018054"/><text x="85.3537%" y="367.50"></text></g><g><title>__GI___libc_free (6,018,054 samples, 0.03%)</title><rect x="85.1037%" y="341" width="0.0273%" height="15" fill="rgb(237,21,14)" fg:x="18732196084" fg:w="6018054"/><text x="85.3537%" y="351.50"></text></g><g><title>_int_free (6,018,054 samples, 0.03%)</title><rect x="85.1037%" y="325" width="0.0273%" height="15" fill="rgb(249,128,51)" fg:x="18732196084" fg:w="6018054"/><text x="85.3537%" y="335.50"></text></g><g><title>core::ptr::read (16,048,144 samples, 0.07%)</title><rect x="85.1310%" y="453" width="0.0729%" height="15" fill="rgb(223,129,24)" fg:x="18738214138" fg:w="16048144"/><text x="85.3810%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3,009,027 samples, 0.01%)</title><rect x="85.2039%" y="453" width="0.0137%" height="15" fill="rgb(231,168,25)" fg:x="18754262282" fg:w="3009027"/><text x="85.4539%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (22,066,198 samples, 0.10%)</title><rect x="85.1310%" y="469" width="0.1003%" height="15" fill="rgb(224,39,20)" fg:x="18738214138" fg:w="22066198"/><text x="85.3810%" y="479.50"></text></g><g><title>chlang::board::Board::unmake_last (37,111,333 samples, 0.17%)</title><rect x="85.1310%" y="485" width="0.1686%" height="15" fill="rgb(225,152,53)" fg:x="18738214138" fg:w="37111333"/><text x="85.3810%" y="495.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6,018,054 samples, 0.03%)</title><rect x="85.2996%" y="405" width="0.0273%" height="15" fill="rgb(252,17,24)" fg:x="18775325471" fg:w="6018054"/><text x="85.5496%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14,042,126 samples, 0.06%)</title><rect x="85.2996%" y="421" width="0.0638%" height="15" fill="rgb(250,114,30)" fg:x="18775325471" fg:w="14042126"/><text x="85.5496%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (26,078,234 samples, 0.12%)</title><rect x="85.2996%" y="469" width="0.1185%" height="15" fill="rgb(229,5,4)" fg:x="18775325471" fg:w="26078234"/><text x="85.5496%" y="479.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (26,078,234 samples, 0.12%)</title><rect x="85.2996%" y="453" width="0.1185%" height="15" fill="rgb(225,176,49)" fg:x="18775325471" fg:w="26078234"/><text x="85.5496%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (26,078,234 samples, 0.12%)</title><rect x="85.2996%" y="437" width="0.1185%" height="15" fill="rgb(224,221,49)" fg:x="18775325471" fg:w="26078234"/><text x="85.5496%" y="447.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (12,036,108 samples, 0.05%)</title><rect x="85.3634%" y="421" width="0.0547%" height="15" fill="rgb(253,169,27)" fg:x="18789367597" fg:w="12036108"/><text x="85.6134%" y="431.50"></text></g><g><title>&lt;chlang::cmove::Move as core::cmp::PartialEq&gt;::eq (12,036,108 samples, 0.05%)</title><rect x="85.3634%" y="405" width="0.0547%" height="15" fill="rgb(211,206,16)" fg:x="18789367597" fg:w="12036108"/><text x="85.6134%" y="415.50"></text></g><g><title>__rust_dealloc (10,030,090 samples, 0.05%)</title><rect x="85.4181%" y="373" width="0.0456%" height="15" fill="rgb(244,87,35)" fg:x="18801403705" fg:w="10030090"/><text x="85.6681%" y="383.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (10,030,090 samples, 0.05%)</title><rect x="85.4637%" y="357" width="0.0456%" height="15" fill="rgb(246,28,10)" fg:x="18811433795" fg:w="10030090"/><text x="85.7137%" y="367.50"></text></g><g><title>__rdl_dealloc (11,033,099 samples, 0.05%)</title><rect x="85.4637%" y="373" width="0.0501%" height="15" fill="rgb(229,12,44)" fg:x="18811433795" fg:w="11033099"/><text x="85.7137%" y="383.50"></text></g><g><title>tcache_put (10,030,090 samples, 0.05%)</title><rect x="85.5138%" y="341" width="0.0456%" height="15" fill="rgb(210,145,37)" fg:x="18822466894" fg:w="10030090"/><text x="85.7638%" y="351.50"></text></g><g><title>_int_free (32,096,288 samples, 0.15%)</title><rect x="85.5138%" y="357" width="0.1458%" height="15" fill="rgb(227,112,52)" fg:x="18822466894" fg:w="32096288"/><text x="85.7638%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (68,204,612 samples, 0.31%)</title><rect x="85.4181%" y="469" width="0.3099%" height="15" fill="rgb(238,155,34)" fg:x="18801403705" fg:w="68204612"/><text x="85.6681%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (68,204,612 samples, 0.31%)</title><rect x="85.4181%" y="453" width="0.3099%" height="15" fill="rgb(239,226,36)" fg:x="18801403705" fg:w="68204612"/><text x="85.6681%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (68,204,612 samples, 0.31%)</title><rect x="85.4181%" y="437" width="0.3099%" height="15" fill="rgb(230,16,23)" fg:x="18801403705" fg:w="68204612"/><text x="85.6681%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (68,204,612 samples, 0.31%)</title><rect x="85.4181%" y="421" width="0.3099%" height="15" fill="rgb(236,171,36)" fg:x="18801403705" fg:w="68204612"/><text x="85.6681%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (68,204,612 samples, 0.31%)</title><rect x="85.4181%" y="405" width="0.3099%" height="15" fill="rgb(221,22,14)" fg:x="18801403705" fg:w="68204612"/><text x="85.6681%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (68,204,612 samples, 0.31%)</title><rect x="85.4181%" y="389" width="0.3099%" height="15" fill="rgb(242,43,11)" fg:x="18801403705" fg:w="68204612"/><text x="85.6681%" y="399.50"></text></g><g><title>__GI___libc_free (47,141,423 samples, 0.21%)</title><rect x="85.5138%" y="373" width="0.2142%" height="15" fill="rgb(232,69,23)" fg:x="18822466894" fg:w="47141423"/><text x="85.7638%" y="383.50"></text></g><g><title>chlang::cmove::Move::to (5,015,045 samples, 0.02%)</title><rect x="85.7280%" y="469" width="0.0228%" height="15" fill="rgb(216,180,54)" fg:x="18869608317" fg:w="5015045"/><text x="85.9780%" y="479.50"></text></g><g><title>chlang::cmove::Move::from (4,012,036 samples, 0.02%)</title><rect x="85.7507%" y="469" width="0.0182%" height="15" fill="rgb(216,5,24)" fg:x="18874623362" fg:w="4012036"/><text x="86.0007%" y="479.50"></text></g><g><title>chlang::board::Position::bitboard (5,015,045 samples, 0.02%)</title><rect x="85.7690%" y="469" width="0.0228%" height="15" fill="rgb(225,89,9)" fg:x="18878635398" fg:w="5015045"/><text x="86.0190%" y="479.50"></text></g><g><title>chlang::board::Position::bitboard (4,012,036 samples, 0.02%)</title><rect x="85.8009%" y="453" width="0.0182%" height="15" fill="rgb(243,75,33)" fg:x="18885656461" fg:w="4012036"/><text x="86.0509%" y="463.50"></text></g><g><title>&lt;&amp;u64 as core::ops::bit::BitAnd&lt;u64&gt;&gt;::bitand (3,009,027 samples, 0.01%)</title><rect x="85.8282%" y="453" width="0.0137%" height="15" fill="rgb(247,141,45)" fg:x="18891674515" fg:w="3009027"/><text x="86.0782%" y="463.50"></text></g><g><title>chlang::board::Board::piece_type (40,120,360 samples, 0.18%)</title><rect x="85.8009%" y="469" width="0.1823%" height="15" fill="rgb(232,177,36)" fg:x="18885656461" fg:w="40120360"/><text x="86.0509%" y="479.50"></text></g><g><title>&lt;chlang::board::Player as core::clone::Clone&gt;::clone (11,033,099 samples, 0.05%)</title><rect x="85.9923%" y="453" width="0.0501%" height="15" fill="rgb(219,125,36)" fg:x="18927782839" fg:w="11033099"/><text x="86.2423%" y="463.50"></text></g><g><title>chlang::board::Board::key (25,075,225 samples, 0.11%)</title><rect x="85.9831%" y="469" width="0.1139%" height="15" fill="rgb(227,94,9)" fg:x="18925776821" fg:w="25075225"/><text x="86.2331%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (5,015,045 samples, 0.02%)</title><rect x="86.0971%" y="325" width="0.0228%" height="15" fill="rgb(240,34,52)" fg:x="18950852046" fg:w="5015045"/><text x="86.3471%" y="335.50"></text></g><g><title>__rust_dealloc (51,153,459 samples, 0.23%)</title><rect x="86.1198%" y="293" width="0.2324%" height="15" fill="rgb(216,45,12)" fg:x="18955867091" fg:w="51153459"/><text x="86.3698%" y="303.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (44,132,396 samples, 0.20%)</title><rect x="86.3522%" y="277" width="0.2005%" height="15" fill="rgb(246,21,19)" fg:x="19007020550" fg:w="44132396"/><text x="86.6022%" y="287.50"></text></g><g><title>__rdl_dealloc (54,162,486 samples, 0.25%)</title><rect x="86.3522%" y="293" width="0.2461%" height="15" fill="rgb(213,98,42)" fg:x="19007020550" fg:w="54162486"/><text x="86.6022%" y="303.50"></text></g><g><title>tcache_put (26,078,234 samples, 0.12%)</title><rect x="86.6029%" y="261" width="0.1185%" height="15" fill="rgb(250,136,47)" fg:x="19062186045" fg:w="26078234"/><text x="86.8529%" y="271.50"></text></g><g><title>_int_free (130,391,170 samples, 0.59%)</title><rect x="86.6029%" y="277" width="0.5924%" height="15" fill="rgb(251,124,27)" fg:x="19062186045" fg:w="130391170"/><text x="86.8529%" y="287.50"></text></g><g><title>__GI___libc_free (175,526,575 samples, 0.80%)</title><rect x="86.5983%" y="293" width="0.7974%" height="15" fill="rgb(229,180,14)" fg:x="19061183036" fg:w="175526575"/><text x="86.8483%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (286,860,574 samples, 1.30%)</title><rect x="86.0971%" y="437" width="1.3033%" height="15" fill="rgb(245,216,25)" fg:x="18950852046" fg:w="286860574"/><text x="86.3471%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (286,860,574 samples, 1.30%)</title><rect x="86.0971%" y="421" width="1.3033%" height="15" fill="rgb(251,43,5)" fg:x="18950852046" fg:w="286860574"/><text x="86.3471%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (286,860,574 samples, 1.30%)</title><rect x="86.0971%" y="405" width="1.3033%" height="15" fill="rgb(250,128,24)" fg:x="18950852046" fg:w="286860574"/><text x="86.3471%" y="415.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (286,860,574 samples, 1.30%)</title><rect x="86.0971%" y="389" width="1.3033%" height="15" fill="rgb(217,117,27)" fg:x="18950852046" fg:w="286860574"/><text x="86.3471%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (286,860,574 samples, 1.30%)</title><rect x="86.0971%" y="373" width="1.3033%" height="15" fill="rgb(245,147,4)" fg:x="18950852046" fg:w="286860574"/><text x="86.3471%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (286,860,574 samples, 1.30%)</title><rect x="86.0971%" y="357" width="1.3033%" height="15" fill="rgb(242,201,35)" fg:x="18950852046" fg:w="286860574"/><text x="86.3471%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (286,860,574 samples, 1.30%)</title><rect x="86.0971%" y="341" width="1.3033%" height="15" fill="rgb(218,181,1)" fg:x="18950852046" fg:w="286860574"/><text x="86.3471%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (281,845,529 samples, 1.28%)</title><rect x="86.1198%" y="325" width="1.2805%" height="15" fill="rgb(222,6,29)" fg:x="18955867091" fg:w="281845529"/><text x="86.3698%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (281,845,529 samples, 1.28%)</title><rect x="86.1198%" y="309" width="1.2805%" height="15" fill="rgb(208,186,3)" fg:x="18955867091" fg:w="281845529"/><text x="86.3698%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some_and (6,018,054 samples, 0.03%)</title><rect x="87.4003%" y="437" width="0.0273%" height="15" fill="rgb(216,36,26)" fg:x="19237712620" fg:w="6018054"/><text x="87.6503%" y="447.50"></text></g><g><title>chlang::cmove::Move::to (32,096,288 samples, 0.15%)</title><rect x="87.4277%" y="437" width="0.1458%" height="15" fill="rgb(248,201,23)" fg:x="19243730674" fg:w="32096288"/><text x="87.6777%" y="447.50"></text></g><g><title>chlang::board::Board::piece_type (82,246,738 samples, 0.37%)</title><rect x="87.5735%" y="437" width="0.3737%" height="15" fill="rgb(251,170,31)" fg:x="19275826962" fg:w="82246738"/><text x="87.8235%" y="447.50"></text></g><g><title>chlang::board::Position::valid (20,060,180 samples, 0.09%)</title><rect x="87.9471%" y="421" width="0.0911%" height="15" fill="rgb(207,110,25)" fg:x="19358073700" fg:w="20060180"/><text x="88.1971%" y="431.50"></text></g><g><title>chlang::board::Position::bitboard (14,042,126 samples, 0.06%)</title><rect x="88.0383%" y="421" width="0.0638%" height="15" fill="rgb(250,54,15)" fg:x="19378133880" fg:w="14042126"/><text x="88.2883%" y="431.50"></text></g><g><title>__rust_alloc (5,015,045 samples, 0.02%)</title><rect x="88.1021%" y="293" width="0.0228%" height="15" fill="rgb(227,68,33)" fg:x="19392176006" fg:w="5015045"/><text x="88.3521%" y="303.50"></text></g><g><title>tcache_get (6,018,054 samples, 0.03%)</title><rect x="88.1249%" y="277" width="0.0273%" height="15" fill="rgb(238,34,41)" fg:x="19397191051" fg:w="6018054"/><text x="88.3749%" y="287.50"></text></g><g><title>checked_request2size (3,009,027 samples, 0.01%)</title><rect x="88.1522%" y="277" width="0.0137%" height="15" fill="rgb(220,11,15)" fg:x="19403209105" fg:w="3009027"/><text x="88.4022%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38,114,342 samples, 0.17%)</title><rect x="88.1021%" y="341" width="0.1732%" height="15" fill="rgb(246,111,35)" fg:x="19392176006" fg:w="38114342"/><text x="88.3521%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38,114,342 samples, 0.17%)</title><rect x="88.1021%" y="325" width="0.1732%" height="15" fill="rgb(209,88,53)" fg:x="19392176006" fg:w="38114342"/><text x="88.3521%" y="335.50"></text></g><g><title>alloc::alloc::alloc (38,114,342 samples, 0.17%)</title><rect x="88.1021%" y="309" width="0.1732%" height="15" fill="rgb(231,185,47)" fg:x="19392176006" fg:w="38114342"/><text x="88.3521%" y="319.50"></text></g><g><title>__GI___libc_malloc (33,099,297 samples, 0.15%)</title><rect x="88.1249%" y="293" width="0.1504%" height="15" fill="rgb(233,154,1)" fg:x="19397191051" fg:w="33099297"/><text x="88.3749%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (42,126,378 samples, 0.19%)</title><rect x="88.1021%" y="389" width="0.1914%" height="15" fill="rgb(225,15,46)" fg:x="19392176006" fg:w="42126378"/><text x="88.3521%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (42,126,378 samples, 0.19%)</title><rect x="88.1021%" y="373" width="0.1914%" height="15" fill="rgb(211,135,41)" fg:x="19392176006" fg:w="42126378"/><text x="88.3521%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (42,126,378 samples, 0.19%)</title><rect x="88.1021%" y="357" width="0.1914%" height="15" fill="rgb(208,54,0)" fg:x="19392176006" fg:w="42126378"/><text x="88.3521%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (45,135,405 samples, 0.21%)</title><rect x="88.1021%" y="421" width="0.2051%" height="15" fill="rgb(244,136,14)" fg:x="19392176006" fg:w="45135405"/><text x="88.3521%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (45,135,405 samples, 0.21%)</title><rect x="88.1021%" y="405" width="0.2051%" height="15" fill="rgb(241,56,14)" fg:x="19392176006" fg:w="45135405"/><text x="88.3521%" y="415.50"></text></g><g><title>core::ptr::write (10,030,090 samples, 0.05%)</title><rect x="88.3071%" y="405" width="0.0456%" height="15" fill="rgb(205,80,24)" fg:x="19437311411" fg:w="10030090"/><text x="88.5571%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3,009,027 samples, 0.01%)</title><rect x="88.3527%" y="405" width="0.0137%" height="15" fill="rgb(220,57,4)" fg:x="19447341501" fg:w="3009027"/><text x="88.6027%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3,009,027 samples, 0.01%)</title><rect x="88.3527%" y="389" width="0.0137%" height="15" fill="rgb(226,193,50)" fg:x="19447341501" fg:w="3009027"/><text x="88.6027%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (3,009,027 samples, 0.01%)</title><rect x="88.3527%" y="373" width="0.0137%" height="15" fill="rgb(231,168,22)" fg:x="19447341501" fg:w="3009027"/><text x="88.6027%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (3,009,027 samples, 0.01%)</title><rect x="88.3527%" y="357" width="0.0137%" height="15" fill="rgb(254,215,14)" fg:x="19447341501" fg:w="3009027"/><text x="88.6027%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (60,180,540 samples, 0.27%)</title><rect x="88.3071%" y="421" width="0.2734%" height="15" fill="rgb(211,115,16)" fg:x="19437311411" fg:w="60180540"/><text x="88.5571%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&lt;&amp;i64&gt;&gt;::add (5,015,045 samples, 0.02%)</title><rect x="88.5805%" y="421" width="0.0228%" height="15" fill="rgb(236,210,16)" fg:x="19497491951" fg:w="5015045"/><text x="88.8305%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (5,015,045 samples, 0.02%)</title><rect x="88.5805%" y="405" width="0.0228%" height="15" fill="rgb(221,94,12)" fg:x="19497491951" fg:w="5015045"/><text x="88.8305%" y="415.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (211,634,899 samples, 0.96%)</title><rect x="87.9471%" y="437" width="0.9615%" height="15" fill="rgb(235,218,49)" fg:x="19358073700" fg:w="211634899"/><text x="88.1971%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (3,009,027 samples, 0.01%)</title><rect x="88.9086%" y="325" width="0.0137%" height="15" fill="rgb(217,114,14)" fg:x="19569708599" fg:w="3009027"/><text x="89.1586%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (4,012,036 samples, 0.02%)</title><rect x="88.9086%" y="341" width="0.0182%" height="15" fill="rgb(216,145,22)" fg:x="19569708599" fg:w="4012036"/><text x="89.1586%" y="351.50"></text></g><g><title>__rust_dealloc (11,033,099 samples, 0.05%)</title><rect x="88.9269%" y="309" width="0.0501%" height="15" fill="rgb(217,112,39)" fg:x="19573720635" fg:w="11033099"/><text x="89.1769%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9,027,081 samples, 0.04%)</title><rect x="88.9770%" y="293" width="0.0410%" height="15" fill="rgb(225,85,32)" fg:x="19584753734" fg:w="9027081"/><text x="89.2270%" y="303.50"></text></g><g><title>__rdl_dealloc (11,033,099 samples, 0.05%)</title><rect x="88.9770%" y="309" width="0.0501%" height="15" fill="rgb(245,209,47)" fg:x="19584753734" fg:w="11033099"/><text x="89.2270%" y="319.50"></text></g><g><title>tcache_put (8,024,072 samples, 0.04%)</title><rect x="89.0271%" y="277" width="0.0365%" height="15" fill="rgb(218,220,15)" fg:x="19595786833" fg:w="8024072"/><text x="89.2771%" y="287.50"></text></g><g><title>_int_free (34,102,306 samples, 0.15%)</title><rect x="89.0271%" y="293" width="0.1549%" height="15" fill="rgb(222,202,31)" fg:x="19595786833" fg:w="34102306"/><text x="89.2771%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (67,201,603 samples, 0.31%)</title><rect x="88.9086%" y="357" width="0.3053%" height="15" fill="rgb(243,203,4)" fg:x="19569708599" fg:w="67201603"/><text x="89.1586%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (63,189,567 samples, 0.29%)</title><rect x="88.9269%" y="341" width="0.2871%" height="15" fill="rgb(237,92,17)" fg:x="19573720635" fg:w="63189567"/><text x="89.1769%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (63,189,567 samples, 0.29%)</title><rect x="88.9269%" y="325" width="0.2871%" height="15" fill="rgb(231,119,7)" fg:x="19573720635" fg:w="63189567"/><text x="89.1769%" y="335.50"></text></g><g><title>__GI___libc_free (41,123,369 samples, 0.19%)</title><rect x="89.0271%" y="309" width="0.1868%" height="15" fill="rgb(237,82,41)" fg:x="19595786833" fg:w="41123369"/><text x="89.2771%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (70,210,630 samples, 0.32%)</title><rect x="88.9086%" y="421" width="0.3190%" height="15" fill="rgb(226,81,48)" fg:x="19569708599" fg:w="70210630"/><text x="89.1586%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (70,210,630 samples, 0.32%)</title><rect x="88.9086%" y="405" width="0.3190%" height="15" fill="rgb(234,70,51)" fg:x="19569708599" fg:w="70210630"/><text x="89.1586%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (70,210,630 samples, 0.32%)</title><rect x="88.9086%" y="389" width="0.3190%" height="15" fill="rgb(251,86,4)" fg:x="19569708599" fg:w="70210630"/><text x="89.1586%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (70,210,630 samples, 0.32%)</title><rect x="88.9086%" y="373" width="0.3190%" height="15" fill="rgb(244,144,28)" fg:x="19569708599" fg:w="70210630"/><text x="89.1586%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some_and (4,012,036 samples, 0.02%)</title><rect x="89.2276%" y="421" width="0.0182%" height="15" fill="rgb(232,161,39)" fg:x="19639919229" fg:w="4012036"/><text x="89.4776%" y="431.50"></text></g><g><title>__rust_alloc (15,045,135 samples, 0.07%)</title><rect x="89.2595%" y="293" width="0.0684%" height="15" fill="rgb(247,34,51)" fg:x="19646940292" fg:w="15045135"/><text x="89.5095%" y="303.50"></text></g><g><title>tcache_get (10,030,090 samples, 0.05%)</title><rect x="89.3370%" y="277" width="0.0456%" height="15" fill="rgb(225,132,2)" fg:x="19663991445" fg:w="10030090"/><text x="89.5870%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (56,168,504 samples, 0.26%)</title><rect x="89.2595%" y="341" width="0.2552%" height="15" fill="rgb(209,159,44)" fg:x="19646940292" fg:w="56168504"/><text x="89.5095%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (56,168,504 samples, 0.26%)</title><rect x="89.2595%" y="325" width="0.2552%" height="15" fill="rgb(251,214,1)" fg:x="19646940292" fg:w="56168504"/><text x="89.5095%" y="335.50"></text></g><g><title>alloc::alloc::alloc (56,168,504 samples, 0.26%)</title><rect x="89.2595%" y="309" width="0.2552%" height="15" fill="rgb(247,84,47)" fg:x="19646940292" fg:w="56168504"/><text x="89.5095%" y="319.50"></text></g><g><title>__GI___libc_malloc (39,117,351 samples, 0.18%)</title><rect x="89.3370%" y="293" width="0.1777%" height="15" fill="rgb(240,111,43)" fg:x="19663991445" fg:w="39117351"/><text x="89.5870%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (57,171,513 samples, 0.26%)</title><rect x="89.2595%" y="421" width="0.2597%" height="15" fill="rgb(215,214,35)" fg:x="19646940292" fg:w="57171513"/><text x="89.5095%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (57,171,513 samples, 0.26%)</title><rect x="89.2595%" y="405" width="0.2597%" height="15" fill="rgb(248,207,23)" fg:x="19646940292" fg:w="57171513"/><text x="89.5095%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (57,171,513 samples, 0.26%)</title><rect x="89.2595%" y="389" width="0.2597%" height="15" fill="rgb(214,186,4)" fg:x="19646940292" fg:w="57171513"/><text x="89.5095%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (57,171,513 samples, 0.26%)</title><rect x="89.2595%" y="373" width="0.2597%" height="15" fill="rgb(220,133,22)" fg:x="19646940292" fg:w="57171513"/><text x="89.5095%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (57,171,513 samples, 0.26%)</title><rect x="89.2595%" y="357" width="0.2597%" height="15" fill="rgb(239,134,19)" fg:x="19646940292" fg:w="57171513"/><text x="89.5095%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (13,039,117 samples, 0.06%)</title><rect x="89.5284%" y="389" width="0.0592%" height="15" fill="rgb(250,140,9)" fg:x="19706117823" fg:w="13039117"/><text x="89.7784%" y="399.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (13,039,117 samples, 0.06%)</title><rect x="89.5284%" y="373" width="0.0592%" height="15" fill="rgb(225,59,14)" fg:x="19706117823" fg:w="13039117"/><text x="89.7784%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13,039,117 samples, 0.06%)</title><rect x="89.5284%" y="357" width="0.0592%" height="15" fill="rgb(214,152,51)" fg:x="19706117823" fg:w="13039117"/><text x="89.7784%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13,039,117 samples, 0.06%)</title><rect x="89.5284%" y="341" width="0.0592%" height="15" fill="rgb(251,227,43)" fg:x="19706117823" fg:w="13039117"/><text x="89.7784%" y="351.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (4,012,036 samples, 0.02%)</title><rect x="89.5876%" y="277" width="0.0182%" height="15" fill="rgb(241,96,17)" fg:x="19719156940" fg:w="4012036"/><text x="89.8376%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (4,012,036 samples, 0.02%)</title><rect x="89.5876%" y="261" width="0.0182%" height="15" fill="rgb(234,198,43)" fg:x="19719156940" fg:w="4012036"/><text x="89.8376%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (4,012,036 samples, 0.02%)</title><rect x="89.5876%" y="245" width="0.0182%" height="15" fill="rgb(220,108,29)" fg:x="19719156940" fg:w="4012036"/><text x="89.8376%" y="255.50"></text></g><g><title>alloc::raw_vec::layout_array (9,027,081 samples, 0.04%)</title><rect x="89.5876%" y="309" width="0.0410%" height="15" fill="rgb(226,163,33)" fg:x="19719156940" fg:w="9027081"/><text x="89.8376%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::repeat (9,027,081 samples, 0.04%)</title><rect x="89.5876%" y="293" width="0.0410%" height="15" fill="rgb(205,194,45)" fg:x="19719156940" fg:w="9027081"/><text x="89.8376%" y="303.50"></text></g><g><title>__rust_alloc (3,009,027 samples, 0.01%)</title><rect x="89.6286%" y="261" width="0.0137%" height="15" fill="rgb(206,143,44)" fg:x="19728184021" fg:w="3009027"/><text x="89.8786%" y="271.50"></text></g><g><title>tcache_get (3,009,027 samples, 0.01%)</title><rect x="89.6468%" y="245" width="0.0137%" height="15" fill="rgb(236,136,36)" fg:x="19732196057" fg:w="3009027"/><text x="89.8968%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (26,078,234 samples, 0.12%)</title><rect x="89.5876%" y="357" width="0.1185%" height="15" fill="rgb(249,172,42)" fg:x="19719156940" fg:w="26078234"/><text x="89.8376%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (26,078,234 samples, 0.12%)</title><rect x="89.5876%" y="341" width="0.1185%" height="15" fill="rgb(216,139,23)" fg:x="19719156940" fg:w="26078234"/><text x="89.8376%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (26,078,234 samples, 0.12%)</title><rect x="89.5876%" y="325" width="0.1185%" height="15" fill="rgb(207,166,20)" fg:x="19719156940" fg:w="26078234"/><text x="89.8376%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17,051,153 samples, 0.08%)</title><rect x="89.6286%" y="309" width="0.0775%" height="15" fill="rgb(210,209,22)" fg:x="19728184021" fg:w="17051153"/><text x="89.8786%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17,051,153 samples, 0.08%)</title><rect x="89.6286%" y="293" width="0.0775%" height="15" fill="rgb(232,118,20)" fg:x="19728184021" fg:w="17051153"/><text x="89.8786%" y="303.50"></text></g><g><title>alloc::alloc::alloc (17,051,153 samples, 0.08%)</title><rect x="89.6286%" y="277" width="0.0775%" height="15" fill="rgb(238,113,42)" fg:x="19728184021" fg:w="17051153"/><text x="89.8786%" y="287.50"></text></g><g><title>__GI___libc_malloc (13,039,117 samples, 0.06%)</title><rect x="89.6468%" y="261" width="0.0592%" height="15" fill="rgb(231,42,5)" fg:x="19732196057" fg:w="13039117"/><text x="89.8968%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (27,081,243 samples, 0.12%)</title><rect x="89.5876%" y="389" width="0.1230%" height="15" fill="rgb(243,166,24)" fg:x="19719156940" fg:w="27081243"/><text x="89.8376%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (27,081,243 samples, 0.12%)</title><rect x="89.5876%" y="373" width="0.1230%" height="15" fill="rgb(237,226,12)" fg:x="19719156940" fg:w="27081243"/><text x="89.8376%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3,009,027 samples, 0.01%)</title><rect x="89.7106%" y="325" width="0.0137%" height="15" fill="rgb(229,133,24)" fg:x="19746238183" fg:w="3009027"/><text x="89.9606%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,009,027 samples, 0.01%)</title><rect x="89.7106%" y="309" width="0.0137%" height="15" fill="rgb(238,33,43)" fg:x="19746238183" fg:w="3009027"/><text x="89.9606%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,009,027 samples, 0.01%)</title><rect x="89.7106%" y="293" width="0.0137%" height="15" fill="rgb(227,59,38)" fg:x="19746238183" fg:w="3009027"/><text x="89.9606%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,009,027 samples, 0.01%)</title><rect x="89.7106%" y="277" width="0.0137%" height="15" fill="rgb(230,97,0)" fg:x="19746238183" fg:w="3009027"/><text x="89.9606%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (8,024,072 samples, 0.04%)</title><rect x="89.7106%" y="389" width="0.0365%" height="15" fill="rgb(250,173,50)" fg:x="19746238183" fg:w="8024072"/><text x="89.9606%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (8,024,072 samples, 0.04%)</title><rect x="89.7106%" y="373" width="0.0365%" height="15" fill="rgb(240,15,50)" fg:x="19746238183" fg:w="8024072"/><text x="89.9606%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8,024,072 samples, 0.04%)</title><rect x="89.7106%" y="357" width="0.0365%" height="15" fill="rgb(221,93,22)" fg:x="19746238183" fg:w="8024072"/><text x="89.9606%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (8,024,072 samples, 0.04%)</title><rect x="89.7106%" y="341" width="0.0365%" height="15" fill="rgb(245,180,53)" fg:x="19746238183" fg:w="8024072"/><text x="89.9606%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5,015,045 samples, 0.02%)</title><rect x="89.7243%" y="325" width="0.0228%" height="15" fill="rgb(231,88,51)" fg:x="19749247210" fg:w="5015045"/><text x="89.9743%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5,015,045 samples, 0.02%)</title><rect x="89.7243%" y="309" width="0.0228%" height="15" fill="rgb(240,58,21)" fg:x="19749247210" fg:w="5015045"/><text x="89.9743%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (5,015,045 samples, 0.02%)</title><rect x="89.7243%" y="293" width="0.0228%" height="15" fill="rgb(237,21,10)" fg:x="19749247210" fg:w="5015045"/><text x="89.9743%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (5,015,045 samples, 0.02%)</title><rect x="89.7243%" y="277" width="0.0228%" height="15" fill="rgb(218,43,11)" fg:x="19749247210" fg:w="5015045"/><text x="89.9743%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,015,045 samples, 0.02%)</title><rect x="89.7471%" y="389" width="0.0228%" height="15" fill="rgb(218,221,29)" fg:x="19754262255" fg:w="5015045"/><text x="89.9971%" y="399.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5,015,045 samples, 0.02%)</title><rect x="89.7471%" y="373" width="0.0228%" height="15" fill="rgb(214,118,42)" fg:x="19754262255" fg:w="5015045"/><text x="89.9971%" y="383.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (83,249,747 samples, 0.38%)</title><rect x="89.5284%" y="405" width="0.3782%" height="15" fill="rgb(251,200,26)" fg:x="19706117823" fg:w="83249747"/><text x="89.7784%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (84,252,756 samples, 0.38%)</title><rect x="89.5284%" y="421" width="0.3828%" height="15" fill="rgb(237,101,39)" fg:x="19706117823" fg:w="84252756"/><text x="89.7784%" y="431.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (261,785,349 samples, 1.19%)</title><rect x="88.9086%" y="437" width="1.1893%" height="15" fill="rgb(251,117,11)" fg:x="19569708599" fg:w="261785349"/><text x="89.1586%" y="447.50"></text></g><g><title>chlang::cmove::Move::new (3,009,027 samples, 0.01%)</title><rect x="90.0980%" y="421" width="0.0137%" height="15" fill="rgb(216,223,23)" fg:x="19831493948" fg:w="3009027"/><text x="90.3480%" y="431.50"></text></g><g><title>chlang::board::Position::valid (14,042,126 samples, 0.06%)</title><rect x="90.1116%" y="421" width="0.0638%" height="15" fill="rgb(251,54,12)" fg:x="19834502975" fg:w="14042126"/><text x="90.3616%" y="431.50"></text></g><g><title>tcache_get (12,036,108 samples, 0.05%)</title><rect x="90.1937%" y="277" width="0.0547%" height="15" fill="rgb(254,176,54)" fg:x="19852557137" fg:w="12036108"/><text x="90.4437%" y="287.50"></text></g><g><title>checked_request2size (3,009,027 samples, 0.01%)</title><rect x="90.2483%" y="277" width="0.0137%" height="15" fill="rgb(210,32,8)" fg:x="19864593245" fg:w="3009027"/><text x="90.4983%" y="287.50"></text></g><g><title>__GI___libc_malloc (35,105,315 samples, 0.16%)</title><rect x="90.1937%" y="293" width="0.1595%" height="15" fill="rgb(235,52,38)" fg:x="19852557137" fg:w="35105315"/><text x="90.4437%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (41,123,369 samples, 0.19%)</title><rect x="90.1754%" y="341" width="0.1868%" height="15" fill="rgb(231,4,44)" fg:x="19848545101" fg:w="41123369"/><text x="90.4254%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (41,123,369 samples, 0.19%)</title><rect x="90.1754%" y="325" width="0.1868%" height="15" fill="rgb(249,2,32)" fg:x="19848545101" fg:w="41123369"/><text x="90.4254%" y="335.50"></text></g><g><title>alloc::alloc::alloc (41,123,369 samples, 0.19%)</title><rect x="90.1754%" y="309" width="0.1868%" height="15" fill="rgb(224,65,26)" fg:x="19848545101" fg:w="41123369"/><text x="90.4254%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (45,135,405 samples, 0.21%)</title><rect x="90.1754%" y="421" width="0.2051%" height="15" fill="rgb(250,73,40)" fg:x="19848545101" fg:w="45135405"/><text x="90.4254%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (45,135,405 samples, 0.21%)</title><rect x="90.1754%" y="405" width="0.2051%" height="15" fill="rgb(253,177,16)" fg:x="19848545101" fg:w="45135405"/><text x="90.4254%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (45,135,405 samples, 0.21%)</title><rect x="90.1754%" y="389" width="0.2051%" height="15" fill="rgb(217,32,34)" fg:x="19848545101" fg:w="45135405"/><text x="90.4254%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (45,135,405 samples, 0.21%)</title><rect x="90.1754%" y="373" width="0.2051%" height="15" fill="rgb(212,7,10)" fg:x="19848545101" fg:w="45135405"/><text x="90.4254%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (45,135,405 samples, 0.21%)</title><rect x="90.1754%" y="357" width="0.2051%" height="15" fill="rgb(245,89,8)" fg:x="19848545101" fg:w="45135405"/><text x="90.4254%" y="367.50"></text></g><g><title>core::ptr::write (5,015,045 samples, 0.02%)</title><rect x="90.3805%" y="405" width="0.0228%" height="15" fill="rgb(237,16,53)" fg:x="19893680506" fg:w="5015045"/><text x="90.6305%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (25,075,225 samples, 0.11%)</title><rect x="90.3805%" y="421" width="0.1139%" height="15" fill="rgb(250,204,30)" fg:x="19893680506" fg:w="25075225"/><text x="90.6305%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&lt;&amp;i64&gt;&gt;::add (4,012,036 samples, 0.02%)</title><rect x="90.4944%" y="421" width="0.0182%" height="15" fill="rgb(208,77,27)" fg:x="19918755731" fg:w="4012036"/><text x="90.7444%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (4,012,036 samples, 0.02%)</title><rect x="90.4944%" y="405" width="0.0182%" height="15" fill="rgb(250,204,28)" fg:x="19918755731" fg:w="4012036"/><text x="90.7444%" y="415.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (133,400,197 samples, 0.61%)</title><rect x="90.0980%" y="437" width="0.6061%" height="15" fill="rgb(244,63,21)" fg:x="19831493948" fg:w="133400197"/><text x="90.3480%" y="447.50"></text></g><g><title>chlang::cmove::Move::new (12,036,108 samples, 0.05%)</title><rect x="90.7040%" y="421" width="0.0547%" height="15" fill="rgb(236,85,44)" fg:x="19964894145" fg:w="12036108"/><text x="90.9540%" y="431.50"></text></g><g><title>chlang::board::Position::valid (18,054,162 samples, 0.08%)</title><rect x="90.7587%" y="421" width="0.0820%" height="15" fill="rgb(215,98,4)" fg:x="19976930253" fg:w="18054162"/><text x="91.0087%" y="431.50"></text></g><g><title>__rust_alloc (3,009,027 samples, 0.01%)</title><rect x="90.8407%" y="293" width="0.0137%" height="15" fill="rgb(235,38,11)" fg:x="19994984415" fg:w="3009027"/><text x="91.0907%" y="303.50"></text></g><g><title>__rdl_alloc (4,012,036 samples, 0.02%)</title><rect x="90.8544%" y="293" width="0.0182%" height="15" fill="rgb(254,186,25)" fg:x="19997993442" fg:w="4012036"/><text x="91.1044%" y="303.50"></text></g><g><title>tcache_get (13,039,117 samples, 0.06%)</title><rect x="90.8726%" y="277" width="0.0592%" height="15" fill="rgb(225,55,31)" fg:x="20002005478" fg:w="13039117"/><text x="91.1226%" y="287.50"></text></g><g><title>__GI___libc_malloc (35,105,315 samples, 0.16%)</title><rect x="90.8726%" y="293" width="0.1595%" height="15" fill="rgb(211,15,21)" fg:x="20002005478" fg:w="35105315"/><text x="91.1226%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (45,135,405 samples, 0.21%)</title><rect x="90.8407%" y="341" width="0.2051%" height="15" fill="rgb(215,187,41)" fg:x="19994984415" fg:w="45135405"/><text x="91.0907%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45,135,405 samples, 0.21%)</title><rect x="90.8407%" y="325" width="0.2051%" height="15" fill="rgb(248,69,32)" fg:x="19994984415" fg:w="45135405"/><text x="91.0907%" y="335.50"></text></g><g><title>alloc::alloc::alloc (45,135,405 samples, 0.21%)</title><rect x="90.8407%" y="309" width="0.2051%" height="15" fill="rgb(252,102,52)" fg:x="19994984415" fg:w="45135405"/><text x="91.0907%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (50,150,450 samples, 0.23%)</title><rect x="90.8407%" y="421" width="0.2278%" height="15" fill="rgb(253,140,32)" fg:x="19994984415" fg:w="50150450"/><text x="91.0907%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (50,150,450 samples, 0.23%)</title><rect x="90.8407%" y="405" width="0.2278%" height="15" fill="rgb(216,56,42)" fg:x="19994984415" fg:w="50150450"/><text x="91.0907%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (50,150,450 samples, 0.23%)</title><rect x="90.8407%" y="389" width="0.2278%" height="15" fill="rgb(216,184,14)" fg:x="19994984415" fg:w="50150450"/><text x="91.0907%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (50,150,450 samples, 0.23%)</title><rect x="90.8407%" y="373" width="0.2278%" height="15" fill="rgb(237,187,27)" fg:x="19994984415" fg:w="50150450"/><text x="91.0907%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (50,150,450 samples, 0.23%)</title><rect x="90.8407%" y="357" width="0.2278%" height="15" fill="rgb(219,65,3)" fg:x="19994984415" fg:w="50150450"/><text x="91.0907%" y="367.50"></text></g><g><title>core::ptr::write (3,009,027 samples, 0.01%)</title><rect x="91.0686%" y="405" width="0.0137%" height="15" fill="rgb(245,83,25)" fg:x="20045134865" fg:w="3009027"/><text x="91.3186%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (24,072,216 samples, 0.11%)</title><rect x="91.0686%" y="421" width="0.1094%" height="15" fill="rgb(214,205,45)" fg:x="20045134865" fg:w="24072216"/><text x="91.3186%" y="431.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (159,478,431 samples, 0.72%)</title><rect x="90.7040%" y="437" width="0.7245%" height="15" fill="rgb(241,20,18)" fg:x="19964894145" fg:w="159478431"/><text x="90.9540%" y="447.50"></text></g><g><title>chlang::board::Position::valid (27,081,243 samples, 0.12%)</title><rect x="91.4286%" y="421" width="0.1230%" height="15" fill="rgb(232,163,23)" fg:x="20124372576" fg:w="27081243"/><text x="91.6786%" y="431.50"></text></g><g><title>chlang::board::Position::bitboard (3,009,027 samples, 0.01%)</title><rect x="91.5516%" y="421" width="0.0137%" height="15" fill="rgb(214,5,46)" fg:x="20151453819" fg:w="3009027"/><text x="91.8016%" y="431.50"></text></g><g><title>__rust_alloc (6,018,054 samples, 0.03%)</title><rect x="91.5653%" y="293" width="0.0273%" height="15" fill="rgb(229,78,17)" fg:x="20154462846" fg:w="6018054"/><text x="91.8153%" y="303.50"></text></g><g><title>__rdl_alloc (3,009,027 samples, 0.01%)</title><rect x="91.5926%" y="293" width="0.0137%" height="15" fill="rgb(248,89,10)" fg:x="20160480900" fg:w="3009027"/><text x="91.8426%" y="303.50"></text></g><g><title>tcache_get (10,030,090 samples, 0.05%)</title><rect x="91.6063%" y="277" width="0.0456%" height="15" fill="rgb(248,54,15)" fg:x="20163489927" fg:w="10030090"/><text x="91.8563%" y="287.50"></text></g><g><title>__GI___libc_malloc (38,114,342 samples, 0.17%)</title><rect x="91.6063%" y="293" width="0.1732%" height="15" fill="rgb(223,116,6)" fg:x="20163489927" fg:w="38114342"/><text x="91.8563%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (48,144,432 samples, 0.22%)</title><rect x="91.5653%" y="341" width="0.2187%" height="15" fill="rgb(205,125,38)" fg:x="20154462846" fg:w="48144432"/><text x="91.8153%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (48,144,432 samples, 0.22%)</title><rect x="91.5653%" y="325" width="0.2187%" height="15" fill="rgb(251,78,38)" fg:x="20154462846" fg:w="48144432"/><text x="91.8153%" y="335.50"></text></g><g><title>alloc::alloc::alloc (48,144,432 samples, 0.22%)</title><rect x="91.5653%" y="309" width="0.2187%" height="15" fill="rgb(253,78,28)" fg:x="20154462846" fg:w="48144432"/><text x="91.8153%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (53,159,477 samples, 0.24%)</title><rect x="91.5653%" y="389" width="0.2415%" height="15" fill="rgb(209,120,3)" fg:x="20154462846" fg:w="53159477"/><text x="91.8153%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (53,159,477 samples, 0.24%)</title><rect x="91.5653%" y="373" width="0.2415%" height="15" fill="rgb(238,229,9)" fg:x="20154462846" fg:w="53159477"/><text x="91.8153%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (53,159,477 samples, 0.24%)</title><rect x="91.5653%" y="357" width="0.2415%" height="15" fill="rgb(253,159,18)" fg:x="20154462846" fg:w="53159477"/><text x="91.8153%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (54,162,486 samples, 0.25%)</title><rect x="91.5653%" y="421" width="0.2461%" height="15" fill="rgb(244,42,34)" fg:x="20154462846" fg:w="54162486"/><text x="91.8153%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (54,162,486 samples, 0.25%)</title><rect x="91.5653%" y="405" width="0.2461%" height="15" fill="rgb(224,8,7)" fg:x="20154462846" fg:w="54162486"/><text x="91.8153%" y="415.50"></text></g><g><title>core::ptr::write (3,009,027 samples, 0.01%)</title><rect x="91.8113%" y="405" width="0.0137%" height="15" fill="rgb(210,201,45)" fg:x="20208625332" fg:w="3009027"/><text x="92.0613%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (20,060,180 samples, 0.09%)</title><rect x="91.8113%" y="421" width="0.0911%" height="15" fill="rgb(252,185,21)" fg:x="20208625332" fg:w="20060180"/><text x="92.0613%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&lt;&amp;i64&gt;&gt;::add (13,039,117 samples, 0.06%)</title><rect x="91.9025%" y="421" width="0.0592%" height="15" fill="rgb(223,131,1)" fg:x="20228685512" fg:w="13039117"/><text x="92.1525%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::arith::Add&gt;::add (13,039,117 samples, 0.06%)</title><rect x="91.9025%" y="405" width="0.0592%" height="15" fill="rgb(245,141,16)" fg:x="20228685512" fg:w="13039117"/><text x="92.1525%" y="415.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (174,523,566 samples, 0.79%)</title><rect x="91.4286%" y="437" width="0.7929%" height="15" fill="rgb(229,55,45)" fg:x="20124372576" fg:w="174523566"/><text x="91.6786%" y="447.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (15,045,135 samples, 0.07%)</title><rect x="92.2306%" y="421" width="0.0684%" height="15" fill="rgb(208,92,15)" fg:x="20300902160" fg:w="15045135"/><text x="92.4806%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (25,075,225 samples, 0.11%)</title><rect x="92.2215%" y="437" width="0.1139%" height="15" fill="rgb(234,185,47)" fg:x="20298896142" fg:w="25075225"/><text x="92.4715%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (51,153,459 samples, 0.23%)</title><rect x="92.3354%" y="437" width="0.2324%" height="15" fill="rgb(253,104,50)" fg:x="20323971367" fg:w="51153459"/><text x="92.5854%" y="447.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (51,153,459 samples, 0.23%)</title><rect x="92.3354%" y="421" width="0.2324%" height="15" fill="rgb(205,70,7)" fg:x="20323971367" fg:w="51153459"/><text x="92.5854%" y="431.50"></text></g><g><title>chlang::board::Board::attacked_by_color (1,472,417,212 samples, 6.69%)</title><rect x="86.0971%" y="453" width="6.6895%" height="15" fill="rgb(240,178,43)" fg:x="18950852046" fg:w="1472417212"/><text x="86.3471%" y="463.50">chlang::b..</text></g><g><title>&lt;chlang::board::Position as core::convert::From&lt;u64&gt;&gt;::from (5,015,045 samples, 0.02%)</title><rect x="92.7865%" y="453" width="0.0228%" height="15" fill="rgb(214,112,2)" fg:x="20423269258" fg:w="5015045"/><text x="93.0365%" y="463.50"></text></g><g><title>chlang::board::Board::is_valid (1,492,477,392 samples, 6.78%)</title><rect x="86.0971%" y="469" width="6.7806%" height="15" fill="rgb(206,46,17)" fg:x="18950852046" fg:w="1492477392"/><text x="86.3471%" y="479.50">chlang::b..</text></g><g><title>__rust_dealloc (6,018,054 samples, 0.03%)</title><rect x="92.8776%" y="341" width="0.0273%" height="15" fill="rgb(225,220,16)" fg:x="20443329438" fg:w="6018054"/><text x="93.1276%" y="351.50"></text></g><g><title>__rdl_dealloc (3,009,027 samples, 0.01%)</title><rect x="92.9050%" y="341" width="0.0137%" height="15" fill="rgb(238,65,40)" fg:x="20449347492" fg:w="3009027"/><text x="93.1550%" y="351.50"></text></g><g><title>_int_free (7,021,063 samples, 0.03%)</title><rect x="92.9187%" y="325" width="0.0319%" height="15" fill="rgb(230,151,21)" fg:x="20452356519" fg:w="7021063"/><text x="93.1687%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (21,063,189 samples, 0.10%)</title><rect x="92.8776%" y="453" width="0.0957%" height="15" fill="rgb(218,58,49)" fg:x="20443329438" fg:w="21063189"/><text x="93.1276%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (21,063,189 samples, 0.10%)</title><rect x="92.8776%" y="437" width="0.0957%" height="15" fill="rgb(219,179,14)" fg:x="20443329438" fg:w="21063189"/><text x="93.1276%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (21,063,189 samples, 0.10%)</title><rect x="92.8776%" y="421" width="0.0957%" height="15" fill="rgb(223,72,1)" fg:x="20443329438" fg:w="21063189"/><text x="93.1276%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21,063,189 samples, 0.10%)</title><rect x="92.8776%" y="405" width="0.0957%" height="15" fill="rgb(238,126,10)" fg:x="20443329438" fg:w="21063189"/><text x="93.1276%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (21,063,189 samples, 0.10%)</title><rect x="92.8776%" y="389" width="0.0957%" height="15" fill="rgb(224,206,38)" fg:x="20443329438" fg:w="21063189"/><text x="93.1276%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21,063,189 samples, 0.10%)</title><rect x="92.8776%" y="373" width="0.0957%" height="15" fill="rgb(212,201,54)" fg:x="20443329438" fg:w="21063189"/><text x="93.1276%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (21,063,189 samples, 0.10%)</title><rect x="92.8776%" y="357" width="0.0957%" height="15" fill="rgb(218,154,48)" fg:x="20443329438" fg:w="21063189"/><text x="93.1276%" y="367.50"></text></g><g><title>__GI___libc_free (12,036,108 samples, 0.05%)</title><rect x="92.9187%" y="341" width="0.0547%" height="15" fill="rgb(232,93,24)" fg:x="20452356519" fg:w="12036108"/><text x="93.1687%" y="351.50"></text></g><g><title>chlang::board::Position::bitboard (5,015,045 samples, 0.02%)</title><rect x="92.9733%" y="437" width="0.0228%" height="15" fill="rgb(245,30,21)" fg:x="20464392627" fg:w="5015045"/><text x="93.2233%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,009,027 samples, 0.01%)</title><rect x="92.9961%" y="437" width="0.0137%" height="15" fill="rgb(242,148,29)" fg:x="20469407672" fg:w="3009027"/><text x="93.2461%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (3,009,027 samples, 0.01%)</title><rect x="92.9961%" y="421" width="0.0137%" height="15" fill="rgb(244,153,54)" fg:x="20469407672" fg:w="3009027"/><text x="93.2461%" y="431.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,009,027 samples, 0.01%)</title><rect x="92.9961%" y="405" width="0.0137%" height="15" fill="rgb(252,87,22)" fg:x="20469407672" fg:w="3009027"/><text x="93.2461%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3,009,027 samples, 0.01%)</title><rect x="92.9961%" y="389" width="0.0137%" height="15" fill="rgb(210,51,29)" fg:x="20469407672" fg:w="3009027"/><text x="93.2461%" y="399.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (3,009,027 samples, 0.01%)</title><rect x="92.9961%" y="373" width="0.0137%" height="15" fill="rgb(242,136,47)" fg:x="20469407672" fg:w="3009027"/><text x="93.2461%" y="383.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (3,009,027 samples, 0.01%)</title><rect x="92.9961%" y="357" width="0.0137%" height="15" fill="rgb(238,68,4)" fg:x="20469407672" fg:w="3009027"/><text x="93.2461%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (3,009,027 samples, 0.01%)</title><rect x="92.9961%" y="341" width="0.0137%" height="15" fill="rgb(242,161,30)" fg:x="20469407672" fg:w="3009027"/><text x="93.2461%" y="351.50"></text></g><g><title>core::ptr::read (3,009,027 samples, 0.01%)</title><rect x="92.9961%" y="325" width="0.0137%" height="15" fill="rgb(218,58,44)" fg:x="20469407672" fg:w="3009027"/><text x="93.2461%" y="335.50"></text></g><g><title>chlang::board::Board::piece_type (24,072,216 samples, 0.11%)</title><rect x="92.9733%" y="453" width="0.1094%" height="15" fill="rgb(252,125,32)" fg:x="20464392627" fg:w="24072216"/><text x="93.2233%" y="463.50"></text></g><g><title>chlang::board::Position::valid (6,018,054 samples, 0.03%)</title><rect x="93.0827%" y="437" width="0.0273%" height="15" fill="rgb(219,178,0)" fg:x="20488464843" fg:w="6018054"/><text x="93.3327%" y="447.50"></text></g><g><title>chlang::board::Position::bitboard (4,012,036 samples, 0.02%)</title><rect x="93.1100%" y="437" width="0.0182%" height="15" fill="rgb(213,152,7)" fg:x="20494482897" fg:w="4012036"/><text x="93.3600%" y="447.50"></text></g><g><title>__rust_alloc (5,015,045 samples, 0.02%)</title><rect x="93.1283%" y="309" width="0.0228%" height="15" fill="rgb(249,109,34)" fg:x="20498494933" fg:w="5015045"/><text x="93.3783%" y="319.50"></text></g><g><title>tcache_get (4,012,036 samples, 0.02%)</title><rect x="93.1511%" y="293" width="0.0182%" height="15" fill="rgb(232,96,21)" fg:x="20503509978" fg:w="4012036"/><text x="93.4011%" y="303.50"></text></g><g><title>__GI___libc_malloc (7,021,063 samples, 0.03%)</title><rect x="93.1511%" y="309" width="0.0319%" height="15" fill="rgb(228,27,39)" fg:x="20503509978" fg:w="7021063"/><text x="93.4011%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13,039,117 samples, 0.06%)</title><rect x="93.1283%" y="357" width="0.0592%" height="15" fill="rgb(211,182,52)" fg:x="20498494933" fg:w="13039117"/><text x="93.3783%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13,039,117 samples, 0.06%)</title><rect x="93.1283%" y="341" width="0.0592%" height="15" fill="rgb(234,178,38)" fg:x="20498494933" fg:w="13039117"/><text x="93.3783%" y="351.50"></text></g><g><title>alloc::alloc::alloc (13,039,117 samples, 0.06%)</title><rect x="93.1283%" y="325" width="0.0592%" height="15" fill="rgb(221,111,3)" fg:x="20498494933" fg:w="13039117"/><text x="93.3783%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (15,045,135 samples, 0.07%)</title><rect x="93.1283%" y="437" width="0.0684%" height="15" fill="rgb(228,175,21)" fg:x="20498494933" fg:w="15045135"/><text x="93.3783%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15,045,135 samples, 0.07%)</title><rect x="93.1283%" y="421" width="0.0684%" height="15" fill="rgb(228,174,43)" fg:x="20498494933" fg:w="15045135"/><text x="93.3783%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15,045,135 samples, 0.07%)</title><rect x="93.1283%" y="405" width="0.0684%" height="15" fill="rgb(211,191,0)" fg:x="20498494933" fg:w="15045135"/><text x="93.3783%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (15,045,135 samples, 0.07%)</title><rect x="93.1283%" y="389" width="0.0684%" height="15" fill="rgb(253,117,3)" fg:x="20498494933" fg:w="15045135"/><text x="93.3783%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (15,045,135 samples, 0.07%)</title><rect x="93.1283%" y="373" width="0.0684%" height="15" fill="rgb(241,127,19)" fg:x="20498494933" fg:w="15045135"/><text x="93.3783%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (20,060,180 samples, 0.09%)</title><rect x="93.1966%" y="437" width="0.0911%" height="15" fill="rgb(218,103,12)" fg:x="20513540068" fg:w="20060180"/><text x="93.4466%" y="447.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (72,216,648 samples, 0.33%)</title><rect x="93.0827%" y="453" width="0.3281%" height="15" fill="rgb(236,214,43)" fg:x="20488464843" fg:w="72216648"/><text x="93.3327%" y="463.50"></text></g><g><title>_int_free (11,033,099 samples, 0.05%)</title><rect x="93.4245%" y="309" width="0.0501%" height="15" fill="rgb(244,144,19)" fg:x="20563690518" fg:w="11033099"/><text x="93.6745%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (19,057,171 samples, 0.09%)</title><rect x="93.4108%" y="373" width="0.0866%" height="15" fill="rgb(246,188,10)" fg:x="20560681491" fg:w="19057171"/><text x="93.6608%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19,057,171 samples, 0.09%)</title><rect x="93.4108%" y="357" width="0.0866%" height="15" fill="rgb(212,193,33)" fg:x="20560681491" fg:w="19057171"/><text x="93.6608%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (19,057,171 samples, 0.09%)</title><rect x="93.4108%" y="341" width="0.0866%" height="15" fill="rgb(241,51,29)" fg:x="20560681491" fg:w="19057171"/><text x="93.6608%" y="351.50"></text></g><g><title>__GI___libc_free (16,048,144 samples, 0.07%)</title><rect x="93.4245%" y="325" width="0.0729%" height="15" fill="rgb(211,58,19)" fg:x="20563690518" fg:w="16048144"/><text x="93.6745%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (20,060,180 samples, 0.09%)</title><rect x="93.4108%" y="437" width="0.0911%" height="15" fill="rgb(229,111,26)" fg:x="20560681491" fg:w="20060180"/><text x="93.6608%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (20,060,180 samples, 0.09%)</title><rect x="93.4108%" y="421" width="0.0911%" height="15" fill="rgb(213,115,40)" fg:x="20560681491" fg:w="20060180"/><text x="93.6608%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (20,060,180 samples, 0.09%)</title><rect x="93.4108%" y="405" width="0.0911%" height="15" fill="rgb(209,56,44)" fg:x="20560681491" fg:w="20060180"/><text x="93.6608%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20,060,180 samples, 0.09%)</title><rect x="93.4108%" y="389" width="0.0911%" height="15" fill="rgb(230,108,32)" fg:x="20560681491" fg:w="20060180"/><text x="93.6608%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some_and (3,009,027 samples, 0.01%)</title><rect x="93.5019%" y="437" width="0.0137%" height="15" fill="rgb(216,165,31)" fg:x="20580741671" fg:w="3009027"/><text x="93.7519%" y="447.50"></text></g><g><title>tcache_get (3,009,027 samples, 0.01%)</title><rect x="93.5384%" y="293" width="0.0137%" height="15" fill="rgb(218,122,21)" fg:x="20588765743" fg:w="3009027"/><text x="93.7884%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8,024,072 samples, 0.04%)</title><rect x="93.5384%" y="437" width="0.0365%" height="15" fill="rgb(223,224,47)" fg:x="20588765743" fg:w="8024072"/><text x="93.7884%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8,024,072 samples, 0.04%)</title><rect x="93.5384%" y="421" width="0.0365%" height="15" fill="rgb(238,102,44)" fg:x="20588765743" fg:w="8024072"/><text x="93.7884%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8,024,072 samples, 0.04%)</title><rect x="93.5384%" y="405" width="0.0365%" height="15" fill="rgb(236,46,40)" fg:x="20588765743" fg:w="8024072"/><text x="93.7884%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (8,024,072 samples, 0.04%)</title><rect x="93.5384%" y="389" width="0.0365%" height="15" fill="rgb(247,202,50)" fg:x="20588765743" fg:w="8024072"/><text x="93.7884%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (8,024,072 samples, 0.04%)</title><rect x="93.5384%" y="373" width="0.0365%" height="15" fill="rgb(209,99,20)" fg:x="20588765743" fg:w="8024072"/><text x="93.7884%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8,024,072 samples, 0.04%)</title><rect x="93.5384%" y="357" width="0.0365%" height="15" fill="rgb(252,27,34)" fg:x="20588765743" fg:w="8024072"/><text x="93.7884%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8,024,072 samples, 0.04%)</title><rect x="93.5384%" y="341" width="0.0365%" height="15" fill="rgb(215,206,23)" fg:x="20588765743" fg:w="8024072"/><text x="93.7884%" y="351.50"></text></g><g><title>alloc::alloc::alloc (8,024,072 samples, 0.04%)</title><rect x="93.5384%" y="325" width="0.0365%" height="15" fill="rgb(212,135,36)" fg:x="20588765743" fg:w="8024072"/><text x="93.7884%" y="335.50"></text></g><g><title>__GI___libc_malloc (8,024,072 samples, 0.04%)</title><rect x="93.5384%" y="309" width="0.0365%" height="15" fill="rgb(240,189,1)" fg:x="20588765743" fg:w="8024072"/><text x="93.7884%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (3,009,027 samples, 0.01%)</title><rect x="93.5748%" y="437" width="0.0137%" height="15" fill="rgb(242,56,20)" fg:x="20596789815" fg:w="3009027"/><text x="93.8248%" y="447.50"></text></g><g><title>tcache_get (3,009,027 samples, 0.01%)</title><rect x="93.6159%" y="261" width="0.0137%" height="15" fill="rgb(247,132,33)" fg:x="20605816896" fg:w="3009027"/><text x="93.8659%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10,030,090 samples, 0.05%)</title><rect x="93.6113%" y="325" width="0.0456%" height="15" fill="rgb(208,149,11)" fg:x="20604813887" fg:w="10030090"/><text x="93.8613%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10,030,090 samples, 0.05%)</title><rect x="93.6113%" y="309" width="0.0456%" height="15" fill="rgb(211,33,11)" fg:x="20604813887" fg:w="10030090"/><text x="93.8613%" y="319.50"></text></g><g><title>alloc::alloc::alloc (10,030,090 samples, 0.05%)</title><rect x="93.6113%" y="293" width="0.0456%" height="15" fill="rgb(221,29,38)" fg:x="20604813887" fg:w="10030090"/><text x="93.8613%" y="303.50"></text></g><g><title>__GI___libc_malloc (9,027,081 samples, 0.04%)</title><rect x="93.6159%" y="277" width="0.0410%" height="15" fill="rgb(206,182,49)" fg:x="20605816896" fg:w="9027081"/><text x="93.8659%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (12,036,108 samples, 0.05%)</title><rect x="93.6067%" y="405" width="0.0547%" height="15" fill="rgb(216,140,1)" fg:x="20603810878" fg:w="12036108"/><text x="93.8567%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12,036,108 samples, 0.05%)</title><rect x="93.6067%" y="389" width="0.0547%" height="15" fill="rgb(232,57,40)" fg:x="20603810878" fg:w="12036108"/><text x="93.8567%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12,036,108 samples, 0.05%)</title><rect x="93.6067%" y="373" width="0.0547%" height="15" fill="rgb(224,186,18)" fg:x="20603810878" fg:w="12036108"/><text x="93.8567%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (12,036,108 samples, 0.05%)</title><rect x="93.6067%" y="357" width="0.0547%" height="15" fill="rgb(215,121,11)" fg:x="20603810878" fg:w="12036108"/><text x="93.8567%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (12,036,108 samples, 0.05%)</title><rect x="93.6067%" y="341" width="0.0547%" height="15" fill="rgb(245,147,10)" fg:x="20603810878" fg:w="12036108"/><text x="93.8567%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3,009,027 samples, 0.01%)</title><rect x="93.6614%" y="341" width="0.0137%" height="15" fill="rgb(238,153,13)" fg:x="20615846986" fg:w="3009027"/><text x="93.9114%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,009,027 samples, 0.01%)</title><rect x="93.6614%" y="325" width="0.0137%" height="15" fill="rgb(233,108,0)" fg:x="20615846986" fg:w="3009027"/><text x="93.9114%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,009,027 samples, 0.01%)</title><rect x="93.6614%" y="309" width="0.0137%" height="15" fill="rgb(212,157,17)" fg:x="20615846986" fg:w="3009027"/><text x="93.9114%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,009,027 samples, 0.01%)</title><rect x="93.6614%" y="293" width="0.0137%" height="15" fill="rgb(225,213,38)" fg:x="20615846986" fg:w="3009027"/><text x="93.9114%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4,012,036 samples, 0.02%)</title><rect x="93.6614%" y="405" width="0.0182%" height="15" fill="rgb(248,16,11)" fg:x="20615846986" fg:w="4012036"/><text x="93.9114%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (4,012,036 samples, 0.02%)</title><rect x="93.6614%" y="389" width="0.0182%" height="15" fill="rgb(241,33,4)" fg:x="20615846986" fg:w="4012036"/><text x="93.9114%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4,012,036 samples, 0.02%)</title><rect x="93.6614%" y="373" width="0.0182%" height="15" fill="rgb(222,26,43)" fg:x="20615846986" fg:w="4012036"/><text x="93.9114%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (4,012,036 samples, 0.02%)</title><rect x="93.6614%" y="357" width="0.0182%" height="15" fill="rgb(243,29,36)" fg:x="20615846986" fg:w="4012036"/><text x="93.9114%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (32,096,288 samples, 0.15%)</title><rect x="93.5976%" y="437" width="0.1458%" height="15" fill="rgb(241,9,27)" fg:x="20601804860" fg:w="32096288"/><text x="93.8476%" y="447.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (32,096,288 samples, 0.15%)</title><rect x="93.5976%" y="421" width="0.1458%" height="15" fill="rgb(205,117,26)" fg:x="20601804860" fg:w="32096288"/><text x="93.8476%" y="431.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (84,252,756 samples, 0.38%)</title><rect x="93.4108%" y="453" width="0.3828%" height="15" fill="rgb(209,80,39)" fg:x="20560681491" fg:w="84252756"/><text x="93.6608%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7,021,063 samples, 0.03%)</title><rect x="93.8027%" y="357" width="0.0319%" height="15" fill="rgb(239,155,6)" fg:x="20646940265" fg:w="7021063"/><text x="94.0527%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7,021,063 samples, 0.03%)</title><rect x="93.8027%" y="341" width="0.0319%" height="15" fill="rgb(212,104,12)" fg:x="20646940265" fg:w="7021063"/><text x="94.0527%" y="351.50"></text></g><g><title>alloc::alloc::alloc (7,021,063 samples, 0.03%)</title><rect x="93.8027%" y="325" width="0.0319%" height="15" fill="rgb(234,204,3)" fg:x="20646940265" fg:w="7021063"/><text x="94.0527%" y="335.50"></text></g><g><title>__GI___libc_malloc (4,012,036 samples, 0.02%)</title><rect x="93.8164%" y="309" width="0.0182%" height="15" fill="rgb(251,218,7)" fg:x="20649949292" fg:w="4012036"/><text x="94.0664%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (9,027,081 samples, 0.04%)</title><rect x="93.8027%" y="437" width="0.0410%" height="15" fill="rgb(221,81,32)" fg:x="20646940265" fg:w="9027081"/><text x="94.0527%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9,027,081 samples, 0.04%)</title><rect x="93.8027%" y="421" width="0.0410%" height="15" fill="rgb(214,152,26)" fg:x="20646940265" fg:w="9027081"/><text x="94.0527%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9,027,081 samples, 0.04%)</title><rect x="93.8027%" y="405" width="0.0410%" height="15" fill="rgb(223,22,3)" fg:x="20646940265" fg:w="9027081"/><text x="94.0527%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (9,027,081 samples, 0.04%)</title><rect x="93.8027%" y="389" width="0.0410%" height="15" fill="rgb(207,174,7)" fg:x="20646940265" fg:w="9027081"/><text x="94.0527%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (9,027,081 samples, 0.04%)</title><rect x="93.8027%" y="373" width="0.0410%" height="15" fill="rgb(224,19,52)" fg:x="20646940265" fg:w="9027081"/><text x="94.0527%" y="383.50"></text></g><g><title>core::ptr::write (3,009,027 samples, 0.01%)</title><rect x="93.8437%" y="421" width="0.0137%" height="15" fill="rgb(228,24,14)" fg:x="20655967346" fg:w="3009027"/><text x="94.0937%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9,027,081 samples, 0.04%)</title><rect x="93.8437%" y="437" width="0.0410%" height="15" fill="rgb(230,153,43)" fg:x="20655967346" fg:w="9027081"/><text x="94.0937%" y="447.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (25,075,225 samples, 0.11%)</title><rect x="93.7936%" y="453" width="0.1139%" height="15" fill="rgb(231,106,12)" fg:x="20644934247" fg:w="25075225"/><text x="94.0436%" y="463.50"></text></g><g><title>chlang::board::Position::valid (3,009,027 samples, 0.01%)</title><rect x="93.9121%" y="437" width="0.0137%" height="15" fill="rgb(215,92,2)" fg:x="20671012481" fg:w="3009027"/><text x="94.1621%" y="447.50"></text></g><g><title>__rdl_dealloc (3,009,027 samples, 0.01%)</title><rect x="93.9303%" y="277" width="0.0137%" height="15" fill="rgb(249,143,25)" fg:x="20675024517" fg:w="3009027"/><text x="94.1803%" y="287.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,009,027 samples, 0.01%)</title><rect x="93.9303%" y="261" width="0.0137%" height="15" fill="rgb(252,7,35)" fg:x="20675024517" fg:w="3009027"/><text x="94.1803%" y="271.50"></text></g><g><title>_int_free (4,012,036 samples, 0.02%)</title><rect x="93.9440%" y="261" width="0.0182%" height="15" fill="rgb(216,69,40)" fg:x="20678033544" fg:w="4012036"/><text x="94.1940%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (9,027,081 samples, 0.04%)</title><rect x="93.9257%" y="421" width="0.0410%" height="15" fill="rgb(240,36,33)" fg:x="20674021508" fg:w="9027081"/><text x="94.1757%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,027,081 samples, 0.04%)</title><rect x="93.9257%" y="405" width="0.0410%" height="15" fill="rgb(231,128,14)" fg:x="20674021508" fg:w="9027081"/><text x="94.1757%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (9,027,081 samples, 0.04%)</title><rect x="93.9257%" y="389" width="0.0410%" height="15" fill="rgb(245,143,14)" fg:x="20674021508" fg:w="9027081"/><text x="94.1757%" y="399.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,027,081 samples, 0.04%)</title><rect x="93.9257%" y="373" width="0.0410%" height="15" fill="rgb(222,130,28)" fg:x="20674021508" fg:w="9027081"/><text x="94.1757%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (9,027,081 samples, 0.04%)</title><rect x="93.9257%" y="357" width="0.0410%" height="15" fill="rgb(212,10,48)" fg:x="20674021508" fg:w="9027081"/><text x="94.1757%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,027,081 samples, 0.04%)</title><rect x="93.9257%" y="341" width="0.0410%" height="15" fill="rgb(254,118,45)" fg:x="20674021508" fg:w="9027081"/><text x="94.1757%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (9,027,081 samples, 0.04%)</title><rect x="93.9257%" y="325" width="0.0410%" height="15" fill="rgb(228,6,45)" fg:x="20674021508" fg:w="9027081"/><text x="94.1757%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8,024,072 samples, 0.04%)</title><rect x="93.9303%" y="309" width="0.0365%" height="15" fill="rgb(241,18,35)" fg:x="20675024517" fg:w="8024072"/><text x="94.1803%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (8,024,072 samples, 0.04%)</title><rect x="93.9303%" y="293" width="0.0365%" height="15" fill="rgb(227,214,53)" fg:x="20675024517" fg:w="8024072"/><text x="94.1803%" y="303.50"></text></g><g><title>__GI___libc_free (5,015,045 samples, 0.02%)</title><rect x="93.9440%" y="277" width="0.0228%" height="15" fill="rgb(224,107,51)" fg:x="20678033544" fg:w="5015045"/><text x="94.1940%" y="287.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (6,018,054 samples, 0.03%)</title><rect x="93.9804%" y="421" width="0.0273%" height="15" fill="rgb(248,60,28)" fg:x="20686057616" fg:w="6018054"/><text x="94.2304%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (3,009,027 samples, 0.01%)</title><rect x="94.0077%" y="405" width="0.0137%" height="15" fill="rgb(249,101,23)" fg:x="20692075670" fg:w="3009027"/><text x="94.2577%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 0.01%)</title><rect x="94.0077%" y="389" width="0.0137%" height="15" fill="rgb(228,51,19)" fg:x="20692075670" fg:w="3009027"/><text x="94.2577%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 0.01%)</title><rect x="94.0077%" y="373" width="0.0137%" height="15" fill="rgb(213,20,6)" fg:x="20692075670" fg:w="3009027"/><text x="94.2577%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 0.01%)</title><rect x="94.0077%" y="357" width="0.0137%" height="15" fill="rgb(212,124,10)" fg:x="20692075670" fg:w="3009027"/><text x="94.2577%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,009,027 samples, 0.01%)</title><rect x="94.0077%" y="341" width="0.0137%" height="15" fill="rgb(248,3,40)" fg:x="20692075670" fg:w="3009027"/><text x="94.2577%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,009,027 samples, 0.01%)</title><rect x="94.0077%" y="325" width="0.0137%" height="15" fill="rgb(223,178,23)" fg:x="20692075670" fg:w="3009027"/><text x="94.2577%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (3,009,027 samples, 0.01%)</title><rect x="94.0077%" y="309" width="0.0137%" height="15" fill="rgb(240,132,45)" fg:x="20692075670" fg:w="3009027"/><text x="94.2577%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3,009,027 samples, 0.01%)</title><rect x="94.0214%" y="405" width="0.0137%" height="15" fill="rgb(245,164,36)" fg:x="20695084697" fg:w="3009027"/><text x="94.2714%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,009,027 samples, 0.01%)</title><rect x="94.0214%" y="389" width="0.0137%" height="15" fill="rgb(231,188,53)" fg:x="20695084697" fg:w="3009027"/><text x="94.2714%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,009,027 samples, 0.01%)</title><rect x="94.0214%" y="373" width="0.0137%" height="15" fill="rgb(237,198,39)" fg:x="20695084697" fg:w="3009027"/><text x="94.2714%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,009,027 samples, 0.01%)</title><rect x="94.0214%" y="357" width="0.0137%" height="15" fill="rgb(223,120,35)" fg:x="20695084697" fg:w="3009027"/><text x="94.2714%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,009,027 samples, 0.01%)</title><rect x="94.0214%" y="341" width="0.0137%" height="15" fill="rgb(253,107,49)" fg:x="20695084697" fg:w="3009027"/><text x="94.2714%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,009,027 samples, 0.01%)</title><rect x="94.0214%" y="325" width="0.0137%" height="15" fill="rgb(216,44,31)" fg:x="20695084697" fg:w="3009027"/><text x="94.2714%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,009,027 samples, 0.01%)</title><rect x="94.0214%" y="309" width="0.0137%" height="15" fill="rgb(253,87,21)" fg:x="20695084697" fg:w="3009027"/><text x="94.2714%" y="319.50"></text></g><g><title>alloc::alloc::alloc (3,009,027 samples, 0.01%)</title><rect x="94.0214%" y="293" width="0.0137%" height="15" fill="rgb(226,18,2)" fg:x="20695084697" fg:w="3009027"/><text x="94.2714%" y="303.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (10,030,090 samples, 0.05%)</title><rect x="94.0077%" y="421" width="0.0456%" height="15" fill="rgb(216,8,46)" fg:x="20692075670" fg:w="10030090"/><text x="94.2577%" y="431.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (3,009,027 samples, 0.01%)</title><rect x="94.0533%" y="421" width="0.0137%" height="15" fill="rgb(226,140,39)" fg:x="20702105760" fg:w="3009027"/><text x="94.3033%" y="431.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (5,015,045 samples, 0.02%)</title><rect x="94.0670%" y="421" width="0.0228%" height="15" fill="rgb(221,194,54)" fg:x="20705114787" fg:w="5015045"/><text x="94.3170%" y="431.50"></text></g><g><title>chlang::board::Position::valid (3,009,027 samples, 0.01%)</title><rect x="94.0898%" y="405" width="0.0137%" height="15" fill="rgb(213,92,11)" fg:x="20710129832" fg:w="3009027"/><text x="94.3398%" y="415.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (7,021,063 samples, 0.03%)</title><rect x="94.0898%" y="421" width="0.0319%" height="15" fill="rgb(229,162,46)" fg:x="20710129832" fg:w="7021063"/><text x="94.3398%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (7,021,063 samples, 0.03%)</title><rect x="94.1217%" y="421" width="0.0319%" height="15" fill="rgb(214,111,36)" fg:x="20717150895" fg:w="7021063"/><text x="94.3717%" y="431.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (7,021,063 samples, 0.03%)</title><rect x="94.1217%" y="405" width="0.0319%" height="15" fill="rgb(207,6,21)" fg:x="20717150895" fg:w="7021063"/><text x="94.3717%" y="415.50"></text></g><g><title>chlang::board::Board::attacked_by_color (53,159,477 samples, 0.24%)</title><rect x="93.9257%" y="437" width="0.2415%" height="15" fill="rgb(213,127,38)" fg:x="20674021508" fg:w="53159477"/><text x="94.1757%" y="447.50"></text></g><g><title>tcache_get (4,012,036 samples, 0.02%)</title><rect x="94.1763%" y="293" width="0.0182%" height="15" fill="rgb(238,118,32)" fg:x="20729187003" fg:w="4012036"/><text x="94.4263%" y="303.50"></text></g><g><title>__GI___libc_malloc (9,027,081 samples, 0.04%)</title><rect x="94.1763%" y="309" width="0.0410%" height="15" fill="rgb(240,139,39)" fg:x="20729187003" fg:w="9027081"/><text x="94.4263%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12,036,108 samples, 0.05%)</title><rect x="94.1672%" y="357" width="0.0547%" height="15" fill="rgb(235,10,37)" fg:x="20727180985" fg:w="12036108"/><text x="94.4172%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12,036,108 samples, 0.05%)</title><rect x="94.1672%" y="341" width="0.0547%" height="15" fill="rgb(249,171,38)" fg:x="20727180985" fg:w="12036108"/><text x="94.4172%" y="351.50"></text></g><g><title>alloc::alloc::alloc (12,036,108 samples, 0.05%)</title><rect x="94.1672%" y="325" width="0.0547%" height="15" fill="rgb(242,144,32)" fg:x="20727180985" fg:w="12036108"/><text x="94.4172%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (13,039,117 samples, 0.06%)</title><rect x="94.1672%" y="437" width="0.0592%" height="15" fill="rgb(217,117,21)" fg:x="20727180985" fg:w="13039117"/><text x="94.4172%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13,039,117 samples, 0.06%)</title><rect x="94.1672%" y="421" width="0.0592%" height="15" fill="rgb(249,87,1)" fg:x="20727180985" fg:w="13039117"/><text x="94.4172%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13,039,117 samples, 0.06%)</title><rect x="94.1672%" y="405" width="0.0592%" height="15" fill="rgb(248,196,48)" fg:x="20727180985" fg:w="13039117"/><text x="94.4172%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (13,039,117 samples, 0.06%)</title><rect x="94.1672%" y="389" width="0.0592%" height="15" fill="rgb(251,206,33)" fg:x="20727180985" fg:w="13039117"/><text x="94.4172%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (13,039,117 samples, 0.06%)</title><rect x="94.1672%" y="373" width="0.0592%" height="15" fill="rgb(232,141,28)" fg:x="20727180985" fg:w="13039117"/><text x="94.4172%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,012,036 samples, 0.02%)</title><rect x="94.2265%" y="437" width="0.0182%" height="15" fill="rgb(209,167,14)" fg:x="20740220102" fg:w="4012036"/><text x="94.4765%" y="447.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (79,237,711 samples, 0.36%)</title><rect x="93.9075%" y="453" width="0.3600%" height="15" fill="rgb(225,11,50)" fg:x="20670009472" fg:w="79237711"/><text x="94.1575%" y="463.50"></text></g><g><title>chlang::board::Position::valid (10,030,090 samples, 0.05%)</title><rect x="94.2675%" y="437" width="0.0456%" height="15" fill="rgb(209,50,20)" fg:x="20749247183" fg:w="10030090"/><text x="94.5175%" y="447.50"></text></g><g><title>__rust_alloc (3,009,027 samples, 0.01%)</title><rect x="94.3131%" y="309" width="0.0137%" height="15" fill="rgb(212,17,46)" fg:x="20759277273" fg:w="3009027"/><text x="94.5631%" y="319.50"></text></g><g><title>__GI___libc_malloc (7,021,063 samples, 0.03%)</title><rect x="94.3313%" y="309" width="0.0319%" height="15" fill="rgb(216,101,39)" fg:x="20763289309" fg:w="7021063"/><text x="94.5813%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12,036,108 samples, 0.05%)</title><rect x="94.3131%" y="357" width="0.0547%" height="15" fill="rgb(212,228,48)" fg:x="20759277273" fg:w="12036108"/><text x="94.5631%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12,036,108 samples, 0.05%)</title><rect x="94.3131%" y="341" width="0.0547%" height="15" fill="rgb(250,6,50)" fg:x="20759277273" fg:w="12036108"/><text x="94.5631%" y="351.50"></text></g><g><title>alloc::alloc::alloc (12,036,108 samples, 0.05%)</title><rect x="94.3131%" y="325" width="0.0547%" height="15" fill="rgb(250,160,48)" fg:x="20759277273" fg:w="12036108"/><text x="94.5631%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (13,039,117 samples, 0.06%)</title><rect x="94.3131%" y="437" width="0.0592%" height="15" fill="rgb(244,216,33)" fg:x="20759277273" fg:w="13039117"/><text x="94.5631%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13,039,117 samples, 0.06%)</title><rect x="94.3131%" y="421" width="0.0592%" height="15" fill="rgb(207,157,5)" fg:x="20759277273" fg:w="13039117"/><text x="94.5631%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13,039,117 samples, 0.06%)</title><rect x="94.3131%" y="405" width="0.0592%" height="15" fill="rgb(228,199,8)" fg:x="20759277273" fg:w="13039117"/><text x="94.5631%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (13,039,117 samples, 0.06%)</title><rect x="94.3131%" y="389" width="0.0592%" height="15" fill="rgb(227,80,20)" fg:x="20759277273" fg:w="13039117"/><text x="94.5631%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (13,039,117 samples, 0.06%)</title><rect x="94.3131%" y="373" width="0.0592%" height="15" fill="rgb(222,9,33)" fg:x="20759277273" fg:w="13039117"/><text x="94.5631%" y="383.50"></text></g><g><title>core::ptr::write (10,030,090 samples, 0.05%)</title><rect x="94.3723%" y="421" width="0.0456%" height="15" fill="rgb(239,44,28)" fg:x="20772316390" fg:w="10030090"/><text x="94.6223%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (38,114,342 samples, 0.17%)</title><rect x="94.3723%" y="437" width="0.1732%" height="15" fill="rgb(249,187,43)" fg:x="20772316390" fg:w="38114342"/><text x="94.6223%" y="447.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (90,270,810 samples, 0.41%)</title><rect x="94.2675%" y="453" width="0.4101%" height="15" fill="rgb(216,141,28)" fg:x="20749247183" fg:w="90270810"/><text x="94.5175%" y="463.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (3,009,027 samples, 0.01%)</title><rect x="94.6958%" y="293" width="0.0137%" height="15" fill="rgb(230,154,53)" fg:x="20843530029" fg:w="3009027"/><text x="94.9458%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3,009,027 samples, 0.01%)</title><rect x="94.6958%" y="277" width="0.0137%" height="15" fill="rgb(227,82,4)" fg:x="20843530029" fg:w="3009027"/><text x="94.9458%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (3,009,027 samples, 0.01%)</title><rect x="94.6958%" y="261" width="0.0137%" height="15" fill="rgb(220,107,16)" fg:x="20843530029" fg:w="3009027"/><text x="94.9458%" y="271.50"></text></g><g><title>core::ptr::write (3,009,027 samples, 0.01%)</title><rect x="94.6958%" y="245" width="0.0137%" height="15" fill="rgb(207,187,2)" fg:x="20843530029" fg:w="3009027"/><text x="94.9458%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5,015,045 samples, 0.02%)</title><rect x="94.6958%" y="357" width="0.0228%" height="15" fill="rgb(210,162,52)" fg:x="20843530029" fg:w="5015045"/><text x="94.9458%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,015,045 samples, 0.02%)</title><rect x="94.6958%" y="341" width="0.0228%" height="15" fill="rgb(217,216,49)" fg:x="20843530029" fg:w="5015045"/><text x="94.9458%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,015,045 samples, 0.02%)</title><rect x="94.6958%" y="325" width="0.0228%" height="15" fill="rgb(218,146,49)" fg:x="20843530029" fg:w="5015045"/><text x="94.9458%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,015,045 samples, 0.02%)</title><rect x="94.6958%" y="309" width="0.0228%" height="15" fill="rgb(216,55,40)" fg:x="20843530029" fg:w="5015045"/><text x="94.9458%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (6,018,054 samples, 0.03%)</title><rect x="94.6958%" y="421" width="0.0273%" height="15" fill="rgb(208,196,21)" fg:x="20843530029" fg:w="6018054"/><text x="94.9458%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (6,018,054 samples, 0.03%)</title><rect x="94.6958%" y="405" width="0.0273%" height="15" fill="rgb(242,117,42)" fg:x="20843530029" fg:w="6018054"/><text x="94.9458%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6,018,054 samples, 0.03%)</title><rect x="94.6958%" y="389" width="0.0273%" height="15" fill="rgb(210,11,23)" fg:x="20843530029" fg:w="6018054"/><text x="94.9458%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (6,018,054 samples, 0.03%)</title><rect x="94.6958%" y="373" width="0.0273%" height="15" fill="rgb(217,110,2)" fg:x="20843530029" fg:w="6018054"/><text x="94.9458%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (11,033,099 samples, 0.05%)</title><rect x="94.6776%" y="453" width="0.0501%" height="15" fill="rgb(229,77,54)" fg:x="20839517993" fg:w="11033099"/><text x="94.9276%" y="463.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (11,033,099 samples, 0.05%)</title><rect x="94.6776%" y="437" width="0.0501%" height="15" fill="rgb(218,53,16)" fg:x="20839517993" fg:w="11033099"/><text x="94.9276%" y="447.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (455,366,086 samples, 2.07%)</title><rect x="92.8776%" y="469" width="2.0688%" height="15" fill="rgb(215,38,13)" fg:x="20443329438" fg:w="455366086"/><text x="93.1276%" y="479.50">c..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16,048,144 samples, 0.07%)</title><rect x="94.9465%" y="469" width="0.0729%" height="15" fill="rgb(235,42,18)" fg:x="20898695524" fg:w="16048144"/><text x="95.1965%" y="479.50"></text></g><g><title>core::ptr::write (16,048,144 samples, 0.07%)</title><rect x="94.9465%" y="453" width="0.0729%" height="15" fill="rgb(219,66,54)" fg:x="20898695524" fg:w="16048144"/><text x="95.1965%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (10,030,090 samples, 0.05%)</title><rect x="95.0194%" y="469" width="0.0456%" height="15" fill="rgb(222,205,4)" fg:x="20914743668" fg:w="10030090"/><text x="95.2694%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (10,030,090 samples, 0.05%)</title><rect x="95.0194%" y="453" width="0.0456%" height="15" fill="rgb(227,213,46)" fg:x="20914743668" fg:w="10030090"/><text x="95.2694%" y="463.50"></text></g><g><title>chlang::board::Board::make_move (2,219,658,917 samples, 10.08%)</title><rect x="85.2996%" y="485" width="10.0843%" height="15" fill="rgb(250,145,42)" fg:x="18775325471" fg:w="2219658917"/><text x="85.5496%" y="495.50">chlang::board::..</text></g><g><title>__rdl_dealloc (4,012,036 samples, 0.02%)</title><rect x="95.3930%" y="325" width="0.0182%" height="15" fill="rgb(219,15,2)" fg:x="20996990406" fg:w="4012036"/><text x="95.6430%" y="335.50"></text></g><g><title>tcache_put (5,015,045 samples, 0.02%)</title><rect x="95.4113%" y="293" width="0.0228%" height="15" fill="rgb(231,181,52)" fg:x="21001002442" fg:w="5015045"/><text x="95.6613%" y="303.50"></text></g><g><title>_int_free (21,063,189 samples, 0.10%)</title><rect x="95.4113%" y="309" width="0.0957%" height="15" fill="rgb(235,1,42)" fg:x="21001002442" fg:w="21063189"/><text x="95.6613%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (29,087,261 samples, 0.13%)</title><rect x="95.3839%" y="469" width="0.1321%" height="15" fill="rgb(249,88,27)" fg:x="20994984388" fg:w="29087261"/><text x="95.6339%" y="479.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29,087,261 samples, 0.13%)</title><rect x="95.3839%" y="453" width="0.1321%" height="15" fill="rgb(235,145,16)" fg:x="20994984388" fg:w="29087261"/><text x="95.6339%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (29,087,261 samples, 0.13%)</title><rect x="95.3839%" y="437" width="0.1321%" height="15" fill="rgb(237,114,19)" fg:x="20994984388" fg:w="29087261"/><text x="95.6339%" y="447.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29,087,261 samples, 0.13%)</title><rect x="95.3839%" y="421" width="0.1321%" height="15" fill="rgb(238,51,50)" fg:x="20994984388" fg:w="29087261"/><text x="95.6339%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (29,087,261 samples, 0.13%)</title><rect x="95.3839%" y="405" width="0.1321%" height="15" fill="rgb(205,194,25)" fg:x="20994984388" fg:w="29087261"/><text x="95.6339%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29,087,261 samples, 0.13%)</title><rect x="95.3839%" y="389" width="0.1321%" height="15" fill="rgb(215,203,17)" fg:x="20994984388" fg:w="29087261"/><text x="95.6339%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (29,087,261 samples, 0.13%)</title><rect x="95.3839%" y="373" width="0.1321%" height="15" fill="rgb(233,112,49)" fg:x="20994984388" fg:w="29087261"/><text x="95.6339%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (29,087,261 samples, 0.13%)</title><rect x="95.3839%" y="357" width="0.1321%" height="15" fill="rgb(241,130,26)" fg:x="20994984388" fg:w="29087261"/><text x="95.6339%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (29,087,261 samples, 0.13%)</title><rect x="95.3839%" y="341" width="0.1321%" height="15" fill="rgb(252,223,19)" fg:x="20994984388" fg:w="29087261"/><text x="95.6339%" y="351.50"></text></g><g><title>__GI___libc_free (23,069,207 samples, 0.10%)</title><rect x="95.4113%" y="325" width="0.1048%" height="15" fill="rgb(211,95,25)" fg:x="21001002442" fg:w="23069207"/><text x="95.6613%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (63,189,567 samples, 0.29%)</title><rect x="95.5206%" y="469" width="0.2871%" height="15" fill="rgb(251,182,27)" fg:x="21025074658" fg:w="63189567"/><text x="95.7706%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (5,015,045 samples, 0.02%)</title><rect x="95.8077%" y="453" width="0.0228%" height="15" fill="rgb(238,24,4)" fg:x="21088264225" fg:w="5015045"/><text x="96.0577%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (5,015,045 samples, 0.02%)</title><rect x="95.8077%" y="437" width="0.0228%" height="15" fill="rgb(224,220,25)" fg:x="21088264225" fg:w="5015045"/><text x="96.0577%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (5,015,045 samples, 0.02%)</title><rect x="95.8077%" y="421" width="0.0228%" height="15" fill="rgb(239,133,26)" fg:x="21088264225" fg:w="5015045"/><text x="96.0577%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,015,045 samples, 0.02%)</title><rect x="95.8077%" y="405" width="0.0228%" height="15" fill="rgb(211,94,48)" fg:x="21088264225" fg:w="5015045"/><text x="96.0577%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (5,015,045 samples, 0.02%)</title><rect x="95.8077%" y="389" width="0.0228%" height="15" fill="rgb(239,87,6)" fg:x="21088264225" fg:w="5015045"/><text x="96.0577%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5,015,045 samples, 0.02%)</title><rect x="95.8077%" y="373" width="0.0228%" height="15" fill="rgb(227,62,0)" fg:x="21088264225" fg:w="5015045"/><text x="96.0577%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (5,015,045 samples, 0.02%)</title><rect x="95.8077%" y="357" width="0.0228%" height="15" fill="rgb(211,226,4)" fg:x="21088264225" fg:w="5015045"/><text x="96.0577%" y="367.50"></text></g><g><title>__GI___libc_free (4,012,036 samples, 0.02%)</title><rect x="95.8123%" y="341" width="0.0182%" height="15" fill="rgb(253,38,52)" fg:x="21089267234" fg:w="4012036"/><text x="96.0623%" y="351.50"></text></g><g><title>_int_free (4,012,036 samples, 0.02%)</title><rect x="95.8123%" y="325" width="0.0182%" height="15" fill="rgb(229,126,40)" fg:x="21089267234" fg:w="4012036"/><text x="96.0623%" y="335.50"></text></g><g><title>chlang::board::Board::piece_type (8,024,072 samples, 0.04%)</title><rect x="95.8305%" y="453" width="0.0365%" height="15" fill="rgb(229,165,44)" fg:x="21093279270" fg:w="8024072"/><text x="96.0805%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7,021,063 samples, 0.03%)</title><rect x="95.8761%" y="357" width="0.0319%" height="15" fill="rgb(247,95,47)" fg:x="21103309360" fg:w="7021063"/><text x="96.1261%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7,021,063 samples, 0.03%)</title><rect x="95.8761%" y="341" width="0.0319%" height="15" fill="rgb(216,140,30)" fg:x="21103309360" fg:w="7021063"/><text x="96.1261%" y="351.50"></text></g><g><title>alloc::alloc::alloc (7,021,063 samples, 0.03%)</title><rect x="95.8761%" y="325" width="0.0319%" height="15" fill="rgb(246,214,8)" fg:x="21103309360" fg:w="7021063"/><text x="96.1261%" y="335.50"></text></g><g><title>__GI___libc_malloc (5,015,045 samples, 0.02%)</title><rect x="95.8852%" y="309" width="0.0228%" height="15" fill="rgb(227,224,15)" fg:x="21105315378" fg:w="5015045"/><text x="96.1352%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8,024,072 samples, 0.04%)</title><rect x="95.8761%" y="437" width="0.0365%" height="15" fill="rgb(233,175,4)" fg:x="21103309360" fg:w="8024072"/><text x="96.1261%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8,024,072 samples, 0.04%)</title><rect x="95.8761%" y="421" width="0.0365%" height="15" fill="rgb(221,66,45)" fg:x="21103309360" fg:w="8024072"/><text x="96.1261%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8,024,072 samples, 0.04%)</title><rect x="95.8761%" y="405" width="0.0365%" height="15" fill="rgb(221,178,18)" fg:x="21103309360" fg:w="8024072"/><text x="96.1261%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (8,024,072 samples, 0.04%)</title><rect x="95.8761%" y="389" width="0.0365%" height="15" fill="rgb(213,81,29)" fg:x="21103309360" fg:w="8024072"/><text x="96.1261%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (8,024,072 samples, 0.04%)</title><rect x="95.8761%" y="373" width="0.0365%" height="15" fill="rgb(220,89,49)" fg:x="21103309360" fg:w="8024072"/><text x="96.1261%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,012,036 samples, 0.02%)</title><rect x="95.9125%" y="437" width="0.0182%" height="15" fill="rgb(227,60,33)" fg:x="21111333432" fg:w="4012036"/><text x="96.1625%" y="447.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (19,057,171 samples, 0.09%)</title><rect x="95.8669%" y="453" width="0.0866%" height="15" fill="rgb(205,113,12)" fg:x="21101303342" fg:w="19057171"/><text x="96.1169%" y="463.50"></text></g><g><title>_int_free (8,024,072 samples, 0.04%)</title><rect x="95.9763%" y="309" width="0.0365%" height="15" fill="rgb(211,32,1)" fg:x="21125375558" fg:w="8024072"/><text x="96.2263%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (15,045,135 samples, 0.07%)</title><rect x="95.9535%" y="373" width="0.0684%" height="15" fill="rgb(246,2,12)" fg:x="21120360513" fg:w="15045135"/><text x="96.2035%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14,042,126 samples, 0.06%)</title><rect x="95.9581%" y="357" width="0.0638%" height="15" fill="rgb(243,37,27)" fg:x="21121363522" fg:w="14042126"/><text x="96.2081%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (14,042,126 samples, 0.06%)</title><rect x="95.9581%" y="341" width="0.0638%" height="15" fill="rgb(248,211,31)" fg:x="21121363522" fg:w="14042126"/><text x="96.2081%" y="351.50"></text></g><g><title>__GI___libc_free (10,030,090 samples, 0.05%)</title><rect x="95.9763%" y="325" width="0.0456%" height="15" fill="rgb(242,146,47)" fg:x="21125375558" fg:w="10030090"/><text x="96.2263%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (16,048,144 samples, 0.07%)</title><rect x="95.9535%" y="437" width="0.0729%" height="15" fill="rgb(206,70,20)" fg:x="21120360513" fg:w="16048144"/><text x="96.2035%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (16,048,144 samples, 0.07%)</title><rect x="95.9535%" y="421" width="0.0729%" height="15" fill="rgb(215,10,51)" fg:x="21120360513" fg:w="16048144"/><text x="96.2035%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (16,048,144 samples, 0.07%)</title><rect x="95.9535%" y="405" width="0.0729%" height="15" fill="rgb(243,178,53)" fg:x="21120360513" fg:w="16048144"/><text x="96.2035%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16,048,144 samples, 0.07%)</title><rect x="95.9535%" y="389" width="0.0729%" height="15" fill="rgb(233,221,20)" fg:x="21120360513" fg:w="16048144"/><text x="96.2035%" y="399.50"></text></g><g><title>tcache_get (3,009,027 samples, 0.01%)</title><rect x="96.0538%" y="293" width="0.0137%" height="15" fill="rgb(218,95,35)" fg:x="21142426711" fg:w="3009027"/><text x="96.3038%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (9,027,081 samples, 0.04%)</title><rect x="96.0538%" y="437" width="0.0410%" height="15" fill="rgb(229,13,5)" fg:x="21142426711" fg:w="9027081"/><text x="96.3038%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9,027,081 samples, 0.04%)</title><rect x="96.0538%" y="421" width="0.0410%" height="15" fill="rgb(252,164,30)" fg:x="21142426711" fg:w="9027081"/><text x="96.3038%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9,027,081 samples, 0.04%)</title><rect x="96.0538%" y="405" width="0.0410%" height="15" fill="rgb(232,68,36)" fg:x="21142426711" fg:w="9027081"/><text x="96.3038%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (9,027,081 samples, 0.04%)</title><rect x="96.0538%" y="389" width="0.0410%" height="15" fill="rgb(219,59,54)" fg:x="21142426711" fg:w="9027081"/><text x="96.3038%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (9,027,081 samples, 0.04%)</title><rect x="96.0538%" y="373" width="0.0410%" height="15" fill="rgb(250,92,33)" fg:x="21142426711" fg:w="9027081"/><text x="96.3038%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9,027,081 samples, 0.04%)</title><rect x="96.0538%" y="357" width="0.0410%" height="15" fill="rgb(229,162,54)" fg:x="21142426711" fg:w="9027081"/><text x="96.3038%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9,027,081 samples, 0.04%)</title><rect x="96.0538%" y="341" width="0.0410%" height="15" fill="rgb(244,114,52)" fg:x="21142426711" fg:w="9027081"/><text x="96.3038%" y="351.50"></text></g><g><title>alloc::alloc::alloc (9,027,081 samples, 0.04%)</title><rect x="96.0538%" y="325" width="0.0410%" height="15" fill="rgb(212,211,43)" fg:x="21142426711" fg:w="9027081"/><text x="96.3038%" y="335.50"></text></g><g><title>__GI___libc_malloc (9,027,081 samples, 0.04%)</title><rect x="96.0538%" y="309" width="0.0410%" height="15" fill="rgb(226,147,8)" fg:x="21142426711" fg:w="9027081"/><text x="96.3038%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (3,009,027 samples, 0.01%)</title><rect x="96.0948%" y="405" width="0.0137%" height="15" fill="rgb(226,23,13)" fg:x="21151453792" fg:w="3009027"/><text x="96.3448%" y="415.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (3,009,027 samples, 0.01%)</title><rect x="96.0948%" y="389" width="0.0137%" height="15" fill="rgb(240,63,4)" fg:x="21151453792" fg:w="3009027"/><text x="96.3448%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,009,027 samples, 0.01%)</title><rect x="96.0948%" y="373" width="0.0137%" height="15" fill="rgb(221,1,32)" fg:x="21151453792" fg:w="3009027"/><text x="96.3448%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,009,027 samples, 0.01%)</title><rect x="96.0948%" y="357" width="0.0137%" height="15" fill="rgb(242,117,10)" fg:x="21151453792" fg:w="3009027"/><text x="96.3448%" y="367.50"></text></g><g><title>alloc::raw_vec::layout_array (3,009,027 samples, 0.01%)</title><rect x="96.1085%" y="325" width="0.0137%" height="15" fill="rgb(249,172,44)" fg:x="21154462819" fg:w="3009027"/><text x="96.3585%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::repeat (3,009,027 samples, 0.01%)</title><rect x="96.1085%" y="309" width="0.0137%" height="15" fill="rgb(244,46,45)" fg:x="21154462819" fg:w="3009027"/><text x="96.3585%" y="319.50"></text></g><g><title>tcache_get (4,012,036 samples, 0.02%)</title><rect x="96.1221%" y="261" width="0.0182%" height="15" fill="rgb(206,43,17)" fg:x="21157471846" fg:w="4012036"/><text x="96.3721%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (12,036,108 samples, 0.05%)</title><rect x="96.1085%" y="405" width="0.0547%" height="15" fill="rgb(239,218,39)" fg:x="21154462819" fg:w="12036108"/><text x="96.3585%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12,036,108 samples, 0.05%)</title><rect x="96.1085%" y="389" width="0.0547%" height="15" fill="rgb(208,169,54)" fg:x="21154462819" fg:w="12036108"/><text x="96.3585%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12,036,108 samples, 0.05%)</title><rect x="96.1085%" y="373" width="0.0547%" height="15" fill="rgb(247,25,42)" fg:x="21154462819" fg:w="12036108"/><text x="96.3585%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (12,036,108 samples, 0.05%)</title><rect x="96.1085%" y="357" width="0.0547%" height="15" fill="rgb(226,23,31)" fg:x="21154462819" fg:w="12036108"/><text x="96.3585%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (12,036,108 samples, 0.05%)</title><rect x="96.1085%" y="341" width="0.0547%" height="15" fill="rgb(247,16,28)" fg:x="21154462819" fg:w="12036108"/><text x="96.3585%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9,027,081 samples, 0.04%)</title><rect x="96.1221%" y="325" width="0.0410%" height="15" fill="rgb(231,147,38)" fg:x="21157471846" fg:w="9027081"/><text x="96.3721%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9,027,081 samples, 0.04%)</title><rect x="96.1221%" y="309" width="0.0410%" height="15" fill="rgb(253,81,48)" fg:x="21157471846" fg:w="9027081"/><text x="96.3721%" y="319.50"></text></g><g><title>alloc::alloc::alloc (9,027,081 samples, 0.04%)</title><rect x="96.1221%" y="293" width="0.0410%" height="15" fill="rgb(249,222,43)" fg:x="21157471846" fg:w="9027081"/><text x="96.3721%" y="303.50"></text></g><g><title>__GI___libc_malloc (9,027,081 samples, 0.04%)</title><rect x="96.1221%" y="277" width="0.0410%" height="15" fill="rgb(221,3,27)" fg:x="21157471846" fg:w="9027081"/><text x="96.3721%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (20,060,180 samples, 0.09%)</title><rect x="96.0948%" y="437" width="0.0911%" height="15" fill="rgb(228,180,5)" fg:x="21151453792" fg:w="20060180"/><text x="96.3448%" y="447.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (20,060,180 samples, 0.09%)</title><rect x="96.0948%" y="421" width="0.0911%" height="15" fill="rgb(227,131,42)" fg:x="21151453792" fg:w="20060180"/><text x="96.3448%" y="431.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (58,174,522 samples, 0.26%)</title><rect x="95.9535%" y="453" width="0.2643%" height="15" fill="rgb(212,3,39)" fg:x="21120360513" fg:w="58174522"/><text x="96.2035%" y="463.50"></text></g><g><title>chlang::board::Board::attacked_by_color (3,009,027 samples, 0.01%)</title><rect x="96.2269%" y="437" width="0.0137%" height="15" fill="rgb(226,45,5)" fg:x="21180541053" fg:w="3009027"/><text x="96.4769%" y="447.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (4,012,036 samples, 0.02%)</title><rect x="96.2269%" y="453" width="0.0182%" height="15" fill="rgb(215,167,45)" fg:x="21180541053" fg:w="4012036"/><text x="96.4769%" y="463.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (10,030,090 samples, 0.05%)</title><rect x="96.2452%" y="453" width="0.0456%" height="15" fill="rgb(250,218,53)" fg:x="21184553089" fg:w="10030090"/><text x="96.4952%" y="463.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (126,379,134 samples, 0.57%)</title><rect x="95.8077%" y="469" width="0.5742%" height="15" fill="rgb(207,140,0)" fg:x="21088264225" fg:w="126379134"/><text x="96.0577%" y="479.50"></text></g><g><title>_int_malloc (7,021,063 samples, 0.03%)</title><rect x="96.3864%" y="325" width="0.0319%" height="15" fill="rgb(238,133,51)" fg:x="21215646368" fg:w="7021063"/><text x="96.6364%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10,030,090 samples, 0.05%)</title><rect x="96.3819%" y="389" width="0.0456%" height="15" fill="rgb(218,203,53)" fg:x="21214643359" fg:w="10030090"/><text x="96.6319%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10,030,090 samples, 0.05%)</title><rect x="96.3819%" y="373" width="0.0456%" height="15" fill="rgb(226,184,25)" fg:x="21214643359" fg:w="10030090"/><text x="96.6319%" y="383.50"></text></g><g><title>alloc::alloc::alloc (10,030,090 samples, 0.05%)</title><rect x="96.3819%" y="357" width="0.0456%" height="15" fill="rgb(231,121,21)" fg:x="21214643359" fg:w="10030090"/><text x="96.6319%" y="367.50"></text></g><g><title>__GI___libc_malloc (9,027,081 samples, 0.04%)</title><rect x="96.3864%" y="341" width="0.0410%" height="15" fill="rgb(251,14,34)" fg:x="21215646368" fg:w="9027081"/><text x="96.6364%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (12,036,108 samples, 0.05%)</title><rect x="96.3819%" y="469" width="0.0547%" height="15" fill="rgb(249,193,11)" fg:x="21214643359" fg:w="12036108"/><text x="96.6319%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12,036,108 samples, 0.05%)</title><rect x="96.3819%" y="453" width="0.0547%" height="15" fill="rgb(220,172,37)" fg:x="21214643359" fg:w="12036108"/><text x="96.6319%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12,036,108 samples, 0.05%)</title><rect x="96.3819%" y="437" width="0.0547%" height="15" fill="rgb(231,229,43)" fg:x="21214643359" fg:w="12036108"/><text x="96.6319%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (12,036,108 samples, 0.05%)</title><rect x="96.3819%" y="421" width="0.0547%" height="15" fill="rgb(250,161,5)" fg:x="21214643359" fg:w="12036108"/><text x="96.6319%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (12,036,108 samples, 0.05%)</title><rect x="96.3819%" y="405" width="0.0547%" height="15" fill="rgb(218,225,18)" fg:x="21214643359" fg:w="12036108"/><text x="96.6319%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (11,033,099 samples, 0.05%)</title><rect x="96.4365%" y="469" width="0.0501%" height="15" fill="rgb(245,45,42)" fg:x="21226679467" fg:w="11033099"/><text x="96.6865%" y="479.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves (261,785,349 samples, 1.19%)</title><rect x="95.3839%" y="485" width="1.1893%" height="15" fill="rgb(211,115,1)" fg:x="20994984388" fg:w="261785349"/><text x="95.6339%" y="495.50"></text></g><g><title>_int_malloc (15,045,135 samples, 0.07%)</title><rect x="96.5778%" y="341" width="0.0684%" height="15" fill="rgb(248,133,52)" fg:x="21257772746" fg:w="15045135"/><text x="96.8278%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (17,051,153 samples, 0.08%)</title><rect x="96.5733%" y="485" width="0.0775%" height="15" fill="rgb(238,100,21)" fg:x="21256769737" fg:w="17051153"/><text x="96.8233%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17,051,153 samples, 0.08%)</title><rect x="96.5733%" y="469" width="0.0775%" height="15" fill="rgb(247,144,11)" fg:x="21256769737" fg:w="17051153"/><text x="96.8233%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17,051,153 samples, 0.08%)</title><rect x="96.5733%" y="453" width="0.0775%" height="15" fill="rgb(206,164,16)" fg:x="21256769737" fg:w="17051153"/><text x="96.8233%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (17,051,153 samples, 0.08%)</title><rect x="96.5733%" y="437" width="0.0775%" height="15" fill="rgb(222,34,3)" fg:x="21256769737" fg:w="17051153"/><text x="96.8233%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (17,051,153 samples, 0.08%)</title><rect x="96.5733%" y="421" width="0.0775%" height="15" fill="rgb(248,82,4)" fg:x="21256769737" fg:w="17051153"/><text x="96.8233%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17,051,153 samples, 0.08%)</title><rect x="96.5733%" y="405" width="0.0775%" height="15" fill="rgb(228,81,46)" fg:x="21256769737" fg:w="17051153"/><text x="96.8233%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17,051,153 samples, 0.08%)</title><rect x="96.5733%" y="389" width="0.0775%" height="15" fill="rgb(227,67,47)" fg:x="21256769737" fg:w="17051153"/><text x="96.8233%" y="399.50"></text></g><g><title>alloc::alloc::alloc (17,051,153 samples, 0.08%)</title><rect x="96.5733%" y="373" width="0.0775%" height="15" fill="rgb(215,93,53)" fg:x="21256769737" fg:w="17051153"/><text x="96.8233%" y="383.50"></text></g><g><title>__GI___libc_malloc (16,048,144 samples, 0.07%)</title><rect x="96.5778%" y="357" width="0.0729%" height="15" fill="rgb(248,194,39)" fg:x="21257772746" fg:w="16048144"/><text x="96.8278%" y="367.50"></text></g><g><title>chlang::board::Board::get_valid_moves (2,552,657,905 samples, 11.60%)</title><rect x="85.0854%" y="501" width="11.5972%" height="15" fill="rgb(215,5,19)" fg:x="18728184048" fg:w="2552657905"/><text x="85.3354%" y="511.50">chlang::board::Bo..</text></g><g><title>chlang::board::Board::get_game_state (4,465,396,068 samples, 20.29%)</title><rect x="76.4046%" y="517" width="20.2871%" height="15" fill="rgb(226,215,51)" fg:x="16817451903" fg:w="4465396068"/><text x="76.6546%" y="527.50">chlang::board::Board::get_game_s..</text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (3,009,027 samples, 0.01%)</title><rect x="96.6917%" y="501" width="0.0137%" height="15" fill="rgb(225,56,26)" fg:x="21282847971" fg:w="3009027"/><text x="96.9417%" y="511.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (16,048,144 samples, 0.07%)</title><rect x="96.7054%" y="501" width="0.0729%" height="15" fill="rgb(222,75,29)" fg:x="21285856998" fg:w="16048144"/><text x="96.9554%" y="511.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (16,048,144 samples, 0.07%)</title><rect x="96.7054%" y="485" width="0.0729%" height="15" fill="rgb(236,139,6)" fg:x="21285856998" fg:w="16048144"/><text x="96.9554%" y="495.50"></text></g><g><title>&lt;chlang::evaluators::positional_evaluator::PositionalEvaluator as chlang::tree_evaluator::Eval&gt;::evaluate (44,132,396 samples, 0.20%)</title><rect x="96.6917%" y="517" width="0.2005%" height="15" fill="rgb(223,137,36)" fg:x="21282847971" fg:w="44132396"/><text x="96.9417%" y="527.50"></text></g><g><title>chlang::tree_evaluator::eval (21,291,875,052 samples, 96.73%)</title><rect x="0.1914%" y="533" width="96.7327%" height="15" fill="rgb(226,99,2)" fg:x="42126378" fg:w="21291875052"/><text x="0.4414%" y="543.50">chlang::tree_evaluator::eval</text></g><g><title>chlang::board::Board::piece_type (3,009,027 samples, 0.01%)</title><rect x="96.9378%" y="517" width="0.0137%" height="15" fill="rgb(206,133,23)" fg:x="21337010457" fg:w="3009027"/><text x="97.1878%" y="527.50"></text></g><g><title>__rdl_dealloc (3,009,027 samples, 0.01%)</title><rect x="96.9651%" y="341" width="0.0137%" height="15" fill="rgb(243,173,15)" fg:x="21343028511" fg:w="3009027"/><text x="97.2151%" y="351.50"></text></g><g><title>_int_free (5,015,045 samples, 0.02%)</title><rect x="96.9788%" y="325" width="0.0228%" height="15" fill="rgb(228,69,28)" fg:x="21346037538" fg:w="5015045"/><text x="97.2288%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (14,042,126 samples, 0.06%)</title><rect x="96.9560%" y="485" width="0.0638%" height="15" fill="rgb(212,51,22)" fg:x="21341022493" fg:w="14042126"/><text x="97.2060%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14,042,126 samples, 0.06%)</title><rect x="96.9560%" y="469" width="0.0638%" height="15" fill="rgb(227,113,0)" fg:x="21341022493" fg:w="14042126"/><text x="97.2060%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (14,042,126 samples, 0.06%)</title><rect x="96.9560%" y="453" width="0.0638%" height="15" fill="rgb(252,84,27)" fg:x="21341022493" fg:w="14042126"/><text x="97.2060%" y="463.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14,042,126 samples, 0.06%)</title><rect x="96.9560%" y="437" width="0.0638%" height="15" fill="rgb(223,145,39)" fg:x="21341022493" fg:w="14042126"/><text x="97.2060%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (14,042,126 samples, 0.06%)</title><rect x="96.9560%" y="421" width="0.0638%" height="15" fill="rgb(239,219,30)" fg:x="21341022493" fg:w="14042126"/><text x="97.2060%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14,042,126 samples, 0.06%)</title><rect x="96.9560%" y="405" width="0.0638%" height="15" fill="rgb(224,196,39)" fg:x="21341022493" fg:w="14042126"/><text x="97.2060%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (14,042,126 samples, 0.06%)</title><rect x="96.9560%" y="389" width="0.0638%" height="15" fill="rgb(205,35,43)" fg:x="21341022493" fg:w="14042126"/><text x="97.2060%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14,042,126 samples, 0.06%)</title><rect x="96.9560%" y="373" width="0.0638%" height="15" fill="rgb(228,201,21)" fg:x="21341022493" fg:w="14042126"/><text x="97.2060%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (14,042,126 samples, 0.06%)</title><rect x="96.9560%" y="357" width="0.0638%" height="15" fill="rgb(237,118,16)" fg:x="21341022493" fg:w="14042126"/><text x="97.2060%" y="367.50"></text></g><g><title>__GI___libc_free (9,027,081 samples, 0.04%)</title><rect x="96.9788%" y="341" width="0.0410%" height="15" fill="rgb(241,17,19)" fg:x="21346037538" fg:w="9027081"/><text x="97.2288%" y="351.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (4,012,036 samples, 0.02%)</title><rect x="97.0380%" y="485" width="0.0182%" height="15" fill="rgb(214,10,25)" fg:x="21359076655" fg:w="4012036"/><text x="97.2880%" y="495.50"></text></g><g><title>_int_free (3,009,027 samples, 0.01%)</title><rect x="97.0563%" y="341" width="0.0137%" height="15" fill="rgb(238,37,29)" fg:x="21363088691" fg:w="3009027"/><text x="97.3063%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (4,012,036 samples, 0.02%)</title><rect x="97.0563%" y="469" width="0.0182%" height="15" fill="rgb(253,83,25)" fg:x="21363088691" fg:w="4012036"/><text x="97.3063%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (4,012,036 samples, 0.02%)</title><rect x="97.0563%" y="453" width="0.0182%" height="15" fill="rgb(234,192,12)" fg:x="21363088691" fg:w="4012036"/><text x="97.3063%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (4,012,036 samples, 0.02%)</title><rect x="97.0563%" y="437" width="0.0182%" height="15" fill="rgb(241,216,45)" fg:x="21363088691" fg:w="4012036"/><text x="97.3063%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,012,036 samples, 0.02%)</title><rect x="97.0563%" y="421" width="0.0182%" height="15" fill="rgb(242,22,33)" fg:x="21363088691" fg:w="4012036"/><text x="97.3063%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4,012,036 samples, 0.02%)</title><rect x="97.0563%" y="405" width="0.0182%" height="15" fill="rgb(231,105,49)" fg:x="21363088691" fg:w="4012036"/><text x="97.3063%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4,012,036 samples, 0.02%)</title><rect x="97.0563%" y="389" width="0.0182%" height="15" fill="rgb(218,204,15)" fg:x="21363088691" fg:w="4012036"/><text x="97.3063%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (4,012,036 samples, 0.02%)</title><rect x="97.0563%" y="373" width="0.0182%" height="15" fill="rgb(235,138,41)" fg:x="21363088691" fg:w="4012036"/><text x="97.3063%" y="383.50"></text></g><g><title>__GI___libc_free (4,012,036 samples, 0.02%)</title><rect x="97.0563%" y="357" width="0.0182%" height="15" fill="rgb(246,0,9)" fg:x="21363088691" fg:w="4012036"/><text x="97.3063%" y="367.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (12,036,108 samples, 0.05%)</title><rect x="97.0563%" y="485" width="0.0547%" height="15" fill="rgb(210,74,4)" fg:x="21363088691" fg:w="12036108"/><text x="97.3063%" y="495.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (4,012,036 samples, 0.02%)</title><rect x="97.1110%" y="485" width="0.0182%" height="15" fill="rgb(250,60,41)" fg:x="21375124799" fg:w="4012036"/><text x="97.3610%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3,009,027 samples, 0.01%)</title><rect x="97.1337%" y="469" width="0.0137%" height="15" fill="rgb(220,115,12)" fg:x="21380139844" fg:w="3009027"/><text x="97.3837%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,009,027 samples, 0.01%)</title><rect x="97.1337%" y="453" width="0.0137%" height="15" fill="rgb(237,100,13)" fg:x="21380139844" fg:w="3009027"/><text x="97.3837%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,009,027 samples, 0.01%)</title><rect x="97.1337%" y="437" width="0.0137%" height="15" fill="rgb(213,55,26)" fg:x="21380139844" fg:w="3009027"/><text x="97.3837%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,009,027 samples, 0.01%)</title><rect x="97.1337%" y="421" width="0.0137%" height="15" fill="rgb(216,17,4)" fg:x="21380139844" fg:w="3009027"/><text x="97.3837%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,009,027 samples, 0.01%)</title><rect x="97.1337%" y="405" width="0.0137%" height="15" fill="rgb(220,153,47)" fg:x="21380139844" fg:w="3009027"/><text x="97.3837%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,009,027 samples, 0.01%)</title><rect x="97.1337%" y="389" width="0.0137%" height="15" fill="rgb(215,131,9)" fg:x="21380139844" fg:w="3009027"/><text x="97.3837%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,009,027 samples, 0.01%)</title><rect x="97.1337%" y="373" width="0.0137%" height="15" fill="rgb(233,46,42)" fg:x="21380139844" fg:w="3009027"/><text x="97.3837%" y="383.50"></text></g><g><title>alloc::alloc::alloc (3,009,027 samples, 0.01%)</title><rect x="97.1337%" y="357" width="0.0137%" height="15" fill="rgb(226,86,7)" fg:x="21380139844" fg:w="3009027"/><text x="97.3837%" y="367.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (6,018,054 samples, 0.03%)</title><rect x="97.1292%" y="485" width="0.0273%" height="15" fill="rgb(239,226,21)" fg:x="21379136835" fg:w="6018054"/><text x="97.3792%" y="495.50"></text></g><g><title>chlang::board::Position::valid (3,009,027 samples, 0.01%)</title><rect x="97.1565%" y="469" width="0.0137%" height="15" fill="rgb(244,137,22)" fg:x="21385154889" fg:w="3009027"/><text x="97.4065%" y="479.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (5,015,045 samples, 0.02%)</title><rect x="97.1565%" y="485" width="0.0228%" height="15" fill="rgb(211,139,35)" fg:x="21385154889" fg:w="5015045"/><text x="97.4065%" y="495.50"></text></g><g><title>chlang::board::Board::is_valid (53,159,477 samples, 0.24%)</title><rect x="96.9560%" y="517" width="0.2415%" height="15" fill="rgb(214,62,50)" fg:x="21341022493" fg:w="53159477"/><text x="97.2060%" y="527.50"></text></g><g><title>chlang::board::Board::attacked_by_color (53,159,477 samples, 0.24%)</title><rect x="96.9560%" y="501" width="0.2415%" height="15" fill="rgb(212,113,44)" fg:x="21341022493" fg:w="53159477"/><text x="97.2060%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (4,012,036 samples, 0.02%)</title><rect x="97.1793%" y="485" width="0.0182%" height="15" fill="rgb(226,150,43)" fg:x="21390169934" fg:w="4012036"/><text x="97.4293%" y="495.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (4,012,036 samples, 0.02%)</title><rect x="97.1793%" y="469" width="0.0182%" height="15" fill="rgb(250,71,37)" fg:x="21390169934" fg:w="4012036"/><text x="97.4293%" y="479.50"></text></g><g><title>chlang::board::Board::piece_type (10,030,090 samples, 0.05%)</title><rect x="97.2021%" y="501" width="0.0456%" height="15" fill="rgb(219,76,19)" fg:x="21395184979" fg:w="10030090"/><text x="97.4521%" y="511.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (5,015,045 samples, 0.02%)</title><rect x="97.2477%" y="501" width="0.0228%" height="15" fill="rgb(250,39,11)" fg:x="21405215069" fg:w="5015045"/><text x="97.4977%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (3,009,027 samples, 0.01%)</title><rect x="97.2841%" y="485" width="0.0137%" height="15" fill="rgb(230,64,31)" fg:x="21413239141" fg:w="3009027"/><text x="97.5341%" y="495.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (3,009,027 samples, 0.01%)</title><rect x="97.2841%" y="469" width="0.0137%" height="15" fill="rgb(208,222,23)" fg:x="21413239141" fg:w="3009027"/><text x="97.5341%" y="479.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (7,021,063 samples, 0.03%)</title><rect x="97.2704%" y="501" width="0.0319%" height="15" fill="rgb(227,125,18)" fg:x="21410230114" fg:w="7021063"/><text x="97.5204%" y="511.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (6,018,054 samples, 0.03%)</title><rect x="97.3023%" y="501" width="0.0273%" height="15" fill="rgb(234,210,9)" fg:x="21417251177" fg:w="6018054"/><text x="97.5523%" y="511.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (4,012,036 samples, 0.02%)</title><rect x="97.3297%" y="501" width="0.0182%" height="15" fill="rgb(217,127,24)" fg:x="21423269231" fg:w="4012036"/><text x="97.5797%" y="511.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (37,111,333 samples, 0.17%)</title><rect x="97.1975%" y="517" width="0.1686%" height="15" fill="rgb(239,141,48)" fg:x="21394181970" fg:w="37111333"/><text x="97.4475%" y="527.50"></text></g><g><title>chlang::board::Board::make_move (108,324,972 samples, 0.49%)</title><rect x="96.9287%" y="533" width="0.4921%" height="15" fill="rgb(227,109,8)" fg:x="21335004439" fg:w="108324972"/><text x="97.1787%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 0.01%)</title><rect x="97.4254%" y="517" width="0.0137%" height="15" fill="rgb(235,184,23)" fg:x="21444332420" fg:w="3009027"/><text x="97.6754%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 0.01%)</title><rect x="97.4254%" y="501" width="0.0137%" height="15" fill="rgb(227,226,48)" fg:x="21444332420" fg:w="3009027"/><text x="97.6754%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (3,009,027 samples, 0.01%)</title><rect x="97.4254%" y="485" width="0.0137%" height="15" fill="rgb(206,150,11)" fg:x="21444332420" fg:w="3009027"/><text x="97.6754%" y="495.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 0.01%)</title><rect x="97.4254%" y="469" width="0.0137%" height="15" fill="rgb(254,2,33)" fg:x="21444332420" fg:w="3009027"/><text x="97.6754%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 0.01%)</title><rect x="97.4254%" y="453" width="0.0137%" height="15" fill="rgb(243,160,20)" fg:x="21444332420" fg:w="3009027"/><text x="97.6754%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 0.01%)</title><rect x="97.4254%" y="437" width="0.0137%" height="15" fill="rgb(218,208,30)" fg:x="21444332420" fg:w="3009027"/><text x="97.6754%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,009,027 samples, 0.01%)</title><rect x="97.4254%" y="421" width="0.0137%" height="15" fill="rgb(224,120,49)" fg:x="21444332420" fg:w="3009027"/><text x="97.6754%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,009,027 samples, 0.01%)</title><rect x="97.4254%" y="405" width="0.0137%" height="15" fill="rgb(246,12,2)" fg:x="21444332420" fg:w="3009027"/><text x="97.6754%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (3,009,027 samples, 0.01%)</title><rect x="97.4254%" y="389" width="0.0137%" height="15" fill="rgb(236,117,3)" fg:x="21444332420" fg:w="3009027"/><text x="97.6754%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (7,021,063 samples, 0.03%)</title><rect x="97.4391%" y="517" width="0.0319%" height="15" fill="rgb(216,128,52)" fg:x="21447341447" fg:w="7021063"/><text x="97.6891%" y="527.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (5,015,045 samples, 0.02%)</title><rect x="97.4801%" y="501" width="0.0228%" height="15" fill="rgb(246,145,19)" fg:x="21456368528" fg:w="5015045"/><text x="97.7301%" y="511.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (3,009,027 samples, 0.01%)</title><rect x="97.5028%" y="501" width="0.0137%" height="15" fill="rgb(222,11,46)" fg:x="21461383573" fg:w="3009027"/><text x="97.7528%" y="511.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (14,042,126 samples, 0.06%)</title><rect x="97.4710%" y="517" width="0.0638%" height="15" fill="rgb(245,82,36)" fg:x="21454362510" fg:w="14042126"/><text x="97.7210%" y="527.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves (33,099,297 samples, 0.15%)</title><rect x="97.4254%" y="533" width="0.1504%" height="15" fill="rgb(250,73,51)" fg:x="21444332420" fg:w="33099297"/><text x="97.6754%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (6,018,054 samples, 0.03%)</title><rect x="97.5803%" y="437" width="0.0273%" height="15" fill="rgb(221,189,23)" fg:x="21478434726" fg:w="6018054"/><text x="97.8303%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9,027,081 samples, 0.04%)</title><rect x="97.5803%" y="469" width="0.0410%" height="15" fill="rgb(210,33,7)" fg:x="21478434726" fg:w="9027081"/><text x="97.8303%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (9,027,081 samples, 0.04%)</title><rect x="97.5803%" y="453" width="0.0410%" height="15" fill="rgb(210,107,22)" fg:x="21478434726" fg:w="9027081"/><text x="97.8303%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4,012,036 samples, 0.02%)</title><rect x="97.6259%" y="309" width="0.0182%" height="15" fill="rgb(222,116,37)" fg:x="21488464816" fg:w="4012036"/><text x="97.8759%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (11,033,099 samples, 0.05%)</title><rect x="97.6213%" y="389" width="0.0501%" height="15" fill="rgb(254,17,48)" fg:x="21487461807" fg:w="11033099"/><text x="97.8713%" y="399.50"></text></g><g><title>core::hash::Hasher::write_u64 (11,033,099 samples, 0.05%)</title><rect x="97.6213%" y="373" width="0.0501%" height="15" fill="rgb(224,36,32)" fg:x="21487461807" fg:w="11033099"/><text x="97.8713%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (11,033,099 samples, 0.05%)</title><rect x="97.6213%" y="357" width="0.0501%" height="15" fill="rgb(232,90,46)" fg:x="21487461807" fg:w="11033099"/><text x="97.8713%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (11,033,099 samples, 0.05%)</title><rect x="97.6213%" y="341" width="0.0501%" height="15" fill="rgb(241,66,40)" fg:x="21487461807" fg:w="11033099"/><text x="97.8713%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11,033,099 samples, 0.05%)</title><rect x="97.6213%" y="325" width="0.0501%" height="15" fill="rgb(249,184,29)" fg:x="21487461807" fg:w="11033099"/><text x="97.8713%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (10,030,090 samples, 0.05%)</title><rect x="97.6806%" y="277" width="0.0456%" height="15" fill="rgb(231,181,1)" fg:x="21500500924" fg:w="10030090"/><text x="97.9306%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (13,039,117 samples, 0.06%)</title><rect x="97.6715%" y="293" width="0.0592%" height="15" fill="rgb(224,94,2)" fg:x="21498494906" fg:w="13039117"/><text x="97.9215%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (16,048,144 samples, 0.07%)</title><rect x="97.6715%" y="357" width="0.0729%" height="15" fill="rgb(229,170,15)" fg:x="21498494906" fg:w="16048144"/><text x="97.9215%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (16,048,144 samples, 0.07%)</title><rect x="97.6715%" y="341" width="0.0729%" height="15" fill="rgb(240,127,35)" fg:x="21498494906" fg:w="16048144"/><text x="97.9215%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (16,048,144 samples, 0.07%)</title><rect x="97.6715%" y="325" width="0.0729%" height="15" fill="rgb(248,196,34)" fg:x="21498494906" fg:w="16048144"/><text x="97.9215%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16,048,144 samples, 0.07%)</title><rect x="97.6715%" y="309" width="0.0729%" height="15" fill="rgb(236,137,7)" fg:x="21498494906" fg:w="16048144"/><text x="97.9215%" y="319.50"></text></g><g><title>core::hash::sip::u8to64_le (6,018,054 samples, 0.03%)</title><rect x="97.7489%" y="277" width="0.0273%" height="15" fill="rgb(235,127,16)" fg:x="21515546059" fg:w="6018054"/><text x="97.9989%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (14,042,126 samples, 0.06%)</title><rect x="97.7489%" y="325" width="0.0638%" height="15" fill="rgb(250,192,54)" fg:x="21515546059" fg:w="14042126"/><text x="97.9989%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14,042,126 samples, 0.06%)</title><rect x="97.7489%" y="309" width="0.0638%" height="15" fill="rgb(218,98,20)" fg:x="21515546059" fg:w="14042126"/><text x="97.9989%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14,042,126 samples, 0.06%)</title><rect x="97.7489%" y="293" width="0.0638%" height="15" fill="rgb(230,176,47)" fg:x="21515546059" fg:w="14042126"/><text x="97.9989%" y="303.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (20,060,180 samples, 0.09%)</title><rect x="97.7444%" y="357" width="0.0911%" height="15" fill="rgb(244,2,33)" fg:x="21514543050" fg:w="20060180"/><text x="97.9944%" y="367.50"></text></g><g><title>core::hash::Hasher::write_usize (20,060,180 samples, 0.09%)</title><rect x="97.7444%" y="341" width="0.0911%" height="15" fill="rgb(231,100,17)" fg:x="21514543050" fg:w="20060180"/><text x="97.9944%" y="351.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (39,117,351 samples, 0.18%)</title><rect x="97.6715%" y="389" width="0.1777%" height="15" fill="rgb(245,23,12)" fg:x="21498494906" fg:w="39117351"/><text x="97.9215%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (39,117,351 samples, 0.18%)</title><rect x="97.6715%" y="373" width="0.1777%" height="15" fill="rgb(249,55,22)" fg:x="21498494906" fg:w="39117351"/><text x="97.9215%" y="383.50"></text></g><g><title>core::hash::Hash::hash_slice (3,009,027 samples, 0.01%)</title><rect x="97.8355%" y="357" width="0.0137%" height="15" fill="rgb(207,134,9)" fg:x="21534603230" fg:w="3009027"/><text x="98.0855%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (54,162,486 samples, 0.25%)</title><rect x="97.6213%" y="437" width="0.2461%" height="15" fill="rgb(218,134,0)" fg:x="21487461807" fg:w="54162486"/><text x="97.8713%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (54,162,486 samples, 0.25%)</title><rect x="97.6213%" y="421" width="0.2461%" height="15" fill="rgb(213,212,33)" fg:x="21487461807" fg:w="54162486"/><text x="97.8713%" y="431.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (54,162,486 samples, 0.25%)</title><rect x="97.6213%" y="405" width="0.2461%" height="15" fill="rgb(252,106,18)" fg:x="21487461807" fg:w="54162486"/><text x="97.8713%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4,012,036 samples, 0.02%)</title><rect x="97.8674%" y="373" width="0.0182%" height="15" fill="rgb(208,126,42)" fg:x="21541624293" fg:w="4012036"/><text x="98.1174%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (6,018,054 samples, 0.03%)</title><rect x="97.8674%" y="389" width="0.0273%" height="15" fill="rgb(246,175,29)" fg:x="21541624293" fg:w="6018054"/><text x="98.1174%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (63,189,567 samples, 0.29%)</title><rect x="97.6213%" y="469" width="0.2871%" height="15" fill="rgb(215,13,50)" fg:x="21487461807" fg:w="63189567"/><text x="97.8713%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (63,189,567 samples, 0.29%)</title><rect x="97.6213%" y="453" width="0.2871%" height="15" fill="rgb(216,172,15)" fg:x="21487461807" fg:w="63189567"/><text x="97.8713%" y="463.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (9,027,081 samples, 0.04%)</title><rect x="97.8674%" y="437" width="0.0410%" height="15" fill="rgb(212,103,13)" fg:x="21541624293" fg:w="9027081"/><text x="98.1174%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (9,027,081 samples, 0.04%)</title><rect x="97.8674%" y="421" width="0.0410%" height="15" fill="rgb(231,171,36)" fg:x="21541624293" fg:w="9027081"/><text x="98.1174%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (9,027,081 samples, 0.04%)</title><rect x="97.8674%" y="405" width="0.0410%" height="15" fill="rgb(250,123,20)" fg:x="21541624293" fg:w="9027081"/><text x="98.1174%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (4,012,036 samples, 0.02%)</title><rect x="97.9130%" y="389" width="0.0182%" height="15" fill="rgb(212,53,50)" fg:x="21551654383" fg:w="4012036"/><text x="98.1630%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (4,012,036 samples, 0.02%)</title><rect x="97.9130%" y="373" width="0.0182%" height="15" fill="rgb(243,54,12)" fg:x="21551654383" fg:w="4012036"/><text x="98.1630%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (3,009,027 samples, 0.01%)</title><rect x="97.9175%" y="357" width="0.0137%" height="15" fill="rgb(234,101,34)" fg:x="21552657392" fg:w="3009027"/><text x="98.1675%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,009,027 samples, 0.01%)</title><rect x="97.9403%" y="181" width="0.0137%" height="15" fill="rgb(254,67,22)" fg:x="21557672437" fg:w="3009027"/><text x="98.1903%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4,012,036 samples, 0.02%)</title><rect x="97.9403%" y="197" width="0.0182%" height="15" fill="rgb(250,35,47)" fg:x="21557672437" fg:w="4012036"/><text x="98.1903%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (13,039,117 samples, 0.06%)</title><rect x="97.9357%" y="245" width="0.0592%" height="15" fill="rgb(226,126,38)" fg:x="21556669428" fg:w="13039117"/><text x="98.1857%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (13,039,117 samples, 0.06%)</title><rect x="97.9357%" y="229" width="0.0592%" height="15" fill="rgb(216,138,53)" fg:x="21556669428" fg:w="13039117"/><text x="98.1857%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13,039,117 samples, 0.06%)</title><rect x="97.9357%" y="213" width="0.0592%" height="15" fill="rgb(246,199,43)" fg:x="21556669428" fg:w="13039117"/><text x="98.1857%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (14,042,126 samples, 0.06%)</title><rect x="97.9357%" y="277" width="0.0638%" height="15" fill="rgb(232,125,11)" fg:x="21556669428" fg:w="14042126"/><text x="98.1857%" y="287.50"></text></g><g><title>core::hash::Hasher::write_u64 (14,042,126 samples, 0.06%)</title><rect x="97.9357%" y="261" width="0.0638%" height="15" fill="rgb(218,219,45)" fg:x="21556669428" fg:w="14042126"/><text x="98.1857%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6,018,054 samples, 0.03%)</title><rect x="98.0041%" y="165" width="0.0273%" height="15" fill="rgb(216,102,54)" fg:x="21571714563" fg:w="6018054"/><text x="98.2541%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5,015,045 samples, 0.02%)</title><rect x="98.0314%" y="165" width="0.0228%" height="15" fill="rgb(250,228,7)" fg:x="21577732617" fg:w="5015045"/><text x="98.2814%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (12,036,108 samples, 0.05%)</title><rect x="98.0041%" y="181" width="0.0547%" height="15" fill="rgb(226,125,25)" fg:x="21571714563" fg:w="12036108"/><text x="98.2541%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (20,060,180 samples, 0.09%)</title><rect x="97.9995%" y="245" width="0.0911%" height="15" fill="rgb(224,165,27)" fg:x="21570711554" fg:w="20060180"/><text x="98.2495%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (20,060,180 samples, 0.09%)</title><rect x="97.9995%" y="229" width="0.0911%" height="15" fill="rgb(233,86,3)" fg:x="21570711554" fg:w="20060180"/><text x="98.2495%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (20,060,180 samples, 0.09%)</title><rect x="97.9995%" y="213" width="0.0911%" height="15" fill="rgb(228,116,20)" fg:x="21570711554" fg:w="20060180"/><text x="98.2495%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20,060,180 samples, 0.09%)</title><rect x="97.9995%" y="197" width="0.0911%" height="15" fill="rgb(209,192,17)" fg:x="21570711554" fg:w="20060180"/><text x="98.2495%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4,012,036 samples, 0.02%)</title><rect x="98.0998%" y="165" width="0.0182%" height="15" fill="rgb(224,88,34)" fg:x="21592777752" fg:w="4012036"/><text x="98.3498%" y="175.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (16,048,144 samples, 0.07%)</title><rect x="98.0907%" y="245" width="0.0729%" height="15" fill="rgb(233,38,6)" fg:x="21590771734" fg:w="16048144"/><text x="98.3407%" y="255.50"></text></g><g><title>core::hash::Hasher::write_usize (16,048,144 samples, 0.07%)</title><rect x="98.0907%" y="229" width="0.0729%" height="15" fill="rgb(212,59,30)" fg:x="21590771734" fg:w="16048144"/><text x="98.3407%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (16,048,144 samples, 0.07%)</title><rect x="98.0907%" y="213" width="0.0729%" height="15" fill="rgb(213,80,3)" fg:x="21590771734" fg:w="16048144"/><text x="98.3407%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (16,048,144 samples, 0.07%)</title><rect x="98.0907%" y="197" width="0.0729%" height="15" fill="rgb(251,178,7)" fg:x="21590771734" fg:w="16048144"/><text x="98.3407%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16,048,144 samples, 0.07%)</title><rect x="98.0907%" y="181" width="0.0729%" height="15" fill="rgb(213,154,26)" fg:x="21590771734" fg:w="16048144"/><text x="98.3407%" y="191.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (38,114,342 samples, 0.17%)</title><rect x="97.9995%" y="277" width="0.1732%" height="15" fill="rgb(238,165,49)" fg:x="21570711554" fg:w="38114342"/><text x="98.2495%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (38,114,342 samples, 0.17%)</title><rect x="97.9995%" y="261" width="0.1732%" height="15" fill="rgb(248,91,46)" fg:x="21570711554" fg:w="38114342"/><text x="98.2495%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (4,012,036 samples, 0.02%)</title><rect x="98.1773%" y="165" width="0.0182%" height="15" fill="rgb(244,21,52)" fg:x="21609828905" fg:w="4012036"/><text x="98.4273%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3,009,027 samples, 0.01%)</title><rect x="98.1955%" y="165" width="0.0137%" height="15" fill="rgb(247,122,20)" fg:x="21613840941" fg:w="3009027"/><text x="98.4455%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (12,036,108 samples, 0.05%)</title><rect x="98.1727%" y="261" width="0.0547%" height="15" fill="rgb(218,27,9)" fg:x="21608825896" fg:w="12036108"/><text x="98.4227%" y="271.50"></text></g><g><title>core::hash::Hasher::write_isize (12,036,108 samples, 0.05%)</title><rect x="98.1727%" y="245" width="0.0547%" height="15" fill="rgb(246,7,6)" fg:x="21608825896" fg:w="12036108"/><text x="98.4227%" y="255.50"></text></g><g><title>core::hash::Hasher::write_usize (12,036,108 samples, 0.05%)</title><rect x="98.1727%" y="229" width="0.0547%" height="15" fill="rgb(227,135,54)" fg:x="21608825896" fg:w="12036108"/><text x="98.4227%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (11,033,099 samples, 0.05%)</title><rect x="98.1773%" y="213" width="0.0501%" height="15" fill="rgb(247,14,11)" fg:x="21609828905" fg:w="11033099"/><text x="98.4273%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (11,033,099 samples, 0.05%)</title><rect x="98.1773%" y="197" width="0.0501%" height="15" fill="rgb(206,149,34)" fg:x="21609828905" fg:w="11033099"/><text x="98.4273%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11,033,099 samples, 0.05%)</title><rect x="98.1773%" y="181" width="0.0501%" height="15" fill="rgb(227,228,4)" fg:x="21609828905" fg:w="11033099"/><text x="98.4273%" y="191.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (15,045,135 samples, 0.07%)</title><rect x="98.1727%" y="277" width="0.0684%" height="15" fill="rgb(238,218,28)" fg:x="21608825896" fg:w="15045135"/><text x="98.4227%" y="287.50"></text></g><g><title>&lt;chlang::board::Position as core::hash::Hash&gt;::hash (3,009,027 samples, 0.01%)</title><rect x="98.2274%" y="261" width="0.0137%" height="15" fill="rgb(252,86,40)" fg:x="21620862004" fg:w="3009027"/><text x="98.4774%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (3,009,027 samples, 0.01%)</title><rect x="98.2274%" y="245" width="0.0137%" height="15" fill="rgb(251,225,11)" fg:x="21620862004" fg:w="3009027"/><text x="98.4774%" y="255.50"></text></g><g><title>core::hash::Hasher::write_i64 (3,009,027 samples, 0.01%)</title><rect x="98.2274%" y="229" width="0.0137%" height="15" fill="rgb(206,46,49)" fg:x="21620862004" fg:w="3009027"/><text x="98.4774%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u64 (3,009,027 samples, 0.01%)</title><rect x="98.2274%" y="213" width="0.0137%" height="15" fill="rgb(245,128,24)" fg:x="21620862004" fg:w="3009027"/><text x="98.4774%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3,009,027 samples, 0.01%)</title><rect x="98.2274%" y="197" width="0.0137%" height="15" fill="rgb(219,177,34)" fg:x="21620862004" fg:w="3009027"/><text x="98.4774%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3,009,027 samples, 0.01%)</title><rect x="98.2274%" y="181" width="0.0137%" height="15" fill="rgb(218,60,48)" fg:x="21620862004" fg:w="3009027"/><text x="98.4774%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,009,027 samples, 0.01%)</title><rect x="98.2274%" y="165" width="0.0137%" height="15" fill="rgb(221,11,5)" fg:x="21620862004" fg:w="3009027"/><text x="98.4774%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (69,207,621 samples, 0.31%)</title><rect x="97.9357%" y="309" width="0.3144%" height="15" fill="rgb(220,148,13)" fg:x="21556669428" fg:w="69207621"/><text x="98.1857%" y="319.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (69,207,621 samples, 0.31%)</title><rect x="97.9357%" y="293" width="0.3144%" height="15" fill="rgb(210,16,3)" fg:x="21556669428" fg:w="69207621"/><text x="98.1857%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (70,210,630 samples, 0.32%)</title><rect x="97.9357%" y="325" width="0.3190%" height="15" fill="rgb(236,80,2)" fg:x="21556669428" fg:w="70210630"/><text x="98.1857%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7,021,063 samples, 0.03%)</title><rect x="98.2593%" y="277" width="0.0319%" height="15" fill="rgb(239,129,19)" fg:x="21627883067" fg:w="7021063"/><text x="98.5093%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6,018,054 samples, 0.03%)</title><rect x="98.2638%" y="261" width="0.0273%" height="15" fill="rgb(220,106,35)" fg:x="21628886076" fg:w="6018054"/><text x="98.5138%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (83,249,747 samples, 0.38%)</title><rect x="97.9312%" y="389" width="0.3782%" height="15" fill="rgb(252,139,45)" fg:x="21555666419" fg:w="83249747"/><text x="98.1812%" y="399.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (82,246,738 samples, 0.37%)</title><rect x="97.9357%" y="373" width="0.3737%" height="15" fill="rgb(229,8,36)" fg:x="21556669428" fg:w="82246738"/><text x="98.1857%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (82,246,738 samples, 0.37%)</title><rect x="97.9357%" y="357" width="0.3737%" height="15" fill="rgb(230,126,33)" fg:x="21556669428" fg:w="82246738"/><text x="98.1857%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (82,246,738 samples, 0.37%)</title><rect x="97.9357%" y="341" width="0.3737%" height="15" fill="rgb(239,140,21)" fg:x="21556669428" fg:w="82246738"/><text x="98.1857%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (11,033,099 samples, 0.05%)</title><rect x="98.2593%" y="325" width="0.0501%" height="15" fill="rgb(254,104,9)" fg:x="21627883067" fg:w="11033099"/><text x="98.5093%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (11,033,099 samples, 0.05%)</title><rect x="98.2593%" y="309" width="0.0501%" height="15" fill="rgb(239,52,14)" fg:x="21627883067" fg:w="11033099"/><text x="98.5093%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (11,033,099 samples, 0.05%)</title><rect x="98.2593%" y="293" width="0.0501%" height="15" fill="rgb(208,227,44)" fg:x="21627883067" fg:w="11033099"/><text x="98.5093%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (90,270,810 samples, 0.41%)</title><rect x="97.9084%" y="405" width="0.4101%" height="15" fill="rgb(246,18,19)" fg:x="21550651374" fg:w="90270810"/><text x="98.1584%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (91,273,819 samples, 0.41%)</title><rect x="97.9084%" y="421" width="0.4147%" height="15" fill="rgb(235,228,25)" fg:x="21550651374" fg:w="91273819"/><text x="98.1584%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (92,276,828 samples, 0.42%)</title><rect x="97.9084%" y="469" width="0.4192%" height="15" fill="rgb(240,156,20)" fg:x="21550651374" fg:w="92276828"/><text x="98.1584%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (92,276,828 samples, 0.42%)</title><rect x="97.9084%" y="453" width="0.4192%" height="15" fill="rgb(224,8,20)" fg:x="21550651374" fg:w="92276828"/><text x="98.1584%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (92,276,828 samples, 0.42%)</title><rect x="97.9084%" y="437" width="0.4192%" height="15" fill="rgb(214,12,52)" fg:x="21550651374" fg:w="92276828"/><text x="98.1584%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (165,496,485 samples, 0.75%)</title><rect x="97.5803%" y="501" width="0.7519%" height="15" fill="rgb(211,220,47)" fg:x="21478434726" fg:w="165496485"/><text x="97.8303%" y="511.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (165,496,485 samples, 0.75%)</title><rect x="97.5803%" y="485" width="0.7519%" height="15" fill="rgb(250,173,5)" fg:x="21478434726" fg:w="165496485"/><text x="97.8303%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (6,018,054 samples, 0.03%)</title><rect x="98.3322%" y="421" width="0.0273%" height="15" fill="rgb(250,125,52)" fg:x="21643931211" fg:w="6018054"/><text x="98.5822%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (4,012,036 samples, 0.02%)</title><rect x="98.3413%" y="405" width="0.0182%" height="15" fill="rgb(209,133,18)" fg:x="21645937229" fg:w="4012036"/><text x="98.5913%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (7,021,063 samples, 0.03%)</title><rect x="98.3322%" y="437" width="0.0319%" height="15" fill="rgb(216,173,22)" fg:x="21643931211" fg:w="7021063"/><text x="98.5822%" y="447.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (10,030,090 samples, 0.05%)</title><rect x="98.3322%" y="501" width="0.0456%" height="15" fill="rgb(205,3,22)" fg:x="21643931211" fg:w="10030090"/><text x="98.5822%" y="511.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (10,030,090 samples, 0.05%)</title><rect x="98.3322%" y="485" width="0.0456%" height="15" fill="rgb(248,22,20)" fg:x="21643931211" fg:w="10030090"/><text x="98.5822%" y="495.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (10,030,090 samples, 0.05%)</title><rect x="98.3322%" y="469" width="0.0456%" height="15" fill="rgb(233,6,29)" fg:x="21643931211" fg:w="10030090"/><text x="98.5822%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (10,030,090 samples, 0.05%)</title><rect x="98.3322%" y="453" width="0.0456%" height="15" fill="rgb(240,22,54)" fg:x="21643931211" fg:w="10030090"/><text x="98.5822%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,012,036 samples, 0.02%)</title><rect x="98.3914%" y="293" width="0.0182%" height="15" fill="rgb(231,133,32)" fg:x="21656970328" fg:w="4012036"/><text x="98.6414%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,012,036 samples, 0.02%)</title><rect x="98.3914%" y="277" width="0.0182%" height="15" fill="rgb(248,193,4)" fg:x="21656970328" fg:w="4012036"/><text x="98.6414%" y="287.50"></text></g><g><title>alloc::alloc::alloc (4,012,036 samples, 0.02%)</title><rect x="98.3914%" y="261" width="0.0182%" height="15" fill="rgb(211,178,46)" fg:x="21656970328" fg:w="4012036"/><text x="98.6414%" y="271.50"></text></g><g><title>__GI___libc_malloc (4,012,036 samples, 0.02%)</title><rect x="98.3914%" y="245" width="0.0182%" height="15" fill="rgb(224,5,42)" fg:x="21656970328" fg:w="4012036"/><text x="98.6414%" y="255.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (5,015,045 samples, 0.02%)</title><rect x="98.3914%" y="309" width="0.0228%" height="15" fill="rgb(239,176,25)" fg:x="21656970328" fg:w="5015045"/><text x="98.6414%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (6,018,054 samples, 0.03%)</title><rect x="98.3914%" y="325" width="0.0273%" height="15" fill="rgb(245,187,50)" fg:x="21656970328" fg:w="6018054"/><text x="98.6414%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (7,021,063 samples, 0.03%)</title><rect x="98.3914%" y="357" width="0.0319%" height="15" fill="rgb(248,24,15)" fg:x="21656970328" fg:w="7021063"/><text x="98.6414%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (7,021,063 samples, 0.03%)</title><rect x="98.3914%" y="341" width="0.0319%" height="15" fill="rgb(205,166,13)" fg:x="21656970328" fg:w="7021063"/><text x="98.6414%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (8,024,072 samples, 0.04%)</title><rect x="98.3914%" y="437" width="0.0365%" height="15" fill="rgb(208,114,23)" fg:x="21656970328" fg:w="8024072"/><text x="98.6414%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (8,024,072 samples, 0.04%)</title><rect x="98.3914%" y="421" width="0.0365%" height="15" fill="rgb(239,127,18)" fg:x="21656970328" fg:w="8024072"/><text x="98.6414%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8,024,072 samples, 0.04%)</title><rect x="98.3914%" y="405" width="0.0365%" height="15" fill="rgb(219,154,28)" fg:x="21656970328" fg:w="8024072"/><text x="98.6414%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (8,024,072 samples, 0.04%)</title><rect x="98.3914%" y="389" width="0.0365%" height="15" fill="rgb(225,157,23)" fg:x="21656970328" fg:w="8024072"/><text x="98.6414%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (8,024,072 samples, 0.04%)</title><rect x="98.3914%" y="373" width="0.0365%" height="15" fill="rgb(219,8,6)" fg:x="21656970328" fg:w="8024072"/><text x="98.6414%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3,009,027 samples, 0.01%)</title><rect x="98.4507%" y="101" width="0.0137%" height="15" fill="rgb(212,47,6)" fg:x="21670009445" fg:w="3009027"/><text x="98.7007%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7,021,063 samples, 0.03%)</title><rect x="98.4416%" y="117" width="0.0319%" height="15" fill="rgb(224,190,4)" fg:x="21668003427" fg:w="7021063"/><text x="98.6916%" y="127.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (8,024,072 samples, 0.04%)</title><rect x="98.4416%" y="181" width="0.0365%" height="15" fill="rgb(239,183,29)" fg:x="21668003427" fg:w="8024072"/><text x="98.6916%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8,024,072 samples, 0.04%)</title><rect x="98.4416%" y="165" width="0.0365%" height="15" fill="rgb(213,57,7)" fg:x="21668003427" fg:w="8024072"/><text x="98.6916%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8,024,072 samples, 0.04%)</title><rect x="98.4416%" y="149" width="0.0365%" height="15" fill="rgb(216,148,1)" fg:x="21668003427" fg:w="8024072"/><text x="98.6916%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8,024,072 samples, 0.04%)</title><rect x="98.4416%" y="133" width="0.0365%" height="15" fill="rgb(236,182,29)" fg:x="21668003427" fg:w="8024072"/><text x="98.6916%" y="143.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="98.4780%" y="149" width="0.0228%" height="15" fill="rgb(244,120,48)" fg:x="21676027499" fg:w="5015045"/><text x="98.7280%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="98.4780%" y="133" width="0.0228%" height="15" fill="rgb(206,71,34)" fg:x="21676027499" fg:w="5015045"/><text x="98.7280%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="98.4780%" y="117" width="0.0228%" height="15" fill="rgb(242,32,6)" fg:x="21676027499" fg:w="5015045"/><text x="98.7280%" y="127.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (6,018,054 samples, 0.03%)</title><rect x="98.4780%" y="181" width="0.0273%" height="15" fill="rgb(241,35,3)" fg:x="21676027499" fg:w="6018054"/><text x="98.7280%" y="191.50"></text></g><g><title>core::hash::Hasher::write_usize (6,018,054 samples, 0.03%)</title><rect x="98.4780%" y="165" width="0.0273%" height="15" fill="rgb(222,62,19)" fg:x="21676027499" fg:w="6018054"/><text x="98.7280%" y="175.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (15,045,135 samples, 0.07%)</title><rect x="98.4416%" y="213" width="0.0684%" height="15" fill="rgb(223,110,41)" fg:x="21668003427" fg:w="15045135"/><text x="98.6916%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (15,045,135 samples, 0.07%)</title><rect x="98.4416%" y="197" width="0.0684%" height="15" fill="rgb(208,224,4)" fg:x="21668003427" fg:w="15045135"/><text x="98.6916%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (20,060,180 samples, 0.09%)</title><rect x="98.4324%" y="261" width="0.0911%" height="15" fill="rgb(241,137,19)" fg:x="21665997409" fg:w="20060180"/><text x="98.6824%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (20,060,180 samples, 0.09%)</title><rect x="98.4324%" y="245" width="0.0911%" height="15" fill="rgb(244,24,17)" fg:x="21665997409" fg:w="20060180"/><text x="98.6824%" y="255.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (20,060,180 samples, 0.09%)</title><rect x="98.4324%" y="229" width="0.0911%" height="15" fill="rgb(245,178,49)" fg:x="21665997409" fg:w="20060180"/><text x="98.6824%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V&gt; as core::convert::From&lt;[(K,V): N]&gt;&gt;::from (31,093,279 samples, 0.14%)</title><rect x="98.3914%" y="501" width="0.1413%" height="15" fill="rgb(219,160,38)" fg:x="21656970328" fg:w="31093279"/><text x="98.6414%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (31,093,279 samples, 0.14%)</title><rect x="98.3914%" y="485" width="0.1413%" height="15" fill="rgb(228,137,14)" fg:x="21656970328" fg:w="31093279"/><text x="98.6414%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (31,093,279 samples, 0.14%)</title><rect x="98.3914%" y="469" width="0.1413%" height="15" fill="rgb(237,134,11)" fg:x="21656970328" fg:w="31093279"/><text x="98.6414%" y="479.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (31,093,279 samples, 0.14%)</title><rect x="98.3914%" y="453" width="0.1413%" height="15" fill="rgb(211,126,44)" fg:x="21656970328" fg:w="31093279"/><text x="98.6414%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (23,069,207 samples, 0.10%)</title><rect x="98.4279%" y="437" width="0.1048%" height="15" fill="rgb(226,171,33)" fg:x="21664994400" fg:w="23069207"/><text x="98.6779%" y="447.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23,069,207 samples, 0.10%)</title><rect x="98.4279%" y="421" width="0.1048%" height="15" fill="rgb(253,99,13)" fg:x="21664994400" fg:w="23069207"/><text x="98.6779%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::by_ref_sized::ByRefSized&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23,069,207 samples, 0.10%)</title><rect x="98.4279%" y="405" width="0.1048%" height="15" fill="rgb(244,48,7)" fg:x="21664994400" fg:w="23069207"/><text x="98.6779%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (23,069,207 samples, 0.10%)</title><rect x="98.4279%" y="389" width="0.1048%" height="15" fill="rgb(244,217,54)" fg:x="21664994400" fg:w="23069207"/><text x="98.6779%" y="399.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (23,069,207 samples, 0.10%)</title><rect x="98.4279%" y="373" width="0.1048%" height="15" fill="rgb(224,15,18)" fg:x="21664994400" fg:w="23069207"/><text x="98.6779%" y="383.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (23,069,207 samples, 0.10%)</title><rect x="98.4279%" y="357" width="0.1048%" height="15" fill="rgb(244,99,12)" fg:x="21664994400" fg:w="23069207"/><text x="98.6779%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (23,069,207 samples, 0.10%)</title><rect x="98.4279%" y="341" width="0.1048%" height="15" fill="rgb(233,226,8)" fg:x="21664994400" fg:w="23069207"/><text x="98.6779%" y="351.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (23,069,207 samples, 0.10%)</title><rect x="98.4279%" y="325" width="0.1048%" height="15" fill="rgb(229,211,3)" fg:x="21664994400" fg:w="23069207"/><text x="98.6779%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (23,069,207 samples, 0.10%)</title><rect x="98.4279%" y="309" width="0.1048%" height="15" fill="rgb(216,140,21)" fg:x="21664994400" fg:w="23069207"/><text x="98.6779%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (22,066,198 samples, 0.10%)</title><rect x="98.4324%" y="293" width="0.1003%" height="15" fill="rgb(234,122,30)" fg:x="21665997409" fg:w="22066198"/><text x="98.6824%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (22,066,198 samples, 0.10%)</title><rect x="98.4324%" y="277" width="0.1003%" height="15" fill="rgb(236,25,46)" fg:x="21665997409" fg:w="22066198"/><text x="98.6824%" y="287.50"></text></g><g><title>chlang::board::Board::is_threefold_rep (211,634,899 samples, 0.96%)</title><rect x="97.5803%" y="517" width="0.9615%" height="15" fill="rgb(217,52,54)" fg:x="21478434726" fg:w="211634899"/><text x="97.8303%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3,009,027 samples, 0.01%)</title><rect x="98.5418%" y="485" width="0.0137%" height="15" fill="rgb(222,29,26)" fg:x="21690069625" fg:w="3009027"/><text x="98.7918%" y="495.50"></text></g><g><title>chlang::board::Board::unmake_last (5,015,045 samples, 0.02%)</title><rect x="98.5418%" y="501" width="0.0228%" height="15" fill="rgb(216,177,29)" fg:x="21690069625" fg:w="5015045"/><text x="98.7918%" y="511.50"></text></g><g><title>_int_free (3,009,027 samples, 0.01%)</title><rect x="98.5874%" y="373" width="0.0137%" height="15" fill="rgb(247,136,51)" fg:x="21700099715" fg:w="3009027"/><text x="98.8374%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (8,024,072 samples, 0.04%)</title><rect x="98.5737%" y="485" width="0.0365%" height="15" fill="rgb(231,47,47)" fg:x="21697090688" fg:w="8024072"/><text x="98.8237%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (8,024,072 samples, 0.04%)</title><rect x="98.5737%" y="469" width="0.0365%" height="15" fill="rgb(211,192,36)" fg:x="21697090688" fg:w="8024072"/><text x="98.8237%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,024,072 samples, 0.04%)</title><rect x="98.5737%" y="453" width="0.0365%" height="15" fill="rgb(229,156,32)" fg:x="21697090688" fg:w="8024072"/><text x="98.8237%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8,024,072 samples, 0.04%)</title><rect x="98.5737%" y="437" width="0.0365%" height="15" fill="rgb(248,213,20)" fg:x="21697090688" fg:w="8024072"/><text x="98.8237%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8,024,072 samples, 0.04%)</title><rect x="98.5737%" y="421" width="0.0365%" height="15" fill="rgb(217,64,7)" fg:x="21697090688" fg:w="8024072"/><text x="98.8237%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (8,024,072 samples, 0.04%)</title><rect x="98.5737%" y="405" width="0.0365%" height="15" fill="rgb(232,142,8)" fg:x="21697090688" fg:w="8024072"/><text x="98.8237%" y="415.50"></text></g><g><title>__GI___libc_free (5,015,045 samples, 0.02%)</title><rect x="98.5874%" y="389" width="0.0228%" height="15" fill="rgb(224,92,44)" fg:x="21700099715" fg:w="5015045"/><text x="98.8374%" y="399.50"></text></g><g><title>chlang::board::Board::piece_type (6,018,054 samples, 0.03%)</title><rect x="98.6147%" y="485" width="0.0273%" height="15" fill="rgb(214,169,17)" fg:x="21706117769" fg:w="6018054"/><text x="98.8647%" y="495.50"></text></g><g><title>chlang::board::Board::key (4,012,036 samples, 0.02%)</title><rect x="98.6421%" y="485" width="0.0182%" height="15" fill="rgb(210,59,37)" fg:x="21712135823" fg:w="4012036"/><text x="98.8921%" y="495.50"></text></g><g><title>__rust_dealloc (6,018,054 samples, 0.03%)</title><rect x="98.6603%" y="309" width="0.0273%" height="15" fill="rgb(214,116,48)" fg:x="21716147859" fg:w="6018054"/><text x="98.9103%" y="319.50"></text></g><g><title>_int_free (17,051,153 samples, 0.08%)</title><rect x="98.6967%" y="293" width="0.0775%" height="15" fill="rgb(244,191,6)" fg:x="21724171931" fg:w="17051153"/><text x="98.9467%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (31,093,279 samples, 0.14%)</title><rect x="98.6603%" y="453" width="0.1413%" height="15" fill="rgb(241,50,52)" fg:x="21716147859" fg:w="31093279"/><text x="98.9103%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31,093,279 samples, 0.14%)</title><rect x="98.6603%" y="437" width="0.1413%" height="15" fill="rgb(236,75,39)" fg:x="21716147859" fg:w="31093279"/><text x="98.9103%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (31,093,279 samples, 0.14%)</title><rect x="98.6603%" y="421" width="0.1413%" height="15" fill="rgb(236,99,0)" fg:x="21716147859" fg:w="31093279"/><text x="98.9103%" y="431.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31,093,279 samples, 0.14%)</title><rect x="98.6603%" y="405" width="0.1413%" height="15" fill="rgb(207,202,15)" fg:x="21716147859" fg:w="31093279"/><text x="98.9103%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (31,093,279 samples, 0.14%)</title><rect x="98.6603%" y="389" width="0.1413%" height="15" fill="rgb(233,207,14)" fg:x="21716147859" fg:w="31093279"/><text x="98.9103%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31,093,279 samples, 0.14%)</title><rect x="98.6603%" y="373" width="0.1413%" height="15" fill="rgb(226,27,51)" fg:x="21716147859" fg:w="31093279"/><text x="98.9103%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (31,093,279 samples, 0.14%)</title><rect x="98.6603%" y="357" width="0.1413%" height="15" fill="rgb(206,104,42)" fg:x="21716147859" fg:w="31093279"/><text x="98.9103%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (31,093,279 samples, 0.14%)</title><rect x="98.6603%" y="341" width="0.1413%" height="15" fill="rgb(212,225,4)" fg:x="21716147859" fg:w="31093279"/><text x="98.9103%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (31,093,279 samples, 0.14%)</title><rect x="98.6603%" y="325" width="0.1413%" height="15" fill="rgb(233,96,42)" fg:x="21716147859" fg:w="31093279"/><text x="98.9103%" y="335.50"></text></g><g><title>__GI___libc_free (23,069,207 samples, 0.10%)</title><rect x="98.6967%" y="309" width="0.1048%" height="15" fill="rgb(229,21,32)" fg:x="21724171931" fg:w="23069207"/><text x="98.9467%" y="319.50"></text></g><g><title>chlang::board::Board::piece_type (8,024,072 samples, 0.04%)</title><rect x="98.8152%" y="453" width="0.0365%" height="15" fill="rgb(226,216,24)" fg:x="21750250165" fg:w="8024072"/><text x="99.0652%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9,027,081 samples, 0.04%)</title><rect x="98.8562%" y="357" width="0.0410%" height="15" fill="rgb(221,163,17)" fg:x="21759277246" fg:w="9027081"/><text x="99.1062%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9,027,081 samples, 0.04%)</title><rect x="98.8562%" y="341" width="0.0410%" height="15" fill="rgb(216,216,42)" fg:x="21759277246" fg:w="9027081"/><text x="99.1062%" y="351.50"></text></g><g><title>alloc::alloc::alloc (9,027,081 samples, 0.04%)</title><rect x="98.8562%" y="325" width="0.0410%" height="15" fill="rgb(240,118,7)" fg:x="21759277246" fg:w="9027081"/><text x="99.1062%" y="335.50"></text></g><g><title>__GI___libc_malloc (7,021,063 samples, 0.03%)</title><rect x="98.8653%" y="309" width="0.0319%" height="15" fill="rgb(221,67,37)" fg:x="21761283264" fg:w="7021063"/><text x="99.1153%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (10,030,090 samples, 0.05%)</title><rect x="98.8562%" y="437" width="0.0456%" height="15" fill="rgb(241,32,44)" fg:x="21759277246" fg:w="10030090"/><text x="99.1062%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10,030,090 samples, 0.05%)</title><rect x="98.8562%" y="421" width="0.0456%" height="15" fill="rgb(235,204,43)" fg:x="21759277246" fg:w="10030090"/><text x="99.1062%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10,030,090 samples, 0.05%)</title><rect x="98.8562%" y="405" width="0.0456%" height="15" fill="rgb(213,116,10)" fg:x="21759277246" fg:w="10030090"/><text x="99.1062%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (10,030,090 samples, 0.05%)</title><rect x="98.8562%" y="389" width="0.0456%" height="15" fill="rgb(239,15,48)" fg:x="21759277246" fg:w="10030090"/><text x="99.1062%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (10,030,090 samples, 0.05%)</title><rect x="98.8562%" y="373" width="0.0456%" height="15" fill="rgb(207,123,36)" fg:x="21759277246" fg:w="10030090"/><text x="99.1062%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7,021,063 samples, 0.03%)</title><rect x="98.9018%" y="437" width="0.0319%" height="15" fill="rgb(209,103,30)" fg:x="21769307336" fg:w="7021063"/><text x="99.1518%" y="447.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (25,075,225 samples, 0.11%)</title><rect x="98.8517%" y="453" width="0.1139%" height="15" fill="rgb(238,100,19)" fg:x="21758274237" fg:w="25075225"/><text x="99.1017%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;chlang::cmove::Move&gt;: 2]&gt; (7,021,063 samples, 0.03%)</title><rect x="98.9656%" y="437" width="0.0319%" height="15" fill="rgb(244,30,14)" fg:x="21783349462" fg:w="7021063"/><text x="99.2156%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chlang::cmove::Move&gt;&gt; (7,021,063 samples, 0.03%)</title><rect x="98.9656%" y="421" width="0.0319%" height="15" fill="rgb(249,174,6)" fg:x="21783349462" fg:w="7021063"/><text x="99.2156%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (7,021,063 samples, 0.03%)</title><rect x="98.9656%" y="405" width="0.0319%" height="15" fill="rgb(235,213,41)" fg:x="21783349462" fg:w="7021063"/><text x="99.2156%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,021,063 samples, 0.03%)</title><rect x="98.9656%" y="389" width="0.0319%" height="15" fill="rgb(213,118,6)" fg:x="21783349462" fg:w="7021063"/><text x="99.2156%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (7,021,063 samples, 0.03%)</title><rect x="98.9656%" y="373" width="0.0319%" height="15" fill="rgb(235,44,51)" fg:x="21783349462" fg:w="7021063"/><text x="99.2156%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7,021,063 samples, 0.03%)</title><rect x="98.9656%" y="357" width="0.0319%" height="15" fill="rgb(217,9,53)" fg:x="21783349462" fg:w="7021063"/><text x="99.2156%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (7,021,063 samples, 0.03%)</title><rect x="98.9656%" y="341" width="0.0319%" height="15" fill="rgb(237,172,34)" fg:x="21783349462" fg:w="7021063"/><text x="99.2156%" y="351.50"></text></g><g><title>__GI___libc_free (5,015,045 samples, 0.02%)</title><rect x="98.9747%" y="325" width="0.0228%" height="15" fill="rgb(206,206,11)" fg:x="21785355480" fg:w="5015045"/><text x="99.2247%" y="335.50"></text></g><g><title>tcache_get (3,009,027 samples, 0.01%)</title><rect x="99.0112%" y="293" width="0.0137%" height="15" fill="rgb(214,149,29)" fg:x="21793379552" fg:w="3009027"/><text x="99.2612%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6,018,054 samples, 0.03%)</title><rect x="99.0066%" y="437" width="0.0273%" height="15" fill="rgb(208,123,3)" fg:x="21792376543" fg:w="6018054"/><text x="99.2566%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6,018,054 samples, 0.03%)</title><rect x="99.0066%" y="421" width="0.0273%" height="15" fill="rgb(229,126,4)" fg:x="21792376543" fg:w="6018054"/><text x="99.2566%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6,018,054 samples, 0.03%)</title><rect x="99.0066%" y="405" width="0.0273%" height="15" fill="rgb(222,92,36)" fg:x="21792376543" fg:w="6018054"/><text x="99.2566%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (6,018,054 samples, 0.03%)</title><rect x="99.0066%" y="389" width="0.0273%" height="15" fill="rgb(216,39,41)" fg:x="21792376543" fg:w="6018054"/><text x="99.2566%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (6,018,054 samples, 0.03%)</title><rect x="99.0066%" y="373" width="0.0273%" height="15" fill="rgb(253,127,28)" fg:x="21792376543" fg:w="6018054"/><text x="99.2566%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6,018,054 samples, 0.03%)</title><rect x="99.0066%" y="357" width="0.0273%" height="15" fill="rgb(249,152,51)" fg:x="21792376543" fg:w="6018054"/><text x="99.2566%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6,018,054 samples, 0.03%)</title><rect x="99.0066%" y="341" width="0.0273%" height="15" fill="rgb(209,123,42)" fg:x="21792376543" fg:w="6018054"/><text x="99.2566%" y="351.50"></text></g><g><title>alloc::alloc::alloc (6,018,054 samples, 0.03%)</title><rect x="99.0066%" y="325" width="0.0273%" height="15" fill="rgb(241,118,22)" fg:x="21792376543" fg:w="6018054"/><text x="99.2566%" y="335.50"></text></g><g><title>__GI___libc_malloc (5,015,045 samples, 0.02%)</title><rect x="99.0112%" y="309" width="0.0228%" height="15" fill="rgb(208,25,7)" fg:x="21793379552" fg:w="5015045"/><text x="99.2612%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3,009,027 samples, 0.01%)</title><rect x="99.0385%" y="405" width="0.0137%" height="15" fill="rgb(243,144,39)" fg:x="21799397606" fg:w="3009027"/><text x="99.2885%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,009,027 samples, 0.01%)</title><rect x="99.0385%" y="389" width="0.0137%" height="15" fill="rgb(250,50,5)" fg:x="21799397606" fg:w="3009027"/><text x="99.2885%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,009,027 samples, 0.01%)</title><rect x="99.0385%" y="373" width="0.0137%" height="15" fill="rgb(207,67,11)" fg:x="21799397606" fg:w="3009027"/><text x="99.2885%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,009,027 samples, 0.01%)</title><rect x="99.0385%" y="357" width="0.0137%" height="15" fill="rgb(245,204,40)" fg:x="21799397606" fg:w="3009027"/><text x="99.2885%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,009,027 samples, 0.01%)</title><rect x="99.0385%" y="341" width="0.0137%" height="15" fill="rgb(238,228,24)" fg:x="21799397606" fg:w="3009027"/><text x="99.2885%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3,009,027 samples, 0.01%)</title><rect x="99.0522%" y="405" width="0.0137%" height="15" fill="rgb(217,116,22)" fg:x="21802406633" fg:w="3009027"/><text x="99.3022%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (3,009,027 samples, 0.01%)</title><rect x="99.0522%" y="389" width="0.0137%" height="15" fill="rgb(234,98,12)" fg:x="21802406633" fg:w="3009027"/><text x="99.3022%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,009,027 samples, 0.01%)</title><rect x="99.0522%" y="373" width="0.0137%" height="15" fill="rgb(242,170,50)" fg:x="21802406633" fg:w="3009027"/><text x="99.3022%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3,009,027 samples, 0.01%)</title><rect x="99.0522%" y="357" width="0.0137%" height="15" fill="rgb(235,7,5)" fg:x="21802406633" fg:w="3009027"/><text x="99.3022%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (9,027,081 samples, 0.04%)</title><rect x="99.0385%" y="437" width="0.0410%" height="15" fill="rgb(241,114,28)" fg:x="21799397606" fg:w="9027081"/><text x="99.2885%" y="447.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (9,027,081 samples, 0.04%)</title><rect x="99.0385%" y="421" width="0.0410%" height="15" fill="rgb(246,112,42)" fg:x="21799397606" fg:w="9027081"/><text x="99.2885%" y="431.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (27,081,243 samples, 0.12%)</title><rect x="98.9656%" y="453" width="0.1230%" height="15" fill="rgb(248,228,14)" fg:x="21783349462" fg:w="27081243"/><text x="99.2156%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3,009,027 samples, 0.01%)</title><rect x="99.0886%" y="437" width="0.0137%" height="15" fill="rgb(208,133,18)" fg:x="21810430705" fg:w="3009027"/><text x="99.3386%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,009,027 samples, 0.01%)</title><rect x="99.0886%" y="421" width="0.0137%" height="15" fill="rgb(207,35,49)" fg:x="21810430705" fg:w="3009027"/><text x="99.3386%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,009,027 samples, 0.01%)</title><rect x="99.0886%" y="405" width="0.0137%" height="15" fill="rgb(205,68,36)" fg:x="21810430705" fg:w="3009027"/><text x="99.3386%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,009,027 samples, 0.01%)</title><rect x="99.0886%" y="389" width="0.0137%" height="15" fill="rgb(245,62,40)" fg:x="21810430705" fg:w="3009027"/><text x="99.3386%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,009,027 samples, 0.01%)</title><rect x="99.0886%" y="373" width="0.0137%" height="15" fill="rgb(228,27,24)" fg:x="21810430705" fg:w="3009027"/><text x="99.3386%" y="383.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_knight_moves_from_pos (6,018,054 samples, 0.03%)</title><rect x="99.0886%" y="453" width="0.0273%" height="15" fill="rgb(253,19,12)" fg:x="21810430705" fg:w="6018054"/><text x="99.3386%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4,012,036 samples, 0.02%)</title><rect x="99.1251%" y="437" width="0.0182%" height="15" fill="rgb(232,28,20)" fg:x="21818454777" fg:w="4012036"/><text x="99.3751%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,012,036 samples, 0.02%)</title><rect x="99.1251%" y="421" width="0.0182%" height="15" fill="rgb(218,35,51)" fg:x="21818454777" fg:w="4012036"/><text x="99.3751%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,012,036 samples, 0.02%)</title><rect x="99.1251%" y="405" width="0.0182%" height="15" fill="rgb(212,90,40)" fg:x="21818454777" fg:w="4012036"/><text x="99.3751%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,012,036 samples, 0.02%)</title><rect x="99.1251%" y="389" width="0.0182%" height="15" fill="rgb(220,172,12)" fg:x="21818454777" fg:w="4012036"/><text x="99.3751%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,012,036 samples, 0.02%)</title><rect x="99.1251%" y="373" width="0.0182%" height="15" fill="rgb(226,159,20)" fg:x="21818454777" fg:w="4012036"/><text x="99.3751%" y="383.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (12,036,108 samples, 0.05%)</title><rect x="99.1160%" y="453" width="0.0547%" height="15" fill="rgb(234,205,16)" fg:x="21816448759" fg:w="12036108"/><text x="99.3660%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,015,045 samples, 0.02%)</title><rect x="99.1798%" y="357" width="0.0228%" height="15" fill="rgb(207,9,39)" fg:x="21830490885" fg:w="5015045"/><text x="99.4298%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5,015,045 samples, 0.02%)</title><rect x="99.1798%" y="341" width="0.0228%" height="15" fill="rgb(249,143,15)" fg:x="21830490885" fg:w="5015045"/><text x="99.4298%" y="351.50"></text></g><g><title>alloc::alloc::alloc (5,015,045 samples, 0.02%)</title><rect x="99.1798%" y="325" width="0.0228%" height="15" fill="rgb(253,133,29)" fg:x="21830490885" fg:w="5015045"/><text x="99.4298%" y="335.50"></text></g><g><title>__GI___libc_malloc (4,012,036 samples, 0.02%)</title><rect x="99.1843%" y="309" width="0.0182%" height="15" fill="rgb(221,187,0)" fg:x="21831493894" fg:w="4012036"/><text x="99.4343%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6,018,054 samples, 0.03%)</title><rect x="99.1798%" y="437" width="0.0273%" height="15" fill="rgb(205,204,26)" fg:x="21830490885" fg:w="6018054"/><text x="99.4298%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6,018,054 samples, 0.03%)</title><rect x="99.1798%" y="421" width="0.0273%" height="15" fill="rgb(224,68,54)" fg:x="21830490885" fg:w="6018054"/><text x="99.4298%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6,018,054 samples, 0.03%)</title><rect x="99.1798%" y="405" width="0.0273%" height="15" fill="rgb(209,67,4)" fg:x="21830490885" fg:w="6018054"/><text x="99.4298%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (6,018,054 samples, 0.03%)</title><rect x="99.1798%" y="389" width="0.0273%" height="15" fill="rgb(228,229,18)" fg:x="21830490885" fg:w="6018054"/><text x="99.4298%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (6,018,054 samples, 0.03%)</title><rect x="99.1798%" y="373" width="0.0273%" height="15" fill="rgb(231,89,13)" fg:x="21830490885" fg:w="6018054"/><text x="99.4298%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,009,027 samples, 0.01%)</title><rect x="99.2071%" y="437" width="0.0137%" height="15" fill="rgb(210,182,18)" fg:x="21836508939" fg:w="3009027"/><text x="99.4571%" y="447.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (16,048,144 samples, 0.07%)</title><rect x="99.1707%" y="453" width="0.0729%" height="15" fill="rgb(240,105,2)" fg:x="21828484867" fg:w="16048144"/><text x="99.4207%" y="463.50"></text></g><g><title>chlang::board::Board::is_valid (135,406,215 samples, 0.62%)</title><rect x="98.6603%" y="485" width="0.6152%" height="15" fill="rgb(207,170,50)" fg:x="21716147859" fg:w="135406215"/><text x="98.9103%" y="495.50"></text></g><g><title>chlang::board::Board::attacked_by_color (135,406,215 samples, 0.62%)</title><rect x="98.6603%" y="469" width="0.6152%" height="15" fill="rgb(232,133,24)" fg:x="21716147859" fg:w="135406215"/><text x="98.9103%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (5,015,045 samples, 0.02%)</title><rect x="99.2527%" y="453" width="0.0228%" height="15" fill="rgb(235,166,27)" fg:x="21846539029" fg:w="5015045"/><text x="99.5027%" y="463.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (5,015,045 samples, 0.02%)</title><rect x="99.2527%" y="437" width="0.0228%" height="15" fill="rgb(209,19,13)" fg:x="21846539029" fg:w="5015045"/><text x="99.5027%" y="447.50"></text></g><g><title>chlang::board::Board::piece_type (3,009,027 samples, 0.01%)</title><rect x="99.2846%" y="469" width="0.0137%" height="15" fill="rgb(226,79,39)" fg:x="21853560092" fg:w="3009027"/><text x="99.5346%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,009,027 samples, 0.01%)</title><rect x="99.3074%" y="453" width="0.0137%" height="15" fill="rgb(222,163,10)" fg:x="21858575137" fg:w="3009027"/><text x="99.5574%" y="463.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_rook_moves_from_pos (10,030,090 samples, 0.05%)</title><rect x="99.2982%" y="469" width="0.0456%" height="15" fill="rgb(214,44,19)" fg:x="21856569119" fg:w="10030090"/><text x="99.5482%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (5,015,045 samples, 0.02%)</title><rect x="99.3529%" y="453" width="0.0228%" height="15" fill="rgb(210,217,13)" fg:x="21868605227" fg:w="5015045"/><text x="99.6029%" y="463.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (5,015,045 samples, 0.02%)</title><rect x="99.3529%" y="437" width="0.0228%" height="15" fill="rgb(237,61,54)" fg:x="21868605227" fg:w="5015045"/><text x="99.6029%" y="447.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (9,027,081 samples, 0.04%)</title><rect x="99.3438%" y="469" width="0.0410%" height="15" fill="rgb(226,184,24)" fg:x="21866599209" fg:w="9027081"/><text x="99.5938%" y="479.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (3,009,027 samples, 0.01%)</title><rect x="99.3894%" y="469" width="0.0137%" height="15" fill="rgb(223,226,4)" fg:x="21876629299" fg:w="3009027"/><text x="99.6394%" y="479.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (4,012,036 samples, 0.02%)</title><rect x="99.4031%" y="469" width="0.0182%" height="15" fill="rgb(210,26,41)" fg:x="21879638326" fg:w="4012036"/><text x="99.6531%" y="479.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (39,117,351 samples, 0.18%)</title><rect x="99.2755%" y="485" width="0.1777%" height="15" fill="rgb(220,221,6)" fg:x="21851554074" fg:w="39117351"/><text x="99.5255%" y="495.50"></text></g><g><title>chlang::board::Board::make_move (208,625,872 samples, 0.95%)</title><rect x="98.5646%" y="501" width="0.9478%" height="15" fill="rgb(225,89,49)" fg:x="21695084670" fg:w="208625872"/><text x="98.8146%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::pow (5,015,045 samples, 0.02%)</title><rect x="99.5215%" y="485" width="0.0228%" height="15" fill="rgb(218,70,45)" fg:x="21905716560" fg:w="5015045"/><text x="99.7715%" y="495.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (4,012,036 samples, 0.02%)</title><rect x="99.5534%" y="469" width="0.0182%" height="15" fill="rgb(238,166,21)" fg:x="21912737623" fg:w="4012036"/><text x="99.8034%" y="479.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (8,024,072 samples, 0.04%)</title><rect x="99.5443%" y="485" width="0.0365%" height="15" fill="rgb(224,141,44)" fg:x="21910731605" fg:w="8024072"/><text x="99.7943%" y="495.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves (20,060,180 samples, 0.09%)</title><rect x="99.5124%" y="501" width="0.0911%" height="15" fill="rgb(230,12,49)" fg:x="21903710542" fg:w="20060180"/><text x="99.7624%" y="511.50"></text></g><g><title>chlang::board::Board::get_game_state (448,345,023 samples, 2.04%)</title><rect x="97.5758%" y="533" width="2.0369%" height="15" fill="rgb(212,174,12)" fg:x="21477431717" fg:w="448345023"/><text x="97.8258%" y="543.50">c..</text></g><g><title>chlang::board::Board::get_valid_moves (235,707,115 samples, 1.07%)</title><rect x="98.5418%" y="517" width="1.0709%" height="15" fill="rgb(246,67,9)" fg:x="21690069625" fg:w="235707115"/><text x="98.7918%" y="527.50"></text></g><g><title>chlang::tree_evaluator::eval (21,922,767,713 samples, 99.60%)</title><rect x="0.0182%" y="549" width="99.5990%" height="15" fill="rgb(239,35,23)" fg:x="4012036" fg:w="21922767713"/><text x="0.2682%" y="559.50">chlang::tree_evaluator::eval</text></g><g><title>chlang::board::Board::is_valid (3,009,027 samples, 0.01%)</title><rect x="99.6218%" y="533" width="0.0137%" height="15" fill="rgb(211,167,0)" fg:x="21927782758" fg:w="3009027"/><text x="99.8718%" y="543.50"></text></g><g><title>chlang::board::Board::attacked_by_color (3,009,027 samples, 0.01%)</title><rect x="99.6218%" y="517" width="0.0137%" height="15" fill="rgb(225,119,45)" fg:x="21927782758" fg:w="3009027"/><text x="99.8718%" y="527.50"></text></g><g><title>chlang::board::Board::make_move (5,015,045 samples, 0.02%)</title><rect x="99.6172%" y="549" width="0.0228%" height="15" fill="rgb(210,162,6)" fg:x="21926779749" fg:w="5015045"/><text x="99.8672%" y="559.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves (4,012,036 samples, 0.02%)</title><rect x="99.6446%" y="549" width="0.0182%" height="15" fill="rgb(208,118,35)" fg:x="21932797803" fg:w="4012036"/><text x="99.8946%" y="559.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (4,012,036 samples, 0.02%)</title><rect x="99.6765%" y="405" width="0.0182%" height="15" fill="rgb(239,4,53)" fg:x="21939818866" fg:w="4012036"/><text x="99.9265%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4,012,036 samples, 0.02%)</title><rect x="99.6765%" y="389" width="0.0182%" height="15" fill="rgb(213,130,21)" fg:x="21939818866" fg:w="4012036"/><text x="99.9265%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6,018,054 samples, 0.03%)</title><rect x="99.6719%" y="453" width="0.0273%" height="15" fill="rgb(235,148,0)" fg:x="21938815857" fg:w="6018054"/><text x="99.9219%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6,018,054 samples, 0.03%)</title><rect x="99.6719%" y="437" width="0.0273%" height="15" fill="rgb(244,224,18)" fg:x="21938815857" fg:w="6018054"/><text x="99.9219%" y="447.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (6,018,054 samples, 0.03%)</title><rect x="99.6719%" y="421" width="0.0273%" height="15" fill="rgb(211,214,4)" fg:x="21938815857" fg:w="6018054"/><text x="99.9219%" y="431.50"></text></g><g><title>hashbrown::map::make_hash (7,021,063 samples, 0.03%)</title><rect x="99.6719%" y="485" width="0.0319%" height="15" fill="rgb(206,119,25)" fg:x="21938815857" fg:w="7021063"/><text x="99.9219%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7,021,063 samples, 0.03%)</title><rect x="99.6719%" y="469" width="0.0319%" height="15" fill="rgb(243,93,47)" fg:x="21938815857" fg:w="7021063"/><text x="99.9219%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3,009,027 samples, 0.01%)</title><rect x="99.7129%" y="197" width="0.0137%" height="15" fill="rgb(224,194,6)" fg:x="21947842938" fg:w="3009027"/><text x="99.9629%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (5,015,045 samples, 0.02%)</title><rect x="99.7129%" y="261" width="0.0228%" height="15" fill="rgb(243,229,6)" fg:x="21947842938" fg:w="5015045"/><text x="99.9629%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="99.7129%" y="245" width="0.0228%" height="15" fill="rgb(207,23,50)" fg:x="21947842938" fg:w="5015045"/><text x="99.9629%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="99.7129%" y="229" width="0.0228%" height="15" fill="rgb(253,192,32)" fg:x="21947842938" fg:w="5015045"/><text x="99.9629%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,015,045 samples, 0.02%)</title><rect x="99.7129%" y="213" width="0.0228%" height="15" fill="rgb(213,21,6)" fg:x="21947842938" fg:w="5015045"/><text x="99.9629%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3,009,027 samples, 0.01%)</title><rect x="99.7357%" y="229" width="0.0137%" height="15" fill="rgb(243,151,13)" fg:x="21952857983" fg:w="3009027"/><text x="99.9857%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3,009,027 samples, 0.01%)</title><rect x="99.7357%" y="213" width="0.0137%" height="15" fill="rgb(233,165,41)" fg:x="21952857983" fg:w="3009027"/><text x="99.9857%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,009,027 samples, 0.01%)</title><rect x="99.7357%" y="197" width="0.0137%" height="15" fill="rgb(246,176,45)" fg:x="21952857983" fg:w="3009027"/><text x="99.9857%" y="207.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (10,030,090 samples, 0.05%)</title><rect x="99.7129%" y="293" width="0.0456%" height="15" fill="rgb(217,170,52)" fg:x="21947842938" fg:w="10030090"/><text x="99.9629%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (10,030,090 samples, 0.05%)</title><rect x="99.7129%" y="277" width="0.0456%" height="15" fill="rgb(214,203,54)" fg:x="21947842938" fg:w="10030090"/><text x="99.9629%" y="287.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (5,015,045 samples, 0.02%)</title><rect x="99.7357%" y="261" width="0.0228%" height="15" fill="rgb(248,215,49)" fg:x="21952857983" fg:w="5015045"/><text x="99.9857%" y="271.50"></text></g><g><title>core::hash::Hasher::write_usize (5,015,045 samples, 0.02%)</title><rect x="99.7357%" y="245" width="0.0228%" height="15" fill="rgb(208,46,10)" fg:x="21952857983" fg:w="5015045"/><text x="99.9857%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (12,036,108 samples, 0.05%)</title><rect x="99.7084%" y="341" width="0.0547%" height="15" fill="rgb(254,5,31)" fg:x="21946839929" fg:w="12036108"/><text x="99.9584%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (12,036,108 samples, 0.05%)</title><rect x="99.7084%" y="325" width="0.0547%" height="15" fill="rgb(222,104,33)" fg:x="21946839929" fg:w="12036108"/><text x="99.9584%" y="335.50"></text></g><g><title>&lt;chlang::board::KeyStruct as core::hash::Hash&gt;::hash (12,036,108 samples, 0.05%)</title><rect x="99.7084%" y="309" width="0.0547%" height="15" fill="rgb(248,49,16)" fg:x="21946839929" fg:w="12036108"/><text x="99.9584%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (16,048,144 samples, 0.07%)</title><rect x="99.7038%" y="485" width="0.0729%" height="15" fill="rgb(232,198,41)" fg:x="21945836920" fg:w="16048144"/><text x="99.9538%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (16,048,144 samples, 0.07%)</title><rect x="99.7038%" y="469" width="0.0729%" height="15" fill="rgb(214,125,3)" fg:x="21945836920" fg:w="16048144"/><text x="99.9538%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (16,048,144 samples, 0.07%)</title><rect x="99.7038%" y="453" width="0.0729%" height="15" fill="rgb(229,220,28)" fg:x="21945836920" fg:w="16048144"/><text x="99.9538%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (16,048,144 samples, 0.07%)</title><rect x="99.7038%" y="437" width="0.0729%" height="15" fill="rgb(222,64,37)" fg:x="21945836920" fg:w="16048144"/><text x="99.9538%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (16,048,144 samples, 0.07%)</title><rect x="99.7038%" y="421" width="0.0729%" height="15" fill="rgb(249,184,13)" fg:x="21945836920" fg:w="16048144"/><text x="99.9538%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (15,045,135 samples, 0.07%)</title><rect x="99.7084%" y="405" width="0.0684%" height="15" fill="rgb(252,176,6)" fg:x="21946839929" fg:w="15045135"/><text x="99.9584%" y="415.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (15,045,135 samples, 0.07%)</title><rect x="99.7084%" y="389" width="0.0684%" height="15" fill="rgb(228,153,7)" fg:x="21946839929" fg:w="15045135"/><text x="99.9584%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (15,045,135 samples, 0.07%)</title><rect x="99.7084%" y="373" width="0.0684%" height="15" fill="rgb(242,193,5)" fg:x="21946839929" fg:w="15045135"/><text x="99.9584%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15,045,135 samples, 0.07%)</title><rect x="99.7084%" y="357" width="0.0684%" height="15" fill="rgb(232,140,9)" fg:x="21946839929" fg:w="15045135"/><text x="99.9584%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,009,027 samples, 0.01%)</title><rect x="99.7630%" y="341" width="0.0137%" height="15" fill="rgb(213,222,16)" fg:x="21958876037" fg:w="3009027"/><text x="100.0130%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,009,027 samples, 0.01%)</title><rect x="99.7630%" y="325" width="0.0137%" height="15" fill="rgb(222,75,50)" fg:x="21958876037" fg:w="3009027"/><text x="100.0130%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,009,027 samples, 0.01%)</title><rect x="99.7630%" y="309" width="0.0137%" height="15" fill="rgb(205,180,2)" fg:x="21958876037" fg:w="3009027"/><text x="100.0130%" y="319.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (26,078,234 samples, 0.12%)</title><rect x="99.6628%" y="517" width="0.1185%" height="15" fill="rgb(216,34,7)" fg:x="21936809839" fg:w="26078234"/><text x="99.9128%" y="527.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (26,078,234 samples, 0.12%)</title><rect x="99.6628%" y="501" width="0.1185%" height="15" fill="rgb(253,16,32)" fg:x="21936809839" fg:w="26078234"/><text x="99.9128%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V&gt; as core::convert::From&lt;[(K,V): N]&gt;&gt;::from (3,009,027 samples, 0.01%)</title><rect x="99.7949%" y="517" width="0.0137%" height="15" fill="rgb(208,97,28)" fg:x="21965897100" fg:w="3009027"/><text x="100.0449%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3,009,027 samples, 0.01%)</title><rect x="99.7949%" y="501" width="0.0137%" height="15" fill="rgb(225,92,11)" fg:x="21965897100" fg:w="3009027"/><text x="100.0449%" y="511.50"></text></g><g><title>chlang::board::Board::is_threefold_rep (33,099,297 samples, 0.15%)</title><rect x="99.6628%" y="533" width="0.1504%" height="15" fill="rgb(243,38,12)" fg:x="21936809839" fg:w="33099297"/><text x="99.9128%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 0.01%)</title><rect x="99.8223%" y="469" width="0.0137%" height="15" fill="rgb(208,139,16)" fg:x="21971915154" fg:w="3009027"/><text x="100.0723%" y="479.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 0.01%)</title><rect x="99.8223%" y="453" width="0.0137%" height="15" fill="rgb(227,24,9)" fg:x="21971915154" fg:w="3009027"/><text x="100.0723%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chlang::cmove::Move,alloc::alloc::Global&gt;&gt; (3,009,027 samples, 0.01%)</title><rect x="99.8223%" y="437" width="0.0137%" height="15" fill="rgb(206,62,11)" fg:x="21971915154" fg:w="3009027"/><text x="100.0723%" y="447.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 0.01%)</title><rect x="99.8223%" y="421" width="0.0137%" height="15" fill="rgb(228,134,27)" fg:x="21971915154" fg:w="3009027"/><text x="100.0723%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chlang::cmove::Move&gt;&gt; (3,009,027 samples, 0.01%)</title><rect x="99.8223%" y="405" width="0.0137%" height="15" fill="rgb(205,55,33)" fg:x="21971915154" fg:w="3009027"/><text x="100.0723%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,009,027 samples, 0.01%)</title><rect x="99.8223%" y="389" width="0.0137%" height="15" fill="rgb(243,75,43)" fg:x="21971915154" fg:w="3009027"/><text x="100.0723%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,009,027 samples, 0.01%)</title><rect x="99.8223%" y="373" width="0.0137%" height="15" fill="rgb(223,27,42)" fg:x="21971915154" fg:w="3009027"/><text x="100.0723%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,009,027 samples, 0.01%)</title><rect x="99.8223%" y="357" width="0.0137%" height="15" fill="rgb(232,189,33)" fg:x="21971915154" fg:w="3009027"/><text x="100.0723%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (3,009,027 samples, 0.01%)</title><rect x="99.8223%" y="341" width="0.0137%" height="15" fill="rgb(210,9,39)" fg:x="21971915154" fg:w="3009027"/><text x="100.0723%" y="351.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_pawn_moves_from_pos (8,024,072 samples, 0.04%)</title><rect x="99.8542%" y="469" width="0.0365%" height="15" fill="rgb(242,85,26)" fg:x="21978936217" fg:w="8024072"/><text x="100.1042%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::concat (4,012,036 samples, 0.02%)</title><rect x="99.8724%" y="453" width="0.0182%" height="15" fill="rgb(248,44,4)" fg:x="21982948253" fg:w="4012036"/><text x="100.1224%" y="463.50"></text></g><g><title>&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (4,012,036 samples, 0.02%)</title><rect x="99.8724%" y="437" width="0.0182%" height="15" fill="rgb(250,96,46)" fg:x="21982948253" fg:w="4012036"/><text x="100.1224%" y="447.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_bishop_moves_from_pos (3,009,027 samples, 0.01%)</title><rect x="99.8997%" y="469" width="0.0137%" height="15" fill="rgb(229,116,26)" fg:x="21988966307" fg:w="3009027"/><text x="100.1497%" y="479.50"></text></g><g><title>chlang::board::Board::is_valid (22,066,198 samples, 0.10%)</title><rect x="99.8223%" y="501" width="0.1003%" height="15" fill="rgb(246,94,34)" fg:x="21971915154" fg:w="22066198"/><text x="100.0723%" y="511.50"></text></g><g><title>chlang::board::Board::attacked_by_color (22,066,198 samples, 0.10%)</title><rect x="99.8223%" y="485" width="0.1003%" height="15" fill="rgb(251,73,21)" fg:x="21971915154" fg:w="22066198"/><text x="100.0723%" y="495.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_king_moves_from_pos (3,009,027 samples, 0.01%)</title><rect x="99.9225%" y="485" width="0.0137%" height="15" fill="rgb(254,121,25)" fg:x="21993981352" fg:w="3009027"/><text x="100.1725%" y="495.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves_from_pos (4,012,036 samples, 0.02%)</title><rect x="99.9225%" y="501" width="0.0182%" height="15" fill="rgb(215,161,49)" fg:x="21993981352" fg:w="4012036"/><text x="100.1725%" y="511.50"></text></g><g><title>chlang::board::Board::make_move (29,087,261 samples, 0.13%)</title><rect x="99.8132%" y="517" width="0.1321%" height="15" fill="rgb(221,43,13)" fg:x="21969909136" fg:w="29087261"/><text x="100.0632%" y="527.50"></text></g><g><title>chlang::board::Board::get_game_state (67,201,603 samples, 0.31%)</title><rect x="99.6628%" y="549" width="0.3053%" height="15" fill="rgb(249,5,37)" fg:x="21936809839" fg:w="67201603"/><text x="99.9128%" y="559.50"></text></g><g><title>chlang::board::Board::get_valid_moves (34,102,306 samples, 0.15%)</title><rect x="99.8132%" y="533" width="0.1549%" height="15" fill="rgb(226,25,44)" fg:x="21969909136" fg:w="34102306"/><text x="100.0632%" y="543.50"></text></g><g><title>chlang::board::Board::get_pseudo_legal_moves (5,015,045 samples, 0.02%)</title><rect x="99.9453%" y="517" width="0.0228%" height="15" fill="rgb(238,189,16)" fg:x="21998996397" fg:w="5015045"/><text x="100.1953%" y="527.50"></text></g><g><title>chlang::tree_evaluator::eval (22,002,005,424 samples, 99.96%)</title><rect x="0.0182%" y="565" width="99.9590%" height="15" fill="rgb(251,186,8)" fg:x="4012036" fg:w="22002005424"/><text x="0.2682%" y="575.50">chlang::tree_evaluator::eval</text></g><g><title>chlang::tree_evaluator::Bot::find_best_move (22,005,014,451 samples, 99.97%)</title><rect x="0.0182%" y="581" width="99.9727%" height="15" fill="rgb(254,34,31)" fg:x="4012036" fg:w="22005014451"/><text x="0.2682%" y="591.50">chlang::tree_evaluator::Bot::find_best_move</text></g><g><title>all (22,011,032,505 samples, 100%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(225,215,27)" fg:x="0" fg:w="22011032505"/><text x="0.2500%" y="895.50"></text></g><g><title>chlang (22,011,032,505 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(221,192,48)" fg:x="0" fg:w="22011032505"/><text x="0.2500%" y="879.50">chlang</text></g><g><title>_start (22,011,032,505 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(219,137,20)" fg:x="0" fg:w="22011032505"/><text x="0.2500%" y="863.50">_start</text></g><g><title>__libc_start_main_impl (22,011,032,505 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(219,84,11)" fg:x="0" fg:w="22011032505"/><text x="0.2500%" y="847.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (22,011,032,505 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(224,10,23)" fg:x="0" fg:w="22011032505"/><text x="0.2500%" y="831.50">__libc_start_call_main</text></g><g><title>main (22,011,032,505 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(248,22,39)" fg:x="0" fg:w="22011032505"/><text x="0.2500%" y="815.50">main</text></g><g><title>std::rt::lang_start_internal (22,011,032,505 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(212,154,20)" fg:x="0" fg:w="22011032505"/><text x="0.2500%" y="799.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (22,011,032,505 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(236,199,50)" fg:x="0" fg:w="22011032505"/><text x="0.2500%" y="783.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (22,011,032,505 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(211,9,17)" fg:x="0" fg:w="22011032505"/><text x="0.2500%" y="767.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (22,011,032,505 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(243,216,36)" fg:x="0" fg:w="22011032505"/><text x="0.2500%" y="751.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (22,011,032,505 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(250,2,10)" fg:x="0" fg:w="22011032505"/><text x="0.2500%" y="735.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (22,011,032,505 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(226,50,48)" fg:x="0" fg:w="22011032505"/><text x="0.2500%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (22,011,032,505 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(243,81,16)" fg:x="0" fg:w="22011032505"/><text x="0.2500%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (22,011,032,505 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(250,14,2)" fg:x="0" fg:w="22011032505"/><text x="0.2500%" y="687.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (22,011,032,505 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(233,135,29)" fg:x="0" fg:w="22011032505"/><text x="0.2500%" y="671.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (22,011,032,505 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(224,64,43)" fg:x="0" fg:w="22011032505"/><text x="0.2500%" y="655.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (22,011,032,505 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(238,84,13)" fg:x="0" fg:w="22011032505"/><text x="0.2500%" y="639.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (22,011,032,505 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(253,48,26)" fg:x="0" fg:w="22011032505"/><text x="0.2500%" y="623.50">core::ops::function::FnOnce::call_once</text></g><g><title>chlang::main (22,011,032,505 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(205,223,31)" fg:x="0" fg:w="22011032505"/><text x="0.2500%" y="607.50">chlang::main</text></g></svg></svg>